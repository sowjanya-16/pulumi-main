@model LC_Reports_V1.Models.TsouChartAttributes

@{
    ViewBag.Title = "Test System Overall Usage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GKX0NP1SYR"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-GKX0NP1SYR');
    </script>
    <meta charset="UTF-8" />
    <title>SmartLab - Reporting TSOU</title>
    <style type="text/css">
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        }

        #chartdiv {
            width: 100%;
            height: 800px;
        }


        .amcharts-amexport-item {
            border: 2px solid #777;
        }

        .amcharts-amexport-top .amcharts-amexport-item > .amcharts-amexport-menu {
            top: -50px !important;
            right: 2px !important;
        }
    </style>
</head>

<body>
    <h2 style="text-align:center;">Test System Overall Usage</h2>
     
    <div style="height:40px">
        @* Export to Excel- oig1cob *@
        <input type="image" src="~/Content/images/Excel_Icon.png" alt="Submit" width="39" height="35" id="export" class="btn btn-outline-secondary btn-sm" style="margin:5px; float:right;" disabled />


        <script type="text/javascript">
            document.querySelector('#export').addEventListener('click', function () {
                debugger;
                var startdate_rd = '@Model.StartTime.ToShortDateString().ToString()';
                var enddate_rd = '@Model.EndTime.ToShortDateString().ToString()';
                var url = '@Html.Raw(Url.Action("ExportTSOUDataToExcel", "LabCar", new { source = "TSOU_Percentage", sdate = "__startdate__", edate = "__enddate__"}))';
                var params = url.replace('__startdate__', startdate_rd).replace('__enddate__', enddate_rd);
                window.location.href = params;

                }, false);

        </script>
        @*end: Export to Excel- oig1cob*@
    </div>

    <div id="chartdiv">
    </div>
    <script src="../../Scripts/core.js" type="text/javascript"></script>
    <script src="../../Scripts/charts.js" type="text/javascript"></script>
    <script src="../../Scripts/animated.js" type="text/javascript"></script>
    <!-- Chart code -->
    @section Scripts{
        <script type="text/javascript">

        debugger;


        var averageManHours = @Math.Round((Model.OverallManualHours+Model.OverallManualCaplHours)/Model.LabFields.Count(), 2);
        var averageAutoHours = @Math.Round((Model.OverallAutomatedHours+Model.OverallAutomatedCaplHours)/Model.LabFields.Count(),2);
        var averageAllHours = @Math.Round((Model.OverallAutomatedHours+Model.OverallManualHours + Model.OverallManualCaplHours + Model.OverallAutomatedCaplHours) /@Model.LabFields.Count(),2);
    // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end
    am4core.options.queue = true;
    am4core.options.onlyShowOnViewport = true;
    var chart = am4core.create("chartdiv", am4charts.XYChart);
        chart.hiddenState.properties.opacity = 0;

        chart.colors.step=2;
        chart.padding(30, 30, 10, 50);
        chart.legend = new am4charts.Legend();

        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "name";
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.labels.template.verticalCenter = "middle";
        categoryAxis.renderer.labels.template.horizontalCenter = "left";
        categoryAxis.renderer.grid.template.above = true;
        categoryAxis.renderer.grid.template.disabled = true;
        categoryAxis.renderer.labels.template.rotation = 270;
        categoryAxis.renderer.minGridDistance = 5;



        var title = chart.titles.create();
        title.text = "Location: @Model.Location Model: @Model.Model StartDate: @Model.StartTime.ToShortDateString() - EndDate: @Model.EndTime.ToShortDateString() | All Days x 12 hrs = 100 % | All Days x 8 hrs = 67 %";
        title.fontSize = 20;

        //categoryAxis.renderer.cellStartLocation = 0;
        //categoryAxis.renderer.cellEndLocation = 0.5;


        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        chart.events.on("ready", function(ev) {
            valueAxis.min = 0;
            valueAxis.max = 200;
        });
        valueAxis.strictMinMax = true;
        valueAxis.calculateTotals = true;
        valueAxis.renderer.minGridDistance = 20;
        valueAxis.title.text = "Utilization %";
        valueAxis.title.rotation = 270;
        valueAxis.title.align = "center";
        valueAxis.title.valign = "middle";
        valueAxis.title.dy = -40;
        valueAxis.title.fontWeight = 600;
            //chart

        //START OF GROUPING CODE
        var tempOemdata = [];
        var chartData = [];
        var labData = [];
         var cnt =0;
          @{uint cntName = 0;}
        @{double days = Model.EndTime.Subtract(Model.StartTime).TotalDays;}
        @{double hours_100p = (days*12);}
             @foreach (var group in Model.LabFields.GroupBy(x => x.LabOEM))
            {
                foreach (var labs in group)
                {
                    if (labs != null) {
                    <text>
                    tempOemdata[cnt] ="@labs.LabOEM" ;
                    labData[cnt] =
                    {
                        labOEM: "@labs.LabOEM",
                        name: "@labs.TSOULabel",
                        manual: "@Math.Round((labs.ManualTotalTime / hours_100p) * 100, 2)",
                        manual_capl : "@Math.Round((labs.Manual_capl_TotalTime / hours_100p) * 100, 2)",
                        automated: "@Math.Round((labs.AutomatedTotalTime / hours_100p) * 100, 2)",
                        automated_capl : "@Math.Round((labs.Automated_capl_TotalTimeField / hours_100p) * 100, 2)",
                        manualTime: "@Math.Round(labs.ManualTotalTime)",
                        automatedTime: "@Math.Round(labs.AutomatedTotalTime)",
                        reader: {
                            manual: "@Math.Round(labs.ManualTotalTime)",
                            manual_capl: "@Math.Round(labs.Manual_capl_TotalTime)",
                            automated: "@Math.Round(labs.AutomatedTotalTime)",
                            automated_capl: "@Math.Round(labs.Automated_capl_TotalTimeField)",
                            total: "@Math.Round(labs.TotalSum)"
                        }

                    };

                    @{cntName++;}
                    cnt++;

                    </text>

                            }
                        }
                        }

        // get unique lab oems
        var uniqueOEM = [];
        $.each(tempOemdata, function (i, el) {
            if ($.inArray(el, uniqueOEM) === -1) uniqueOEM.push(el);
        });

        // process data ant prepare it for the chart
        uniqueOEM.forEach(function (l_oem) {
            //var providerData = data[providerName];
            debugger;
            // add data of one provider to temp array
            var tempArray = [];
            var count = 0;
            // add items
            labData.forEach(function (labItem) {
                debugger;
                if (labItem.labOEM == l_oem) {
                    count++;
                    // we generate unique category for each column (providerName + "_" + itemName) and store realName
                    tempArray.push({
                        name: labItem.name, manual: labItem.manual, manual_capl: labItem.manual_capl,
                        automated: labItem.automated,
                        automated_capl: labItem.automated_capl,
                        reader: labItem.reader, oem: l_oem, manualTime: labItem.manualTime, automatedTime: labItem.automatedTime})
                }
            })
            // push to the final data
            am4core.array.each(tempArray, function (item) {
                chartData.push(item);
            })

            // create range (the additional label at the bottom)
            var rangecat = categoryAxis.axisRanges.create();
            rangecat.category = tempArray[0].name;
            rangecat.endCategory = tempArray[tempArray.length - 1].name;
            rangecat.label.text = tempArray[0].oem;
            rangecat.label.dy = 0;
            rangecat.label.horizontalCenter = "middle";
            rangecat.label.rotation = 0;
            rangecat.label.truncate = true;
            rangecat.label.fontWeight = "bold";
            rangecat.label.fontSize = 11;
            rangecat.grid.disabled = true;
            rangecat.tick.disabled = false;
            rangecat.tick.length = 150;
            rangecat.tick.strokeOpacity = 0.6;
            rangecat.tick.location = 0;
            //range.label.adapter.add("maxWidth", function (maxWidth, target) {
            //    var range = target.dataItem;
            //    var startPosition = categoryAxis.categoryToPosition(range.category, 0);
            //    var endPosition = categoryAxis.categoryToPosition(range.endCategory, 1);
            //    var startX = categoryAxis.positionToCoordinate(startPosition);
            //    var endX = categoryAxis.positionToCoordinate(endPosition);
            //    return endX - startX;
            //})
        })
        chart.data = chartData;

        // last tick
        var rangelast = categoryAxis.axisRanges.create();
        rangelast.category = chart.data[chart.data.length - 1].name;
        rangelast.label.disabled = true;
        rangelast.grid.location = 1;
        rangelast.tick.disabled = false;
        rangelast.tick.length = 150;
        rangelast.tick.location = 1;
        rangelast.tick.strokeOpacity = 0.6;
        ///END OF GROUPING CODE





                        //Code to add the range mark
                        var range = valueAxis.axisRanges.create();
                        range.value = 100; //100%
                        range.grid.stroke = am4core.color("#33cc33"); //green
                        range.grid.strokeWidth = 2;
                        range.grid.strokeOpacity = 1;
                        range.grid.above = true; //to display the grid line on top of the data.
                        range.label.inside = true;
                        range.label.text = "\xa0\xa0\xa0\xa0\xa0\xa0>100%";
                        range.label.fontWeight = 750;
                        range.label.fill = range.grid.stroke;
                        range.label.verticalCenter = "bottom";
                        var rangeRed = valueAxis.axisRanges.create();
                        rangeRed.value = 67; //67%
                        rangeRed.grid.stroke = am4core.color("#ff0000"); //red
                        rangeRed.grid.strokeWidth = 2;
                        rangeRed.grid.strokeOpacity = 1;
                        rangeRed.grid.above = true; //to display the grid line on top of the data.
                        rangeRed.label.inside = true;
                        rangeRed.label.text = "\xa0\xa0\xa0\xa0\xa0\xa0>67%";
                        rangeRed.label.fontWeight = 750;
                        rangeRed.label.fill = rangeRed.grid.stroke;
                        rangeRed.label.verticalCenter = "bottom";

                        //Code to shade the marked ranges
                        //background fill green for >100% utilization
                        var greenBG = valueAxis.axisRanges.create();
                        greenBG.value = 100
                        greenBG.endValue = 200;
                        greenBG.axisFill.fill = am4core.color("#99ff99");
                        greenBG.axisFill.fillOpacity = 0.2;
                        greenBG.grid.strokeOpacity = 0;

                        //background fill yellow for 100 > x > 50 utilization
                        var yellowBG = valueAxis.axisRanges.create();
                        yellowBG.value = 67;
                        yellowBG.endValue = 100;
                        yellowBG.axisFill.fill = am4core.color("#ffff99");
                        yellowBG.axisFill.fillOpacity = 0.2;
                        yellowBG.grid.strokeOpacity = 0;

                        //background fill red for <50% utilization
                        var redBG = valueAxis.axisRanges.create();
                        redBG.value = 0;
                        redBG.endValue = 67;
                        redBG.axisFill.fill = am4core.color("#ff6666");
                        redBG.axisFill.fillOpacity = 0.2;
                        redBG.grid.strokeOpacity = 0;
                        //1
                        var series1 = chart.series.push(new am4charts.ColumnSeries());
                        series1.columns.template.width = am4core.percent(30);
                        series1.columns.template.propertyFields.dummyData = "reader";
                        series1.columns.template.tooltipText = "Manual Usage: {dummyData.manual} hrs \x0a Total Usage: {dummyData.total} hrs";
                        //" Manual Hours: {valueY.totalPercent.formatNumber('#.00')}%}";
                        series1.name = "Manual Usage : @Math.Round(@Model.OverallManualHours,2) hrs";
                        series1.dataFields.categoryX = "name";
                        series1.dataFields.valueY = "manual";
                        series1.dataItems.template.locations.categoryX = 0.5;
                        series1.stacked = true;
                        series1.tooltip.pointerOrientation = "vertical";
                        series1.tooltip.exportable = true;

                        var bullet1 = series1.bullets.push(new am4charts.LabelBullet());
                        bullet1.interactionsEnabled = false;
                        bullet1.label.text = "Manual Usage: {valueY} %";
                        bullet1.label.fill = am4core.color("#ffffff");
                        bullet1.locationY = 0.5;


                        //2
                        var series2 = chart.series.push(new am4charts.ColumnSeries());
                        series2.columns.template.width = am4core.percent(30);
                        series2.columns.template.propertyFields.dummyData = "reader";
                        series2.columns.template.tooltipText =
                        "Automated Usage: {dummyData.automated} hrs \x0a Total Usage: {dummyData.total} hrs";
                        series2.name = "Automated Usage : @Math.Round(@Model.OverallAutomatedHours,2) hrs";
                        series2.dataFields.categoryX = "name";
                        series2.dataFields.valueY = "automated";
                        series2.dataItems.template.locations.categoryX = 0.5;
                        series2.stacked = true;
                        series2.tooltip.pointerOrientation = "vertical";
                        series2.tooltip.exportable = true;

                        var bullet2 = series2.bullets.push(new am4charts.LabelBullet());
                        bullet2.interactionsEnabled = false;
                        bullet2.label.text = "Automated Usage: {valueY} %";
                        bullet2.locationY = 0.5;
                        bullet2.label.fill = am4core.color("#ffffff");



            //Changes to add the colring for CAPL
                        var series3 = chart.series.push(new am4charts.ColumnSeries());
                        series3.columns.template.width = am4core.percent(30);
                        series3.columns.template.propertyFields.dummyData = "reader";
                        series3.columns.template.tooltipText =
                        "Automated-CAPL Usage: {dummyData.automated_capl} hrs \x0a Total Usage: {dummyData.total} hrs";
                        series3.name = "Automated-CAPL Usage : @Math.Round(@Model.OverallAutomatedCaplHours,2) hrs";
                        series3.dataFields.categoryX = "name";
                        series3.dataFields.valueY = "automated_capl";
                        series3.dataItems.template.locations.categoryX = 0.5;
                        series3.stacked = true;
                        series3.tooltip.pointerOrientation = "vertical";
                        series3.tooltip.exportable = true;

                        var bullet3 = series3.bullets.push(new am4charts.LabelBullet());
                        bullet3.interactionsEnabled = false;
                        bullet3.label.text = "Automated-CAPL Usage: {valueY} %";
                        bullet3.locationY = 0.5;
                        bullet3.label.fill = am4core.color("#ffffff");

                        var series4 = chart.series.push(new am4charts.ColumnSeries());
                        series4.columns.template.width = am4core.percent(30);
                        series4.columns.template.propertyFields.dummyData = "reader";
                        series4.columns.template.tooltipText =
                        "Manual-CAPL Usage: {dummyData.manual_capl} hrs \x0a Total Usage: {dummyData.total} hrs";
                        series4.name = "Manual-CAPL Usage : @Math.Round(@Model.OverallManualCaplHours,2) hrs";
                        series4.dataFields.categoryX = "name";
                        series4.dataFields.valueY = "manual_capl";
                        series4.dataItems.template.locations.categoryX = 0.5;
                        series4.stacked = true;
                        series4.tooltip.pointerOrientation = "vertical";
                        series4.tooltip.exportable = true;

                        var bullet4 = series4.bullets.push(new am4charts.LabelBullet());
                        bullet4.interactionsEnabled = false;
                        bullet4.label.text = "Manual-CAPL Usage: {valueY} %";
                        bullet4.locationY = 0.5;
                        bullet4.label.fill = am4core.color("#ffffff");


            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.parent = chart.topAxesContainer;

            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.parent = chart.leftAxesContainer;
            chart.chartContainer.wheelable = false;

            var AvgInformation = chart.createChild(am4core.Label);
            AvgInformation.text = "Total No of Systems : @Model.LabFields.Count() | Average Manual Hours : " + averageManHours + " | Average Automated Hours : " + averageAutoHours+" | Average Overall Hours: "+ averageAllHours;;
            AvgInformation.fontSize = 14;
            AvgInformation.align = "center";

            chart.exporting.menu = new am4core.ExportMenu();
            chart.exporting.filePrefix = "TSOU_@Model.Location @Model.Model @Model.StartTime.ToShortDateString() @Model.EndTime.ToShortDateString()";

            $("#export").prop('disabled', false); 
        </script>
        <!-- HTML -->
    }
</body>
</html>




@*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*@
@*<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title></title>
    </head>
    <body>
        <style>
            #chartdiv {
                width: 100%;
                height: 500px;
            }
        </style>

         Resources
        <script src="https://www.amcharts.com/lib/4/core.js"></script>
        <script src="https://www.amcharts.com/lib/4/charts.js"></script>
        <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>

         Chart code
        <script>
    am4core.ready(function () {

        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end

        // Create chart instance
        var chart = am4core.create("chartdiv", am4charts.XYChart);

        // Add data
        var cnt =0;
        @{uint cntName = 0;}
            @foreach (LC_Reports_V1.Models.TsouChartAttributesLab labs in Model.LabFields)
            {
                if (labs != null) {
                    <text>

                    chart.data[cnt] =
                    {
                        LabName: "@Model.Name[cntName]",
                        Usage: "@Math.Round(labs.ManualTotalTime+labs.AutomatedTotalTime, 2)"
                    };

                     @{cntName++;}
                     cnt++;

                     </text>

                }
             }


        // Create axes

        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "LabName";
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.minGridDistance = 30;
        categoryAxis.renderer.labels.template.rotation = 270;
        categoryAxis.renderer.labels.template.adapter.add("dy", function (dy, target) {
            if (target.dataItem && target.dataItem.index & 2 == 2) {
                return dy + 25;
            }
            return dy;
        });

        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

        // Create series
        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.valueY = "Usage";
        series.dataFields.categoryX = "LabName";
        series.name = "Usage";
        series.columns.template.tooltipText = "{categoryX}: [bold]{valueY}[/]";
        series.columns.template.fillOpacity = .8;

        var columnTemplate = series.columns.template;
        columnTemplate.strokeWidth = 2;
        columnTemplate.strokeOpacity = 1;

    }); // end am4core.ready()
        </script>

         HTML
        <div id="chartdiv"></div>
    </body>
    </html>*@

