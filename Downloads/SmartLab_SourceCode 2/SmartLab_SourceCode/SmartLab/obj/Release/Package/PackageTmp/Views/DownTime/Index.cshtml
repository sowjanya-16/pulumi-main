
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <!-- Google tag (gtag.js) -->
    <script async=async src="https://www.googletagmanager.com/gtag/js?id=G-GKX0NP1SYR"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-GKX0NP1SYR');
    </script>
    <script type="text/javascript">
        var Complist;
        var Catlist;
        var FQDN, Location, Project;
        $(document).ready(function () {
            debugger;
            $.ajax({

                type: "Get",
                async: false,
                url: "/DownTime/LoadDropdowns",
                success: onsuccess_lookupdata,
                error: onerror_lookupdata
            })


            function onsuccess_lookupdata(response) {
                debugger;
                Complist = response.CompList;
                Catlist = response.CatList;
                SuccessFuntion();


            }

            function onerror_lookupdata(response) {
                alert("Error lookup");

            }




        });


        function LoadDataGrid(data) {
            debugger;
            $("#gridContainer").dxDataGrid({
                dataSource: data,
                paging: {
                    enabled: false
                },
                showBorders: true,
                allowSorting: false,
                filterRow: {
                    visible: true,
                    applyFilter: "auto"
                },
                headerFilter: {
                    visible: true,
                    applyFilter: "auto"
                },
                export: {
                    enabled: true
                },
                onEditorPreparing: function (e) {
                    var component = e.component,
                        rowIndex = e.row && e.row.rowIndex;//new elements are positioned on the rowindex

                    if (e.dataField === "ComputerID") {

                        var onValueChanged = e.editorOptions.onValueChanged;//event for BU; makes sure that the BU is modified data
                        e.editorOptions.onValueChanged = function (e) {
                            onValueChanged.call(this, e);

                            $.ajax({

                                type: "post",
                                url: "/DownTime/GetFQDN",
                                data: { CompID: e.value },
                                datatype: "json",
                                traditional: true,
                                success: function (data) {
                                    debugger;
                                    FQDN = data.FQDN;
                                    Location = data.Location;
                                    Project = data.Project;

                                }
                            })
                            // Emulating a web service call
                            window.setTimeout(function () {
                                debugger;
                                component.cellValue(rowIndex, "FQDN", FQDN);
                                component.cellValue(rowIndex, "Location", Location);
                                component.cellValue(rowIndex, "Project", Project);
                            }, 1000);
                        }
                    }

                },
                onEditingStart: function (e) {
                    debugger;
                    logEvent(e);

                },
                columns: [{
                    dataField: "SNo",
                    visible: false
                }, {
                    //caption: "TSG4",
                    //width: 200,
                    dataField: "ComputerID",
                    lookup: {
                        dataSource: Complist,
                        valueExpr: "CompID",
                        displayExpr: "CompName"
                    },
                },
                {
                    //caption: "PC Name",
                    //width: 300,
                    dataField: "FQDN",
                    //width: 250,
                    allowEditing: false,
                    // expanded: true
                }, {


                    dataField: "Location",
                    width: 100,
                    allowEditing: false,

                    //expanded: true
                }, {

                    dataField: "Project",
                    width: 150,
                    allowEditing: false,

                    //expanded: true
                }, {
                    dataField: "Category",
                    width: 150,
                    validationRules: [{ type: "required" }],

                    lookup: {
                        dataSource: Catlist,
                        valueExpr: "CatID",
                        displayExpr: "CatName"
                    },

                },
                {

                    //width: 120,
                    dataField: "StartTime",
                    dataType: "datetime"

                }, {

                    //width: 150,
                    dataField: "EndTime",
                    dataType: "datetime"

                }, {


                    dataField: "ALM_Impediment_ID",
                    //width: 180,
                    validationRules: [{ type: 'required' }]
                },
                {

                    //width: 140,
                    dataField: "Remarks"
                }, {
                    dataField: "ModifiedUser",
                    allowEditing: false
                }],

                editing: {
                    mode: "row",
                    allowUpdating: true,
                    allowDeleting: false,
                    allowAdding: true
                },

                onRowInserted: function (e) {
                    debugger;
                    Selected = [];
                    Selected.push(e.data);
                    UpdateData(Selected);
                },
                onRowUpdated: function (e) {
                    debugger;
                    //alert(e.newData);
                    Selected = [];
                    Selected.push(e.data);
                    UpdateData(Selected);
                }

            }).dxDataGrid("instance");
            function logEvent(e) {
                debugger;
                if (e.data.EndTime == "") {
                    e.data.EndTime = null;

                }

            }

        }

        function UpdateData(id1) {
            debugger;
            $.ajax({
                type: "POST",
                url: encodeURI("../DownTime/SaveDownTimeDetails"),
                data: { 'item': id1[0] },
                success: function (data) {
                    debugger;
                    newobjdata = data.data.Data;



                    if (data.success == false) {
                        $.notify(data.msg, {
                            globalPosition: "top center",
                            className: "error",
                        })
                    }
                    else {

                        $.notify(data.msg, {
                            globalPosition: "top center",
                            className: "success",
                        })

                    }
                    $("#gridContainer").dxDataGrid({ dataSource: newobjdata.data });
                    debugger;

                }

            });

        }

        function SuccessFuntion() {
            debugger;

            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                url: "/DownTime/GetDownTimeDetails",
                datatype: "json",
                //async: true,
                success: function (data) {
                    debugger;


                    //if (data.data.Data.Content.length > 0) {
                    //    debugger;
                    //    //var res = JSON.parse(data.data.Data.Content);
                    //    var res = eval(data.data.Data.Content);
                    //    LoadDataGrid(res);

                    //}
                    if (data.data.length >= 0) {
                        debugger;
                        //var res = JSON.parse(data.data.Data.Content);
                        //var res = eval(data.data.Data.Content);
                        LoadDataGrid(data.data);

                    }
                    //else {
                    //    $('#myModal').modal();
                    //}

                    //if (rdata.success) {
                    //    $.notify('Data Uploaded Successfully', {
                    //        globalPosition: "top center",
                    //        className: "success"
                    //    });
                    //}
                    //else if (rdata.success == false) {
                    //    $.notify(data.errormsg, {
                    //        globalPosition: "top center",
                    //        className: "warn"
                    //    });
                    //}
                    //else {

                    //}


                },
                error: function (jqXHR, exception) {
                    debugger;
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    $('#post').html(msg);
                },

            });
            //function success_refresh_getdata(response) {
            //    debugger;
            //    var LabList = response.data;


            //}

            //function error_refresh_getdata(response) {
            //    //error
            //}




        }

    </script>


</head>
<body>
    <h2 style="text-align:center;">DownTime Options</h2>
    <div id="divDownTime" style="height:350px">
        <div id="gridContainer">

        </div>

    </div>
</body>
</html>
