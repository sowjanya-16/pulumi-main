@model LC_Reports_V1.Controllers.CockpitController.RequestListAttributes

@{
    ViewBag.Title = "VKM Planner";
    Layout = "~/Views/Shared/_LayoutPageBudgeting.cshtml";
}

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GKX0NP1SYR"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-GKX0NP1SYR');
    </script>
    <title>Equipment/SW Requests</title>
    <style>
        section {
            padding: 25px;
        }
    </style>





    @section scripts{
        @*JS Library specific for Bootstrap-Select Dropdown*@
        <script src="~/Scripts/bootstrap-select.js"></script>

        @*CSS Library*@
        <link href="~/Content/bootstrap-select.css" rel="stylesheet" />
        <link href="~/Content/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" />

        <script type="text/javascript">
            debugger;
            var dataGridLEP, busummarytable, deptsummarytable;
            var dataObjData, newobjdata;
            var BU_list, Item_list, Category_list, OEM_list, Group_list, CostElement_list;//, OrderStatus_list;
            var Selected = [];
            var unitprice, reviewer_2, category, costelement, leadtime, reviewer_1;
            var lookup_data, new_request;
            var filtered_yr;
            var leadtime1;
            var genSpinner_load = document.querySelector("#load");
            var countdownflag = false;
            var Item_list_New, Item_list_bkp;
            var BU_Item = 0;
            var DEPT_list;


           // var BU_list, DEPT_list, Item_list, Category_list, OEM_list, Group_list, CostElement_list;//, OrderStatus_list;

            $.ajax({

                type: "GET",
                url: "/BudgetingRequest/Lookup",
                async: false,
                success: onsuccess_lookupdata,
                error: onerror_lookupdata
            });


            function onsuccess_lookupdata(response) {
                debugger;
                lookup_data = response.data;
                BU_list = lookup_data.BU_List;
                OEM_list = lookup_data.OEM_List;
                DEPT_list = lookup_data.DEPT_List;
                Group_list = lookup_data.Groups_List;
                Item_list = lookup_data.Item_List;
                Category_list = lookup_data.Category_List;
                CostElement_list = lookup_data.CostElement_List;
                //Item_list_New = lookup_data.Item_List1;
                //Item_list_bkp = lookup_data.Item_List_bkp;


            }

            function onerror_lookupdata(response) {
                alert("Error in fetching lookup");

            }

            var objdata = [];
            //chartData.push({ year: dataObj[i].Year, plannedMAE: parseInt(dataObj[i].Planned_MAE)});
            @foreach(LC_Reports_V1.Controllers.RequestItemsRepoView item in Model.RequestItemsRepoView_model)
            {

                <text>

            objdata.push({
                BU                 : "@item.BU",
			    OEM                : "@item.OEM",
			    DEPT               : "@item.DEPT",
			    Group              : "@item.Group",
			    Item_Name          : "@item.Item_Name",
			    Category           : "@item.Category",
			    Cost_Element       : "@item.Cost_Element",
                Required_Quantity  : "@item.Required_Quantity",
                Reviewed_Quantity  : "@item.Reviewed_Quantity",
                Ordered_Quantity   : "@item.OrderedQuantity",
			    Unit_Price         : "@item.Unit_Price",
                Total_Price        : "@item.Total_Price",
                Reviewed_Cost      : "@item.Reviewed_Cost",
                OrderPrice         : "@item.OrderPrice",
			    Requestor          : "@item.Requestor",
			    Reviewer_1         : "@item.Reviewer_1",
			    Reviewer_2         : "@item.Reviewer_2",
			    Comments           : "@item.Comments",
			    RequestDate        : "@item.RequestDate",
			    Request_Status     : "@item.Request_Status"

            });
                </text>
            }
            debugger;



            //objdata = '@Model.RequestItemsRepoView_model[0].Comments';
            debugger;


            dataGridLEP = $("#RequestTable").dxDataGrid({

                dataSource: objdata,

                allowColumnReordering: true,
                allowColumnResizing: true,
                columnChooser: {
                    enabled: true
                },
                filterRow: {
                    visible: true

                },
                showBorders: true,
                headerFilter: {
                    visible: true,
                    applyFilter: "auto"
                },
                selection: {
                    applyFilter: "auto"
                },
                export: {
                    enabled: true,
                    fileName: "Item Details"
                },
                loadPanel: {
                    enabled: true
                },
                paging: {
                    pageSize: 50
                },
                searchPanel: {
                    visible: true,
                    width: 240,
                    placeholder: "Search..."
                },

                onEditorPreparing: function (e) {
                    debugger;
                    var component = e.component,
                        rowIndex = e.row && e.row.rowIndex;//new elements are positioned on the rowindex

                    if (e.parentType === "dataRow" && e.dataField === "Group") {

                        e.editorOptions.disabled = (typeof e.row.data.DEPT !== "number");
                        if (e.editorOptions.disabled)
                            e.editorOptions.placeholder = 'Select Dept first';
                        if (!e.editorOptions.disabled)
                            e.editorOptions.placeholder = 'Select Group';

                    }

                    //if (e.parentType == 'dataRow' && e.dataField == 'DEPT') {
                    //    e.editorOptions.dataSource = function (options) {
                    //        //store: { data: DEPT_list }
                    //        //store: {
                    //        //    //type: 'array',
                    //        //    data: states,
                    //        //    key: 'ID',
                    //        //} ,
                    //        filter: function (item) {
                    //            if (item.Outdated == false) {
                    //                return false;
                    //            }
                    //        }
                    //    }
                    //}


                    if (e.dataField === "BU") {
                        debugger;
                        var onValueChanged = e.editorOptions.onValueChanged;//event for BU; makes sure that the BU is modified data
                        e.editorOptions.onValueChanged = function (e) {
                            onValueChanged.call(this, e);
                            debugger;
                            //if (e.value == 1 || e.value == 3) {
                            //    BU_Item = 1;
                            //}
                            //else
                            //    BU_Item = 2;
                            $.ajax({

                                type: "post",
                                url: "/BudgetingRequest/GetReviewer_VKMSPOC",
                                data: { BU: e.value },
                                datatype: "json",
                                traditional: true,
                                success: function (data) {

                                    reviewer_2 = data;

                                }
                            })


                            //$.ajax({
                            //    type: "post",
                            //    url: "/BudgetingRequest/GetMasterList",
                            //    data: { BU: e.value },
                            //    datatype: "json",
                            //    traditional: true,
                            //    success: function (data) {
                            //        debugger;
                            //        if (data > 0)
                            //            Item_list_New = data;

                            //    }
                            //})
                            // Emulating a web service call
                            window.setTimeout(function () {
                                component.cellValue(rowIndex, "Reviewer_2", reviewer_2);
                            }, 1000);
                        }
                    }


                    if (e.dataField === "DEPT") {

                        var onValueChanged = e.editorOptions.onValueChanged;//event for BU; makes sure that the BU is modified data
                        e.editorOptions.onValueChanged = function (e) {
                            onValueChanged.call(this, e);
                            debugger;

                            $.ajax({

                                type: "post",
                                url: "/BudgetingRequest/GetReviewer_HoE",
                                data: { DEPT: e.value },
                                datatype: "json",
                                traditional: true,
                                success: function (data) {
                                    debugger;
                                    reviewer_1 = data.data;

                                }
                            })


                            // Emulating a web service call
                            window.setTimeout(function () {
                                debugger;
                                component.cellValue(rowIndex, "Reviewer_1", reviewer_1);
                            }, 1000);
                        }
                    }



                    if (e.dataField === "Item_Name") {

                        var onValueChanged = e.editorOptions.onValueChanged;//event for itemname; makes sure that the itemname is modified data
                        e.editorOptions.onValueChanged = function (e) {
                            onValueChanged.call(this, e);
                            $.ajax({
                                type: "post",
                                url: "/BudgetingRequest/GetUnitPrice",
                                data: { ItemName: e.value },
                                datatype: "json",
                                traditional: true,
                                success: function (data) {

                                    if (data > 0)
                                        unitprice = data;

                                }
                            })

                            $.ajax({

                                type: "post",
                                url: "/BudgetingRequest/GetCategory",
                                data: { ItemName: e.value },
                                datatype: "json",
                                traditional: true,
                                success: function (data) {
                                    category = data;

                                }
                            })

                            $.ajax({

                                type: "post",
                                url: "/BudgetingRequest/GetCostElement",
                                data: { ItemName: e.value },
                                datatype: "json",
                                traditional: true,
                                success: function (data) {
                                    costelement = data;

                                }
                            })

                            window.setTimeout(function () {

                                component.cellValue(rowIndex, "Unit_Price", unitprice);
                                component.cellValue(rowIndex, "Category", category);
                                component.cellValue(rowIndex, "Cost_Element", costelement);

                            },
                                1000);


                        }

                    }


                },

                columns: [

                    {

                        alignment: "center",
                        columns: [
                            {
                                dataField: "BU",
                                width: 50,
                                validationRules: [{ type: "required" }],

                                setCellValue: function (rowData, value) {
                                    debugger;
                                    rowData.BU = value;

                                },
                                lookup: {
                                    dataSource: function (options) {
                                        debugger;
                                        return {

                                            store: BU_list,
                                        };

                                    },
                                    valueExpr: "ID",
                                    displayExpr: "BU"
                                },

                            },



                            {
                                dataField: "OEM",
                                validationRules: [{ type: "required" }],
                                width: 60,
                                lookup: {
                                    dataSource: OEM_list,
                                    valueExpr: "ID",
                                    displayExpr: "OEM"
                                },


                            },
                            {
                                dataField: "DEPT",
                                caption: "Dept",
                                validationRules: [{ type: "required" }],
                                setCellValue: function (rowData, value) {
                                    debugger;
                                    rowData.DEPT = value;
                                    rowData.Group = null;

                                },
                                width: 100,
                                lookup: {
                                    dataSource: function (options) {
                                        debugger;
                                        return {

                                            store: DEPT_list,
                                            filter: options.data ? ["Outdated", "=", false] : null


                                        };
                                    },

                                    valueExpr: "ID",
                                    displayExpr: "DEPT"

                                },



                            },
                            {
                                dataField: "Group",
                                width: 100,
                                validationRules: [{ type: "required" }],
                                lookup: {
                                    dataSource: function (options) {

                                        return {

                                            store: Group_list,

                                            filter: options.data ? ["Dept", "=", options.data.DEPT] : null
                                        };

                                    },
                                    valueExpr: "ID",
                                    displayExpr: "Group"
                                },


                            },


                            {
                                dataField: "Item_Name",
                                width: 250,
                                validationRules: [{ type: "required" }],
                                //CAS 1: testing for separate masterlist for bus
                                //lookup: {
                                //    dataSource: function (options) {
                                //        debugger;
                                //        if (BU_Item == 1) {
                                //            debugger;
                                //            return {



                                //                store: Item_list_New /*DEPT_list*/,

                                //            };
                                //            debugger;
                                //        }
                                //        else {
                                //            debugger;
                                //            return {


                                //                store: Item_list /*Group_list*/,

                                //            };
                                //            debugger;
                                //        }


                                //    },
                                //    valueExpr: "S_No", /*"ID",*/
                                //    displayExpr: "Item_Name" /*"DEPT"*/
                                //},

                                //CAS 2: testing for same masterlist for bus
                                lookup: {
                                    dataSource: function (options) {

                                        return {

                                            store: /*Item_list_bkp*/ /*Item_list_New*/Item_list,

                                            filter: options.data ? [["BU", "=", options.data.BU], 'and', ["Deleted", "=", false]] : null
                                        }


                                    },
                                    valueExpr: "S_No",
                                    displayExpr: "Item_Name"
                                },


                                calculateSortValue: function (data) {
                                    debugger;
                                    const value = this.calculateCellValue(data);
                                    return this.lookup.calculateCellValue(value);
                                },


                            },
                            {
                                dataField: "Category",
                                caption: "Category",
                                validationRules: [{ type: "required" }],

                                lookup: {
                                    dataSource: Category_list,
                                    valueExpr: "ID",
                                    displayExpr: "Category"
                                },
                                allowEditing: false,
                                // visible: false

                            },
                            {
                                dataField: "Cost_Element",
                                lookup: {
                                    dataSource: CostElement_list,
                                    valueExpr: "ID",
                                    displayExpr: "CostElement"
                                },
                                allowEditing: false,
                                //visible: false


                            },

                            {
                                dataField: "Required_Quantity",
                                caption: "Required Quantity",
                                width: 50,
                                validationRules: [
                                    { type: "required" },
                                    {
                                        type: "range",
                                        message: "Please enter valid count > 0",
                                        min: 0,
                                        max: 214783647
                                    }],
                                dataType: "number",
                                setCellValue: function (rowData, value) {

                                    rowData.Required_Quantity = value;

                                }
                            },
                            {
                                dataField: "Reviewed_Quantity",
                                caption: "Reviewed Quantity",
                                width: 50,
                                dataType: "number"
                            },
                            {
                                dataField: "Ordered_Quantity",
                                width: 50,
                            },
                            {
                                dataField: "Unit_Price",

                                visible: false


                            },
                            {
                                dataField: "Total_Price",
                                width: 80,
                                //calculateCellValue: function (rowData) {

                                //    if (rowData.Required_Quantity > 0 && rowData.Unit_Price > 0) {
                                //        return rowData.Unit_Price * rowData.Required_Quantity;
                                //    }
                                //    else
                                //        return 0.0;
                                //},

                                dataType: "number",
                                format: { type: "currency", precision: 2 },
                                valueFormat: "#0.00",
                                allowEditing: false
                            },
                            //Reviewed_Cost
                            {
                                dataField: "Reviewed_Cost",
                                width: 80,

                                dataType: "number",
                                format: { type: "currency", precision: 2 },
                                valueFormat: "#0.00",
                                allowEditing: false
                            },
                            {
                                dataField: "OrderPrice",
                                width: 80,
                                format: { type: "currency", precision: 2 },
                                valueFormat: "#0.00"


                            },


                            {
                                dataField: "Requestor",
                                allowEditing: false
                                //visible: false
                            },
                            {
                                dataField: "Reviewer_1",
                                allowEditing: false
                                //visible: false
                            },
                            {
                                dataField: "Reviewer_2",
                                allowEditing: false
                                //visible: false
                            },
                            {
                                dataField: "Comments",
                                width: 80

                            },
                            {
                                dataField: "RequestDate",
                                allowEditing: false,
                                width: 80


                            },

                            {
                                dataField: "LeadTime",
                                width: 50,
                                caption: "LeadTime (in days)",
                                visible: false,
                                calculateCellValue: function (rowData) {
                                    //update the LeadTime
                                    if (rowData.Item_Name == undefined || rowData.Item_Name == null) {

                                        leadtime1 = "";
                                    }

                                    else {

                                        $.ajax({

                                            type: "GET",
                                            url: "/BudgetingRequest/GetLeadTime",
                                            data: { 'ItemName': rowData.Item_Name },
                                            datatype: "json",
                                            async: false,
                                            success: success_getleadtime,

                                        });

                                        function success_getleadtime(response) {

                                            if (response == 0)
                                                leadtime1 = "";
                                            else
                                                leadtime1 = response;

                                        }

                                    }

                                    return leadtime1;
                                }

                            },
                            {
                                dataField: "Request_Status"

                            }



                        ]
                    }]
            });


            $.notify('Item Detailed View is loaded successfully !', {
                globalPosition: "top center",
                className: "success"
            });

            $("#buttonClearFilters").dxButton({
                text: 'Clear Filters',
                onClick: function () {
                    $("#RequestTable").dxDataGrid("clearFilter");
                }
            });

        </script>





    }

</head>
<body>
    <header>

        <div>
            <table align="center">
                <tr>
                    <td>
                        <img class="card-img mx-auto d-block" src="~/Content/images/requ.png" style="width:50px;height:55px;" alt="VKM Request" />
                    </td>
                    <td><h2 style="text-align:center;margin-top:10px;"><b> Item Detailed View - @Model.Item_Name </b></h2></td>
                </tr>
            </table>
        </div>

    </header>



    <section>




        @*<div style="float:right;height:30px;margin:3px">
            <input type="image" src="/Content/images/Excel_Icon.png" alt="ExportToExcel" width="37" height="35" id="export" title="Export" class="btn btn-outline-secondary btn-sm" style="margin:5px;" />
        </div>*@

        <div>
            <a id="buttonClearFilters" class="btn btn-outline-secondary btn-sm" style="margin:5px; margin-top:5px; width: 130px; height: 35px; "><i class="fa fa-check"></i> Clear Filters</a>

        </div>

        <div align="center" style="font-size: 30px;">
            <i id="load"></i>
            <span class="spinner-text" id="loadpanel" style="font-size:20px;display:none">Please, wait...Fetching the requested Item Details</span>

        </div>

        <table id="RequestTable" class="table table-bordered display compact nowrap cell-border" style="width: 100%;">
        </table>



    </section>

</body>

</html>

