
@{
    ViewBag.Title = "ConfigureRFOMail";
}

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Configure RFO Mail</title>
    <style>
        .dx-header-row > td[role="columnheader"] > div.dx-datagrid-text-content {
            font-size: 17px;
            font-weight: bold;
        }

        .dx-datagrid-headers .dx-header-row {
            background-color: antiquewhite;
        }

        .dx-header-row {
            color: black;
        }

        .dx-datagrid-headers.dx-state-disabled:after {
            position: absolute;
            content: '';
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }

        .dx-datagrid-headers {
            white-space: normal;
        }

        .dx-datagrid-nowrap.dx-datagrid-headers .dx-header-row > td > .dx-datagrid-text-content {
            white-space: normal;
        }

        a {
            margin-left: 5px;
        }
    </style>
</head>
<script type="text/javascript">
    var RFOApprover_list;
    var lookup_data;
    var spoton_emp_list;
    var NTID;
    var emp_name;
    var Section_List;
    var filtered_yr = (new Date()).getFullYear();
    $(document).ready(function () {
        debugger;

        $.ajax({

            type: "GET",
            url: "/BudgetingVKM/RFOApprover",
            async: false,
            //data: { 'year': filtered_yr },
            success: function (data) {
                debugger;
                //lookup_data = data;
                //RFOApprover_list = lookup_data.RFOApprover_List;
                RFOApprover_list = data;
            },
            error: function (jqXHR, exception) {
                debugger;
                $.notify("Error in loading the data! ", {
                    globalPosition: "top center",
                    className: "warn"
                })
            }
        })

        $.ajax({

            type: "GET",
            url: "/BudgetingVKM/SectionList",
            async: false,
            //data: { 'year': filtered_yr },
            success: function (data) {
                debugger;
                //lookup_data = data;
                //RFOApprover_list = lookup_data.RFOApprover_List;
                Section_List = data;
            },
            error: function (jqXHR, exception) {
                debugger;
                $.notify("Error in loading the data! ", {
                    globalPosition: "top center",
                    className: "warn"
                })
            }
        })

        $.ajax({

            type: "Get",
            async: false,
            url: "/BudgetingVKM/Lookup_SpotOnList",
            success: function (data) {
                debugger;
                //lookup_data = data;
                //RFOApprover_list = lookup_data.RFOApprover_List;
                spoton_emp_list = data.EmpDetails;
            },
            error: function (jqXHR, exception) {
                debugger;
                $.notify("Error in loading the data! ", {
                    globalPosition: "top center",
                    className: "warn"
                })
            }
        })

        $.ajax({

            type: "GET",
            url: "/BudgetingVKM/LookupVKM",
            async: false,
            data: { 'year': filtered_yr },
            success: onsuccess_lookupdata,
            error: onerror_lookupdata
        })


        function onsuccess_lookupdata(response) {
            //debugger;
            lookup_data = response.data;
            DEPT_list = lookup_data.DEPT_List;
            Group_list = lookup_data.Groups_test;//Groups_oldList;

            $.ajax({

                type: "POST",
                contentType: "application/json; charset=utf-8",
                url: "../BudgetingOrder/Lookup_ItemList",
                async: false,
                //data: { 'year': filtered_yr },
                data: JSON.stringify({ year: filtered_yr }),
                dataType: 'json',
                success: function (data) {
                    //debugger;
                    Item_list = data;
                },
                error: function (jqXHR, exception) {
                    //debugger;
                }

            })

        }

        function onerror_lookupdata(response) {
            if (response.errormsg) {
                $.notify(response.errormsg, {
                    globalPosition: "top center",
                    className: "error",
                    autoHideDelay: 15000,
                });
            }
            else {
                //alert("Error in fetching lookup");

            }

        }


        GetRFOMailDetails();

        GetCTGDetails();

        GetOldvsNewDeptMapping();
        GetOldvsNewGroupMapping();
    });
    debugger;

    function GetRFOMailDetails() {
        debugger;

        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: "../BudgetingVKM/GetRFOMailDetails",
            //data: JSON.stringify({ startdate: sdate, enddate: edate }),
            dataType: 'json',
            //traditional: true,
            success: function (data) {
                debugger;

                if (data.data.length > 0) {

                    debugger;

                    LoadDatagrid(data.data);
                    //$.notify('Data Loaded Successfully', {
                    //    globalPosition: "top center",
                    //    className: "success"
                    //});
                }

                else {
                    LoadDatagrid(data.data);
                    $.notify('No Data', {
                        globalPosition: "top center",
                        className: "warn"
                    });
                }


            },
            error: function (jqXHR, exception) {
                debugger;
                $.notify("Error in loading the data! ", {
                    globalPosition: "top center",
                    className: "warn"
                })
            }
        });
    }

    function GetCTGDetails() {
        debugger;

        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: "../BudgetingVKM/GetCTGDetails",
            //data: JSON.stringify({ startdate: sdate, enddate: edate }),
            dataType: 'json',
            //traditional: true,
            success: function (data) {
                debugger;

                if (data.data.length > 0) {

                    debugger;

                    LoadCTGDatagrid(data.data);
                    //$.notify('Data Loaded Successfully', {
                    //    globalPosition: "top center",
                    //    className: "success"
                    //});
                }

                else {
                    LoadCTGDatagrid(data.data);
                    $.notify('No Data', {
                        globalPosition: "top center",
                        className: "warn"
                    });
                }


            },
            error: function (jqXHR, exception) {
                debugger;
                $.notify("Error in loading the data! ", {
                    globalPosition: "top center",
                    className: "warn"
                })
            }
        });
    }

    function LoadCTGDatagrid(data) {
        $('#CTGDetails').dxDataGrid({
            dataSource: data,
            loadPanel: {
                enabled: true
            },
            valueChangeEvent: 'keyup',
            hoverStateEnabled: {
                enabled: true
            },
            //columnMinWidth: 50,
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            remoteOperations: { groupPaging: true },
            searchPanel: {
                visible: true,
                highlightCaseSensitive: true,
            },
            paging: {
                pageSize: 10,
            },
            groupPanel: {
                visible: true,
                placeholder: "Group By Panel",
            },
            grouping: {
                autoExpandAll: true,
            },
            //repaintChangesOnly: true,
            columnFixing: {
                enabled: true
            },
            columnChooser: {
                enabled: true
            },
            export: {
                enabled: true,

            },
            onToolbarPreparing: function (e) {
                dataGrid = e.component;

                e.toolbarOptions.items[0].showText = 'always';


            },
            editing: {

                mode: "row",
                allowAdding: true,
                allowUpdating: true,
                //allowDeleting: !data.IsDelivered,
                useIcons: true,
            },

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns
            columnAutoHeight: true,
            showScrollbar: 'always',
            remoteOperations: false,
            showColonAfterLabel: true,
            showValidationSummary: true,
            //validationMessageMode: 'always',
            //validationMessagePosition: 'right',
            headerFilter: {
                visible: true,
                applyFilter: "auto",
                allowSearching: true
            },
            allowColumnReordering: true,
            rowAlternationEnabled: true,
            showBorders: true,
            alignment: "center",
            columns: [
                {
                    type: "buttons",
                    width: 65,
                    alignment: "left",
                    fixed: true,
                    fixedPosition: "left",
                    buttons: [
                        "edit",
                    ]
                },
                {
                    columns: [
                        {
                            caption: "CTG Details",
                            alignment: "center",
                            columns: [

                                {
                                    caption: "ID",
                                    dataField: 'ID',
                                    allowEditing: false,
                                    visible: false,
                                },

                                {
                                    caption: "Section",
                                    dataField: 'Section',
                                    width: 400,
                                    lookup: {
                                        dataSource: function (options) {
                                            debugger;
                                            return {
                                                store: Section_List,
                                            };
                                        },
                                        valueExpr: "Section",
                                        displayExpr: "Section"
                                    },
                                    //allowEditing: false,
                                },
                                {
                                    caption: 'Approved ($)',
                                    dataField: 'Approved',
                                    width: 300,
                                    dataType: "number",
                                    format: { type: "currency", precision: 2 },
                                    allowEditing: false,
                                },
                                {
                                    caption: 'Utilized ($)',
                                    dataField: 'Utilized',
                                    width: 300,
                                    dataType: "number",
                                    format: { type: "currency", precision: 2 },
                                    allowEditing: false,
                                },
                                {
                                    caption: 'Balance ($)',
                                    dataField: 'Balance',
                                    width: 300,
                                    dataType: "number",
                                    format: { type: "currency", precision: 2 },
                                    allowEditing: false,
                                },
                                {
                                    caption: 'Amount ($)',
                                    dataField: 'Amount',
                                    width: 300,
                                    dataType: "number",
                                    format: { type: "currency", precision: 2 },
                                },
                            ],
                        },
                    ],
                },
                ],

            width: "96vw", //needed to allow horizontal scroll
            height: "70vh",

            onEditorPreparing: function (e) {
                //debugger;
                var component = e.component,
                    rowIndex = e.row && e.row.rowIndex;//new elements are positioned on the rowindex

                if (e.dataField === "Section") {
                    
                    debugger;
                    var onValueChanged = e.editorOptions.onValueChanged;//event for itemname; makes sure that the itemname is modified data
                    e.editorName = "dxAutocomplete";
                    //e.editorName.cellInfo.value = e.value;
                    //e.editorOptions.placeholder = 'Select Emp Name';
                    e.editorOptions.onValueChanged = function (e) {
                        //debugger;
                        onValueChanged.call(this, e);
                        debugger;



                    }



                }

                


            },

            onRowInserting: function (e) {
                debugger;
                Selected = [];
                Selected.push(e.data);
                SaveCTGDetails(Selected);
            },
            onRowUpdating(e) {
                debugger;
                Selected = [];
                Selected.push({
                    ID: e.key.ID,
                    Section: e.key.Section,
                    Amount: e.newData.Amount,
                });
                SaveCTGDetails(Selected);
            },
        });
    }

    function LoadDatagrid(data) {
        $('#RFOMailDetails').dxDataGrid({
            dataSource: data,
            loadPanel: {
                enabled: true
            },
            valueChangeEvent: 'keyup',
            hoverStateEnabled: {
                enabled: true
            },
            columnMinWidth: 50,
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            remoteOperations: { groupPaging: true },
            searchPanel: {
                visible: true,
                highlightCaseSensitive: true,
            },
            paging: {
                pageSize: 10,
            },
            groupPanel: {
                visible: true,
                placeholder: "Group By Panel",
            },
            grouping: {
                autoExpandAll: true,
            },
            //repaintChangesOnly: true,
            columnFixing: {
                enabled: true
            },
            columnChooser: {
                enabled: true
            },
            export: {
                enabled: true,

            },
            onToolbarPreparing: function (e) {
                dataGrid = e.component;

                e.toolbarOptions.items[0].showText = 'always';


            },
            editing: {

                mode: "row",
                allowAdding: true,
                allowUpdating: true,
                //allowDeleting: !data.IsDelivered,
                useIcons: true,
            },

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns
            columnAutoHeight: true,
            showScrollbar: 'always',
            remoteOperations: false,
            showColonAfterLabel: true,
            showValidationSummary: true,
            //validationMessageMode: 'always',
            //validationMessagePosition: 'right',
            headerFilter: {
                visible: true,
                applyFilter: "auto",
                allowSearching: true
            },
            allowColumnReordering: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columns: [
                {
                    type: "buttons",
                    width: 65,
                    alignment: "left",
                    fixed: true,
                    fixedPosition: "left",
                    buttons: [
                        "edit",
                    ]
                },
                {
                    columns: [
                        {
                            caption: "RFO Approver Mail Configuration",
                            alignment: "center",
                            columns: [

                                {
                                    caption: "ID",
                                    dataField: 'ID',
                                    allowEditing: false,
                                    visible: false,
                                },
                                {
                                    caption: "Section",
                                    dataField: 'Section',
                                    editorType: 'dxSelectBox',
                                    editorOptions:
                                    {
                                        items: RFOApprover_list,
                                        displayExpr: 'Section_Dept_Grp',
                                        valueExpr: 'Section_Dept_Grp',
                                        searchEnabled: true,
                                    },
                                    validationRules: [{
                                        type: "required"
                                    }],
                                    //allowEditing: false,
                                },
                                {
                                    caption: "NTID",
                                    dataField: 'NTID',
                                    lookup: {
                                        dataSource: function (options) {
                                            debugger;
                                            return {
                                                store: spoton_emp_list,
                                            };
                                        },
                                        valueExpr: "NTID",
                                        displayExpr: "NTID"
                                    },
                                    //allowEditing: false,
                                },
                                {
                                    caption: "Employee Name",
                                    dataField: 'EmployeeName',
                                    lookup: {
                                        dataSource: function (options) {
                                            debugger;
                                            return {
                                                store: spoton_emp_list,
                                            };
                                        },
                                        valueExpr: "EmployeeName",
                                        displayExpr: "EmployeeName"
                                    },
                                    //allowEditing: false,
                                },

                                {
                                    caption: "Paused",
                                    dataField: 'IsPaused',
                                    dataType: "boolean",
                                    allowEditing: true,
                                },

                            ],
                        },
                    ],
                },
            ],
            width: "96vw", //needed to allow horizontal scroll
            height: "70vh",

            onEditorPreparing: function (e) {
                //debugger;
                var component = e.component,
                    rowIndex = e.row && e.row.rowIndex;//new elements are positioned on the rowindex

                if (e.dataField === "NTID") {
                    e.editorOptions.onFocusOut = function (x) {
                        $.ajax({
                            type: "post",
                            url: "/BudgetingVKM/GetEmployeeName",
                            data: { Ntid: e.row.data.NTID },
                            datatype: "json",
                            traditional: true,
                            success: function (data) {
                                debugger;
                                //var res;
                                // res = JSON.parse(data.data.Data.Content);
                                if (data.success == true) {
                                    NTID = data.NTID;
                                    emp_name = data.EmployeeName;
                                  
                                    component.cellValue(rowIndex, "NTID", NTID);
                                    component.cellValue(rowIndex, "EmployeeName", emp_name);
                                    
                                }
                                else {
                                    $.notify(data.msg, {
                                        globalPosition: "top center",
                                        className: "error",
                                        autoHideDelay: 20000
                                    })
                                }
                            }
                        });
                    }
                    debugger;
                    var onValueChanged = e.editorOptions.onValueChanged;//event for itemname; makes sure that the itemname is modified data
                    e.editorName = "dxAutocomplete";
                    //e.editorName.cellInfo.value = e.value;
                    //e.editorOptions.placeholder = 'Select Emp Name';
                    e.editorOptions.onValueChanged = function (e) {
                        //debugger;
                        onValueChanged.call(this, e);
                        debugger;



                    }



                }

                if (e.dataField === "EmployeeName") {
                    e.editorOptions.onFocusOut = function (x) {
                        $.ajax({
                            type: "post",
                            url: "/BudgetingVKM/GetNTID",
                            data: { EmpName: e.row.data.EmployeeName },
                            datatype: "json",
                            traditional: true,
                            success: function (data) {
                                debugger;
                                //var res;
                                // res = JSON.parse(data.data.Data.Content);
                                if (data.success == true) {
                                    NTID = data.NTID;
                                    emp_name = data.EmployeeName;
                                    
                                    component.cellValue(rowIndex, "NTID", NTID);
                                    component.cellValue(rowIndex, "EmployeeName", emp_name);
                                    
                                }
                                else {
                                    $.notify(data.msg, {
                                        globalPosition: "top center",
                                        className: "error",
                                        autoHideDelay: 20000
                                    })
                                }
                            }
                        });
                    }
                    debugger;
                    var onValueChanged = e.editorOptions.onValueChanged;//event for itemname; makes sure that the itemname is modified data
                    e.editorName = "dxAutocomplete";
                    //e.editorName.cellInfo.value = e.value;
                    //e.editorOptions.placeholder = 'Select Emp Name';
                    e.editorOptions.onValueChanged = function (e) {
                        //debugger;
                        onValueChanged.call(this, e);
                        debugger;



                    }



                }

                
            },

            onRowInserting: function (e) {
                debugger;
                Selected = [];
                Selected.push(e.data);
                SaveRFOMail(Selected);
            },
            onRowUpdating(e) {
                debugger;
                Selected = [];
                Selected.push({
                    ID: e.key.ID,
                    Section: e.key.Section,
                    EmployeeName: e.key.EmployeeName,
                    NTID: e.key.NTID,
                    IsPaused: e.newData.IsPaused,
                });
                SaveRFOMail(Selected);
            },
        });
    }

    function SaveRFOMail(id1) {
        debugger;
        $.ajax({
            type: "POST",
            //contentType: "application/json; charset=utf-8",
            url: "/BudgetingVKM/SaveRFOMail",
            data: { 'rfo': id1[0] },
            success: function (data) {
                debugger;
                if (data.success) {
                    $.notify("Saved/Updated successfully", {
                        globalPosition: "top center",
                        className: "success"
                    });
                }
                else {
                    $.notify("Unable to Save/Update! ", {
                        globalPosition: "top center",
                        className: "warn"
                    });
                }
                GetRFOMailDetails();

            },
            error: function (jqXHR, exception) {
                debugger;
                GetRFOMailDetails();
                $.notify("Unable to Save/Update! ", {
                    globalPosition: "top center",
                    className: "warn"
                });
            },
        });
    }

    function SaveCTGDetails(id1) {
        debugger;
        $.ajax({
            type: "POST",
            //contentType: "application/json; charset=utf-8",
            url: "/BudgetingVKM/SaveCTGDetails",
            data: { 'ctg': id1[0] },
            success: function (data) {
                debugger;
                if (data.success) {
                    $.notify("Saved/Updated successfully", {
                        globalPosition: "top center",
                        className: "success"
                    });
                }
                else {
                    $.notify("Unable to Save/Update! ", {
                        globalPosition: "top center",
                        className: "warn"
                    });
                }
                GetCTGDetails();

            },
            error: function (jqXHR, exception) {
                debugger;
                GetCTGDetails();
                $.notify("Unable to Save/Update! ", {
                    globalPosition: "top center",
                    className: "warn"
                });
            },
        });
    }

    function GetOldvsNewDeptMapping() {
        //**********DEPT MAPPING DETAILS************
        //Old vs New Dept list where in the Lab Team can change the dept to latest for the apprvd list directly 

        $.ajax({
            type: "GET",
            url: encodeURI("../BudgetingVKM/GetData_DeptDetails"),
            success: OnSuccess_GetData_DeptDetails,
            error: OnError_GetData_DeptDetails
        });
        //debugger;


        function OnSuccess_GetData_DeptDetails(response) {
           ////debugger;
            var objdata = (response.data);

            dataGridLEP_DeptDetails = $("#RequestTable_DeptDetails").dxDataGrid({

                dataSource: objdata,
                editing: {
                    mode: "row",
                    allowUpdating: true,
                    useIcons: true
                },

                allowColumnReordering: true,
                allowColumnResizing: true,
                columnChooser: {
                    enabled: true
                },
                filterRow: {
                    visible: true

                },
                showBorders: true,
                headerFilter: {
                    visible: true,
                    applyFilter: "auto"
                },
                selection: {
                    applyFilter: "auto"
                },
                loadPanel: {
                    enabled: true
                },
                paging: {
                    pageSize: 15
                },
                searchPanel: {
                    visible: true,
                    width: 240,
                    placeholder: "Search..."
                },


                columns: [
                    {
                        type: "buttons",
                        width: 90,
                        alignment: "left",
                        buttons: ["edit", "delete"
                            //{
                            //    hint: "Edit Dept",
                            //    icon: "fa fa-edit",

                            //    onClick: function (e) {
                            //        prev_orderingdept = e.row.data.OrderingDept;
                            //        e.component.refresh(true);
                            //        e.event.preventDefault();
                            //    }
                            //},"delete"
                        ]
                    },
                    {

                        alignment: "center",
                        columns: [
                            {
                                caption: "DEPARTMENT DETAILS",
                                alignment: "center",
                                columns: [
                                    {
                                        dataField: "PlanningDept",
                                        validationRules: [{ type: "required" }],
                                        setCellValue: function (rowData, value) {
                                           ////debugger;
                                            rowData.PlanningDEPT = value;
                                        },

                                        lookup: {
                                            dataSource: function (options) {
                                               ////debugger;
                                                return {

                                                    store: DEPT_list,
                                                    filter: options.data ? ["Outdated", "=", true] : null


                                                };
                                            }, 

                                            valueExpr: "ID",
                                            displayExpr: "DEPT"

                                        },
                                        allowEditing: false


                                    },
                                    {
                                        dataField: "OrderingDept",
                                        validationRules: [{ type: "required" }],
                                        lookup: {
                                            dataSource: function (options) {
                                               ////debugger;
                                                return {

                                                    store: DEPT_list,
                                                    filter: options.data ? ["Outdated", "=", false] : null

                                                };
                                            },

                                            valueExpr: "ID",
                                            displayExpr: "DEPT"

                                        },
                                        allowEditing: true


                                    },

                                    //{
                                    //    dataField: "Ordering Stage Department",
                                    //    validationRules: [{ type: "required" }],
                                    //    setCellValue: function (rowData, value) {
                                    //       ////debugger;
                                    //        rowData.Department = value;
                                    //        rowData.Group = null;

                                    //    },

                                    //    lookup: {
                                    //        dataSource: function (options) {
                                    //           ////debugger;
                                    //            return {

                                    //                store: DEPT_list
                                    //            };
                                    //        },

                                    //        valueExpr: "ID",
                                    //        displayExpr: "DEPT"

                                    //    },
                                    //    allowEditing: false


                                    //},


                                    //{
                                    //    dataField: "Group",

                                    //    validationRules: [{ type: "required" }],

                                    //    setCellValue: function (rowData, value) {
                                    //       ////debugger;

                                    //        rowData.Group = value;

                                    //    },
                                    //    lookup: {
                                    //        dataSource: function (options) {
                                    //           ////debugger;
                                    //            return {

                                    //                store: Group_list,

                                    //                filter: options.data ? ["Dept", "=", options.data.Department] : null
                                    //            };

                                    //        },
                                    //        valueExpr: "ID",
                                    //        displayExpr: "Group"
                                    //    },
                                    //    allowEditing: true

                                    //},

                                    {
                                        dataField: "Updated_By",
                                        allowEditing: false
                                    }
                                ],



                            }],
                    }],



                onRowUpdating: function (e) {
                    prev_orderingDept = e.oldData.OrderingDept;
                },
                onRowUpdated: function (e) {
                    $.notify(" The Details are being Updated...Please wait!", {
                        globalPosition: "top center",
                        className: "success"
                    })
                    Selected = [];

                    Selected.push(e.data);
                   debugger;
                    Update_DeptDetails(Selected);

                    //}

                }



            });
           ////debugger;



        }

        function OnError_GetData_DeptDetails(data) {
           ////debugger;
            $("#RequestTable_DeptDetails").prop('hidden', false);
            $.notify(data.message, {
                globalPosition: "top center",
                className: "warn"
            })
        }
    }

    function GetOldvsNewGroupMapping() {

//*************GROUP MAPPING DETAILS**********************
        debugger;
        $.ajax({
            type: "GET",
            url: encodeURI("../BudgetingVKM/GetData_GroupDetails"),
            success: OnSuccess_GetData_GroupDetails,
            error: OnError_GetData_GroupDetails
        });
        debugger;
        function OnSuccess_GetData_GroupDetails(response) {
            //debugger;
            var objdata = (response.data);

            dataGridLEP_GroupDetails = $("#RequestTable_GroupDetails").dxDataGrid({

                dataSource: objdata,
                editing: {
                    mode: "row",
                    allowUpdating: true,
                    useIcons: true
                },

                allowColumnReordering: true,
                allowColumnResizing: true,
                columnChooser: {
                    enabled: true
                },
                filterRow: {
                    visible: true

                },
                showBorders: true,
                headerFilter: {
                    visible: true,
                    applyFilter: "auto"
                },
                selection: {
                    applyFilter: "auto"
                },
                loadPanel: {
                    enabled: true
                },
                paging: {
                    pageSize: 15
                },
                searchPanel: {
                    visible: true,
                    width: 240,
                    placeholder: "Search..."
                },
                columns: [
                    {
                        type: "buttons",
                        width: 90,
                        alignment: "left",
                        buttons: ["edit", "delete"
                        ]
                    },
                    {

                        alignment: "center",
                        columns: [
                            {
                                caption: "GROUP DETAILS",
                                alignment: "center",
                                columns: [
                                    {
                                        dataField: "PlanningGroup",
                                        validationRules: [{ type: "required" }],
                                        setCellValue: function (rowData, value) {
                                            //debugger;
                                            rowData.PlanningGroup = value;
                                        },

                                        lookup: {
                                            dataSource: function (options) {
                                                //debugger;
                                                return {

                                                    store: Group_list,
                                                    //filter: options.data ? ["Outdated", "=", true] : null


                                                };
                                            },

                                            valueExpr: "ID",
                                            displayExpr: "Group"

                                        },
                                        allowEditing: false


                                    },
                                    {
                                        dataField: "OrderingGroup",
                                        validationRules: [{ type: "required" }],
                                        //setCellValue: function (rowData, value) {
                                        //   //debugger;
                                        //    rowData.Department = value;
                                        //    rowData.Group = null;

                                        //},

                                        lookup: {
                                            dataSource: function (options) {
                                                //debugger;
                                                return {

                                                    store: Group_list


                                                };
                                            },

                                            valueExpr: "ID",
                                            displayExpr: "Group"

                                        },
                                        allowEditing: true


                                    },

                                   
                                    {
                                        dataField: "Updated_By",
                                        allowEditing: false
                                    }
                                ],



                            }],
                    }],

                onRowUpdating: function (e) {
                    prev_orderingGroup = e.oldData.OrderingGroup;
                },
                onRowUpdated: function (e) {
                    $.notify(" The Details are being Updated...Please wait!", {
                        globalPosition: "top center",
                        className: "success"
                    })
                    Selected = [];

                    Selected.push(e.data);
                    //debugger;
                    Update_GroupDetails(Selected);

                }
            });
        }

        function OnError_GetData_GroupDetails(data) {
           //debugger;
            $("#RequestTable_GroupDetails").prop('hidden', false);
            $.notify(data.message, {
                globalPosition: "top center",
                className: "warn"
            })
        }
    }

    function Update_DeptDetails(id1) {
        debugger;
        $.ajax({
            type: "POST",
            url: encodeURI("../BudgetingVKM/AddorEdit_DeptDetails"),
            data: { 'req': id1[0] },
            sucess: function (data) {
                debugger;
                
                $.ajax({
                    type: "GET",
                    url: "/BudgetingVKM/GetData_DeptDetails",
                    datatype: "json",
                    async: true,
                    success: success_refresh_getdataDeptDetails,
                    error: error_refresh_getdataDeptDetails

                });

                function success_refresh_getdataDeptDetails(response) {

                    var getdata = response.data;
                    $("#RequestTable_DeptDetails").dxDataGrid({
                        dataSource: getdata
                    })


                }
                if (data.success) {
                    debugger;
                    $.notify(data.message, {
                        globalPosition: "top center",
                        className: "success"
                    })
                }
                else {
                    debugger;
                    $.notify(data.message, {
                        globalPosition: "top center",
                        className: "error"
                    })
                }
            },
            error: function (data) {
                debugger;
            }
        })
    }

    function Update_GroupDetails(id1) {
        //Onclick of edit - get the current ordering Group data store in a variable - pass this to update fn
        $.ajax({
            type: "POST",
            url: encodeURI("../BudgetingVKM/AddOrEdit_GroupDetails"),
            data: { 'req': id1[0] },
            success: function (data) {
                //debugger;
                //newobjdata = data.data;

                $.ajax({
                    type: "GET",
                    url: "/BudgetingVKM/GetData_GroupDetails",
                    datatype: "json",
                    async: true,
                    success: success_refresh_getdataGroupDetails,
                    error: error_refresh_getdataGroupDetails

                });

                function success_refresh_getdataGroupDetails(response) {

                    var getdata = response.data;
                    $("#RequestTable_GroupDetails").dxDataGrid({
                        dataSource: getdata
                    });
                }

                if (data.success) {
                    $.notify(response.message, {
                        globalPosition: "top center",
                        className: "success"
                    })
                }
                else {
                    $.notify(data.message, {
                        globalPosition: "top center",
                        className: "error"
                    })
                }
            }
        })
    }

    

</script>

<body>
    <div>
        <br />

        <div style="float:left;" id="RFOMailDetails"></div>
        <div style="float:left;" id="CTGDetails"></div>
        <div style="display:inline-block">
            <table id="RequestTable_DeptDetails" class="table table-bordered display compact nowrap cell-border" style="width: 48%; float:left; margin: 10px;">
            </table>

            <table id="RequestTable_GroupDetails" class="table table-bordered display compact nowrap cell-border" style="width: 48%; float: left; margin: 10px;">
            </table>

        </div>
    </div>
</body>