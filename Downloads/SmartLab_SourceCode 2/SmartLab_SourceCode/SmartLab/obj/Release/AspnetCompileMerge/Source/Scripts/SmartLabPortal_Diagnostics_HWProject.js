//Javascript file for HW/Project Details - mae9cob
var labname, locations, cards, equipments;
var counter;
var components;
var pc;
var diff_UTCandLocal;
debugger;
var sessions = $('.Sessions:checked').val();
var LC_Comparator_HIL1;
var LC_Comparator_HIL2;


var components = $('.Components:checked').val();
$('input[type=checkbox]').each(function () { this.checked = false; });
var HWflag = false;
var Projflag = false;


$.notify('Hello! Here you can find HW/Project info tables and Year on Year LC count charts', {
    globalPosition: "top center",
    className: "info",
    autoHideDelay: 25000
});



$(document).ready(function () {
    //Initially disable/hide the buttons
    debugger;
    //$.ajax({
    //    type: "POST",
    //    url: encodeURI("../Diagnostics/LCComparator"),
    //    //data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

    //    success: OnSuccess_d1_uniquedata,
    //    error: OnErrorCall_d1_uniquedata
    //});
    document.getElementById('togglediv_hwproj').style.display = 'none';
    debugger;
    document.getElementById('togglediv_yoy').style.display = 'none';
    document.getElementById('togglediv_lccomp').style.display = 'none';
    document.getElementById('togglediv_hilsnap').style.display = 'none';

    document.getElementById("triangle-up1").style.display = 'none';
    document.getElementById("triangle-up2").style.display = 'none';
    document.getElementById("triangle-up3").style.display = 'none';
    document.getElementById("triangle-up4").style.display = 'none';

    loadLabTypes();
    $("#selectSite").prop('disabled', true);
    $("#selectLabId").prop('disabled', true);
    $(".selectpicker").selectpicker('refresh');
    $("#selectLabId").html($("#selectLabId option").sort(function (a, b) {
        debugger;
        return a.text == b.text ? 0 : a.text < b.text ? -1 : 1
    }))

    //$(".selectpicker").selectpicker('refresh').empty()/*.append(output)*/.selectpicker('refresh').trigger('change');


    debugger;

    $("#gen").prop('disabled', true);
    $("#exportContainer").prop('hidden', true);
    $(".gridContainer_d1").prop('hidden', false);
    $(".gridContainer_d2").prop('hidden', false);
    $(".gridContainer_d2cmpnt").prop('hidden', false);
    $(".gridContainer_d3").prop('hidden', true);
    $(".gridContainer_d4").prop('hidden', true);
    $(".gridContainer_d5").prop('hidden', true);
    $(".gridContainer_d6").prop('hidden', true);
    $(".gridContainer_d7").prop('hidden', true);
    $(".gridContainer_d8").prop('hidden', true);
    $(".gridContainer_d9").prop('hidden', true);
    $(".gridContainer_d10").prop('hidden', true);
    $(".gridContainer_d11").prop('hidden', true);
    $(".gridContainer_d12").prop('hidden', true);
    $(".gridContainer_d13").prop('hidden', true);
    $(".gridContainer_d14").prop('hidden', true);
    $(".gridContainer_d15").prop('hidden', true);
    $(".gridContainer_d16").prop('hidden', true);
    $(".gridContainer_d17").prop('hidden', true);
    $(".gridContainer_d18").prop('hidden', true);
    $(".gridContainer_d19").prop('hidden', true);
    $(".gridContainer_d20").prop('hidden', true);
    $(".gridContainer_d21").prop('hidden', true);
    $(".gridContainer_d22").prop('hidden', true);
    $(".gridContainer_d23").prop('hidden', true);

    $(".gridContainer_d1_uniquedata").prop('hidden', false); $(".title_gridContainer_d1_uniquedata").prop('hidden', true); //spacing needed for user to do dropdown selections
    $(".gridContainer_d2_uniquedata").prop('hidden', false); $(".title_gridContainer_d2_uniquedata").prop('hidden', true);
    $(".gridContainer_d2cmpnt_uniquedata").prop('hidden', false);
    $(".gridContainer_d3_uniquedata").prop('hidden', true);
    $(".gridContainer_d4_uniquedata").prop('hidden', true);
    $(".gridContainer_d5_uniquedata").prop('hidden', true);
    $(".gridContainer_d6_uniquedata").prop('hidden', true);
    $(".gridContainer_d7_uniquedata").prop('hidden', true);
    $(".gridContainer_d8_uniquedata").prop('hidden', true);
    $(".gridContainer_d9_uniquedata").prop('hidden', true);
    $(".gridContainer_d10_uniquedata").prop('hidden', true);
    $(".gridContainer_d11_uniquedata").prop('hidden', true);
    $(".gridContainer_d12_uniquedata").prop('hidden', true);
    $(".gridContainer_d13_uniquedata").prop('hidden', true);
    $(".gridContainer_d14_uniquedata").prop('hidden', true);
    $(".gridContainer_d15_uniquedata").prop('hidden', true);
    $(".gridContainer_d16_uniquedata").prop('hidden', true);
    $(".gridContainer_d17_uniquedata").prop('hidden', true);
    $(".gridContainer_d18_uniquedata").prop('hidden', true);
    $(".gridContainer_d19_uniquedata").prop('hidden', true);
    $(".gridContainer_d20_uniquedata").prop('hidden', true);
    $(".gridContainer_d21_uniquedata").prop('hidden', true);
    $(".gridContainer_d22_uniquedata").prop('hidden', true);
    $(".gridContainer_d23_uniquedata").prop('hidden', true);
    $(".component_button").prop('hidden', true);




});
debugger;

function loadLabTypes() {
    debugger;
    $.ajax({
        type: "GET",
        contentType: "application/json; charset=utf-8",
        url: "../Diagnostics/GetLabTypes",
        dataType: 'json',
        success: function (data) {
            //debugger;
            //alert(data);
            for (var i = 0; i < data.data.length; i++) {
                debugger;

                $("#selectLabType").append(
                    $('<option/>', {
                        value: data.data[i].Value,
                        html: data.data[i].Text
                    }));

            }
            $(".selectpicker").selectpicker('refresh');
        }
    });
}


$('#StartTime').change(function () {
    validateTime();
    //debugger;
});

$('#EndTime').change(function () {
    validateTime();
});

$(".radioDiag").click(function () {
    debugger;
    var childClasses, group;

    // add class "selected" to a clicked button
    $(this).addClass("selected");

    // get the parent's id of button element 
    group = $(this).parent().attr('id');

    // store all element of selected group 
    childClasses = $("#" + group).children();

    // remove previous selected button when user select a new button in the same group button
    for (var i = 0; i < childClasses.length; i++) {
        if (this.textContent != childClasses[i].textContent) {
            $("#" + childClasses[i].id).removeClass("selected");
        }
    }

});

$('.Sessions').on('click', function () {
    // debugger;
    sessions = $('.Sessions:checked').val();

});
$('.Components').on('click', function () {
    debugger;
    components = $('.Components:checked').val();

    $.ajax({
        type: "POST",
        url: encodeURI("../Diagnostics/TABLE2_GetCmpntData_unique"),
        data: { 'pc': pc, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal, 'components_type': components },

        success: OnSuccess_d2_CMPNTuniquedata,
        error: OnErrorCall_d2_CMPNTuniquedata


    });

});
$('#chkHW').on('click', function () {

    if (this.checked) {
        HWflag = true;
    }
    else {
        HWflag = false;
    }

});
$('#chkProj').on('click', function () {

    if (this.checked) {
        Projflag = true;
    }
    else {
        Projflag = false;
    }

});


//var locations_chosen = [];
function fnfetchSiteChosen() {
    locations = $('#selectSite option:selected').toArray().map(item => item.text).join();
}

function fnCardChange() {
    debugger;
    cards = $('#Card_Filter').val();

}

function fnEquipmentChange() {
    debugger;
    equipments = $('#Equipment_Filter').val();
}


//Function to check the validity of user entered Dates

function validateTime() {
    //debugger;
    // regular expression to match required date format
    re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
    var StartTime = document.getElementById('StartTime').value;
    var EndTime = document.getElementById('EndTime').value;
    var _sTime = Date.parse(StartTime);
    var _eTime = Date.parse(EndTime);


    if (document.getElementById('StartTime').value == '' && document.getElementById('EndTime').value == '') {
        alert("Dates not selected ");
        document.getElementById('StartTime').focus();
        return false;
    }

    else if (document.getElementById('StartTime').value == '') {
        alert("Start Date not selected ");
        document.getElementById('StartTime').focus();
        return false;
    }

    else if (document.getElementById('EndTime').value == '') {
        alert("End Date not selected ");
        document.getElementById('EndTime').focus();
        return false;
    }

    else if (document.getElementById('StartTime').value != '' && !document.getElementById('StartTime').value.match(re)) {
        alert("Invalid date format: " + document.getElementById('StartTime').value);
        document.getElementById('StartTime').focus();
        return false;
    }

    else if (document.getElementById('EndTime').value != '' && !document.getElementById('EndTime').value.match(re)) {
        alert("Invalid time format: " + document.getElementById('EndTime').value);
        document.getElementById('EndTime').focus();
        return false;
    }

    else if (_sTime > _eTime) {
        alert("Inappropriate Selection of Dates");
        document.getElementById('StartTime').focus();
    }

    else
        return true;

}


var sTime;
var eTime;

//Function to validate the user inputs
function validatepage() {
    if ((document.getElementById('selectLabId').selectedIndex > -1) && validateTime()) {
        // debugger;
        sTime = StartTime.value;
        eTime = EndTime.value;
        $("#gen").prop('disabled', false);
        $("#exportContainer").prop('hidden', true);
        return true;
    }
    else {
        return false;
    }
}




// Add LabIDs chosen by user to labids_chosen array 
var labids_chosen = [];
//Onchange function of LabID
function fnLabIDChange(labidselect) {
    labids_chosen = [];

    for (var i = 0, len = labidselect.options.length; i < len; i++) {
        if (document.getElementById('selectLabId').selectedIndex != -1) {
            options = labidselect.options;
            opt = options[i];
            if (opt.selected) {
                //store the labids chosen by user from dropdown to process the relevant chart data
                labids_chosen.push(opt.value);
            }
        }
    }
    validatepage();
    //$(".selectpicker").selectpicker('refresh').empty()/*.append(output)*/.selectpicker('refresh').trigger('change');

}

function counter_function() {
    var hw_proj_counter = 0;
    if (HWflag == true)
        hw_proj_counter += 1;
    if (Projflag == true)
        hw_proj_counter += 1;
    debugger;
    if ((cards != undefined && cards != ' - ') && (equipments != undefined && equipments != ' - ')) {
        if (counter == (cards.length + equipments.length + hw_proj_counter)) {
            if (str != "Try Again") {

                $("#exportContainer").prop('hidden', false);

                var str = "Get LC info";
                var result = str.bold();
                genText.innerHTML = result;
                $("#genSpinner").removeClass("fa fa-spinner fa-spin");


                $.notify("Datagrids are successfully loaded!", {
                    globalPosition: "top center",
                    className: "success"
                });
            }
        }
    }
    else if (cards != undefined && cards != ' - ' && (equipments == undefined || equipments == ' - ')) {
        if (counter == (cards.length + hw_proj_counter)) {
            if (str != "Try Again") {
                $("#exportContainer").prop('hidden', false);
                var str = "Get LC info";
                var result = str.bold();
                genText.innerHTML = result;
                $("#genSpinner").removeClass("fa fa-spinner fa-spin");


                $.notify("Datagrids are successfully loaded!", {
                    globalPosition: "top center",
                    className: "success"
                });
            }
        }
    }
    else if (equipments != undefined && equipments != ' - ' && (cards == undefined || cards == ' - ')) {
        if (counter == (equipments.length + hw_proj_counter)) {
            if (str != "Try Again") {
                $("#exportContainer").prop('hidden', false);
                var str = "Get LC info";
                var result = str.bold();
                genText.innerHTML = result;
                $("#genSpinner").removeClass("fa fa-spinner fa-spin");


                $.notify("Datagrids are successfully loaded!", {
                    globalPosition: "top center",
                    className: "success"
                });
            }
        }
    }
    else {
        if (counter == hw_proj_counter) {
            if (str != "Try Again") {
                $("#exportContainer").prop('hidden', false);
                var str = "Get LC info";
                var result = str.bold();
                genText.innerHTML = result;
                $("#genSpinner").removeClass("fa fa-spinner fa-spin");


                $.notify("Datagrids are successfully loaded!", {
                    globalPosition: "top center",
                    className: "success"
                });
            }
        }
    }

}

//Onclick of Get LC Info button
$("#gen").click(function () {
    //$(".selectpicker").selectpicker('refresh').empty()/*.append(output)*/.selectpicker('refresh').trigger('change');

    counter = 0;
    //Hide Datagrid region till the new data is processed and prepared
    debugger;
    $(".component_button").prop('hidden', true); $(".title_gridContainer_d1").prop('hidden', true);
    $("#exportContainer").prop('hidden', true); $(".title_gridContainer_d2").prop('hidden', true);
    $(".gridContainer_d1").prop('hidden', true); $(".title_gridContainer_d3").prop('hidden', true);
    $(".gridContainer_d2").prop('hidden', true);
    $(".gridContainer_d2cmpnt").prop('hidden', true);
    $(".gridContainer_d3").prop('hidden', true); $(".title_gridContainer_d4").prop('hidden', true);
    $(".gridContainer_d4").prop('hidden', true); $(".title_gridContainer_d5").prop('hidden', true);
    $(".gridContainer_d5").prop('hidden', true); $(".title_gridContainer_d6").prop('hidden', true);
    $(".gridContainer_d6").prop('hidden', true); $(".title_gridContainer_d7").prop('hidden', true);
    $(".gridContainer_d7").prop('hidden', true); $(".title_gridContainer_d8").prop('hidden', true);
    $(".gridContainer_d8").prop('hidden', true); $(".title_gridContainer_d9").prop('hidden', true);
    $(".gridContainer_d9").prop('hidden', true); $(".title_gridContainer_d10").prop('hidden', true);
    $(".gridContainer_d10").prop('hidden', true); $(".title_gridContainer_d11").prop('hidden', true);
    $(".gridContainer_d11").prop('hidden', true); $(".title_gridContainer_d12").prop('hidden', true);
    $(".gridContainer_d12").prop('hidden', true); $(".title_gridContainer_d13").prop('hidden', true);
    $(".gridContainer_d13").prop('hidden', true); $(".title_gridContainer_d14").prop('hidden', true);
    $(".gridContainer_d14").prop('hidden', true); $(".title_gridContainer_d15").prop('hidden', true);
    $(".gridContainer_d15").prop('hidden', true); $(".title_gridContainer_d16").prop('hidden', true);
    $(".gridContainer_d16").prop('hidden', true); $(".title_gridContainer_d17").prop('hidden', true);
    $(".gridContainer_d17").prop('hidden', true); $(".title_gridContainer_d18").prop('hidden', true);
    $(".gridContainer_d18").prop('hidden', true); $(".title_gridContainer_d19").prop('hidden', true);
    $(".gridContainer_d19").prop('hidden', true); $(".title_gridContainer_d20").prop('hidden', true);
    $(".gridContainer_d20").prop('hidden', true); $(".title_gridContainer_d21").prop('hidden', true);
    $(".gridContainer_d21").prop('hidden', true); $(".title_gridContainer_d22").prop('hidden', true);
    $(".gridContainer_d22").prop('hidden', true); $(".title_gridContainer_d23").prop('hidden', true);
    $(".gridContainer_d23").prop('hidden', true); $(".title_gridContainer_d2cmpnt").prop('hidden', true);

    $(".gridContainer_d24").prop('hidden', true); $(".title_gridContainer_d24").prop('hidden', true);
    $(".gridContainer_d25").prop('hidden', true); $(".title_gridContainer_d25").prop('hidden', true);
    $(".gridContainer_d26").prop('hidden', true); $(".title_gridContainer_d26").prop('hidden', true);
    $(".gridContainer_d27").prop('hidden', true); $(".title_gridContainer_d27").prop('hidden', true);
    $(".gridContainer_d28").prop('hidden', true); $(".title_gridContainer_d28").prop('hidden', true);

    $(".gridContainer_d1_uniquedata").prop('hidden', true); $(".title_gridContainer_d1_uniquedata").prop('hidden', true); //since the container gap was left for dropdown selections, hide it after selections done
    $(".gridContainer_d2_uniquedata").prop('hidden', true); $(".title_gridContainer_d2_uniquedata").prop('hidden', true);
    $(".gridContainer_d2cmpnt_uniquedata").prop('hidden', true); $(".title_gridContainer_d3_uniquedata").prop('hidden', true);
    $(".gridContainer_d3_uniquedata").prop('hidden', true); $(".title_gridContainer_d4_uniquedata").prop('hidden', true);
    $(".gridContainer_d4_uniquedata").prop('hidden', true); $(".title_gridContainer_d5_uniquedata").prop('hidden', true);
    $(".gridContainer_d5_uniquedata").prop('hidden', true); $(".title_gridContainer_d6_uniquedata").prop('hidden', true);
    $(".gridContainer_d6_uniquedata").prop('hidden', true); $(".title_gridContainer_d7_uniquedata").prop('hidden', true);
    $(".gridContainer_d7_uniquedata").prop('hidden', true); $(".title_gridContainer_d8_uniquedata").prop('hidden', true);
    $(".gridContainer_d8_uniquedata").prop('hidden', true); $(".title_gridContainer_d9_uniquedata").prop('hidden', true);
    $(".gridContainer_d9_uniquedata").prop('hidden', true); $(".title_gridContainer_d10_uniquedata").prop('hidden', true);
    $(".gridContainer_d10_uniquedata").prop('hidden', true); $(".title_gridContainer_d11_uniquedata").prop('hidden', true);
    $(".gridContainer_d11_uniquedata").prop('hidden', true); $(".title_gridContainer_d12_uniquedata").prop('hidden', true);
    $(".gridContainer_d12_uniquedata").prop('hidden', true); $(".title_gridContainer_d13_uniquedata").prop('hidden', true);
    $(".gridContainer_d13_uniquedata").prop('hidden', true); $(".title_gridContainer_d14_uniquedata").prop('hidden', true);
    $(".gridContainer_d14_uniquedata").prop('hidden', true); $(".title_gridContainer_d15_uniquedata").prop('hidden', true);
    $(".gridContainer_d15_uniquedata").prop('hidden', true); $(".title_gridContainer_d16_uniquedata").prop('hidden', true);
    $(".gridContainer_d16_uniquedata").prop('hidden', true); $(".title_gridContainer_d17_uniquedata").prop('hidden', true);
    $(".gridContainer_d17_uniquedata").prop('hidden', true); $(".title_gridContainer_d18_uniquedata").prop('hidden', true);
    $(".gridContainer_d18_uniquedata").prop('hidden', true); $(".title_gridContainer_d19_uniquedata").prop('hidden', true);
    $(".gridContainer_d19_uniquedata").prop('hidden', true); $(".title_gridContainer_d20_uniquedata").prop('hidden', true);
    $(".gridContainer_d20_uniquedata").prop('hidden', true); $(".title_gridContainer_d21_uniquedata").prop('hidden', true);
    $(".gridContainer_d21_uniquedata").prop('hidden', true); $(".title_gridContainer_d22_uniquedata").prop('hidden', true);
    $(".gridContainer_d22_uniquedata").prop('hidden', true); $(".title_gridContainer_d23_uniquedata").prop('hidden', true);
    $(".gridContainer_d23_uniquedata").prop('hidden', true); $(".title_gridContainer_d2cmpnt_uniquedata").prop('hidden', true);

    $(".gridContainer_d24_uniquedata").prop('hidden', true); $(".title_gridContainer_d24_uniquedata").prop('hidden', true);
    $(".gridContainer_d25_uniquedata").prop('hidden', true); $(".title_gridContainer_d25_uniquedata").prop('hidden', true);

    $(".gridContainer_d26_uniquedata").prop('hidden', true); $(".title_gridContainer_d26_uniquedata").prop('hidden', true);
    $(".gridContainer_d27_uniquedata").prop('hidden', true); $(".title_gridContainer_d27_uniquedata").prop('hidden', true);

    $(".gridContainer_d28_uniquedata").prop('hidden', true); $(".title_gridContainer_d28_uniquedata").prop('hidden', true);




    if (validatepage()) {

        //Notification for user that DataGrid will be displayed here
        $.notify("Expected Tables will be loaded here", {
            className: "success",
            globalPosition: "top center",
            autoHideDelay: 15000
        });

        var genText = document.querySelector("#genText");
        var genSpinner = document.querySelector("#genSpinner");
        var str = "Please Wait, Fetching Data...  ";
        var result = str.bold();
        genText.innerHTML = result;


        genSpinner.classList.add('fa');
        genSpinner.classList.add('fa-spinner');
        genSpinner.classList.add('fa-pulse');

        $.ajax({
            type: "POST",
            url: encodeURI("../Diagnostics/GetPCnamebyLabID"),
            data: { 'labid_to_pcname': labids_chosen },
            success: OnSuccess0,
            error: OnErrorCall0
        });
    }
});

$("#gen2").click(function () {
    fn_LC_Comparator();
});

$("#gen_hilsnap").click(function () {
    fn_HIL_Snapshot();
});
function fn_HIL_Snapshot() {
    debugger;
    LC_Comparator_HIL1 = $('#selectLabId1 option:selected').text(); //"LC002" - string
    $.ajax({
        type: "POST",
        url: "../Diagnostics/HILSnapshot",
        data: { 'HIL1': LC_Comparator_HIL1 },
        success: function (data) {
            debugger;
            
            HIL_Snapshot_1(eval(data.data1.Data.Content));
            debugger;
            HIL_Snapshot_2(eval(data.data2.Data.Content));
            debugger;
            HIL_Snapshot_3(eval(data.data1.Data.Content));
            debugger;
            HIL_Snapshot_4(eval(data.data2.Data.Content));
            debugger;
        }
    });
}

function HIL_Snapshot_1(rtpcData) {
    $("#hilsnap_rtpc").dxDataGrid({

        //editing: {
        //    mode: "batch",
        //    allowUpdating: true,
        //    allowDeleting: true,
        //    allowAdding: true
        //},
        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        dataSource: rtpcData,
        //columns: [
        //    {
        //        caption: "HW DETAILS",

        //        alignment: "center",
        //        columns: [
        //            "LC_Name", "Project",
        //            {
        //                dataField: "System_name",
        //                caption: "PC Name"
        //            },
        //            {
        //                dataField: "Date",
        //                caption: "Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPName",
        //                caption: "EEP Name"
        //            },
        //            {
        //                dataField: "EEPBuildDate",
        //                caption: "EEP Build Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPDatabaseVersion",
        //                caption: "EEP DB Version"
        //            },
        //            {
        //                dataField: "RTPCName",
        //                caption: "RTPC Name"
        //            },
        //            {
        //                dataField: "RBCCAFVersion",
        //                caption: "RBCCAF Version "
        //            },

        //            {
        //                dataField: "RTPCSoftwareVersion",
        //                caption: "RTPC SW Version"
        //            },
        //            {
        //                dataField: "LabCarType",
        //                caption: " LC Type"
        //            }]
        //    }],
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_HW Details"
            //allowExportSelectedData: true
        }
    });
}
function HIL_Snapshot_2(loadboxData) {
    $("#hilsnap_loadbox").dxDataGrid({

        //editing: {
        //    mode: "batch",
        //    allowUpdating: true,
        //    allowDeleting: true,
        //    allowAdding: true
        //},
        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        dataSource: loadboxData,
        //columns: [
        //    {
        //        caption: "HW DETAILS",

        //        alignment: "center",
        //        columns: [
        //            "LC_Name", "Project",
        //            {
        //                dataField: "System_name",
        //                caption: "PC Name"
        //            },
        //            {
        //                dataField: "Date",
        //                caption: "Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPName",
        //                caption: "EEP Name"
        //            },
        //            {
        //                dataField: "EEPBuildDate",
        //                caption: "EEP Build Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPDatabaseVersion",
        //                caption: "EEP DB Version"
        //            },
        //            {
        //                dataField: "RTPCName",
        //                caption: "RTPC Name"
        //            },
        //            {
        //                dataField: "RBCCAFVersion",
        //                caption: "RBCCAF Version "
        //            },

        //            {
        //                dataField: "RTPCSoftwareVersion",
        //                caption: "RTPC SW Version"
        //            },
        //            {
        //                dataField: "LabCarType",
        //                caption: " LC Type"
        //            }]
        //    }],
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_HW Details"
            //allowExportSelectedData: true
        }
    });
}
function HIL_Snapshot_3(projectData) {
    $("#hilsnap_projecthw").dxDataGrid({

        //editing: {
        //    mode: "batch",
        //    allowUpdating: true,
        //    allowDeleting: true,
        //    allowAdding: true
        //},
        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        dataSource: projectData,
        //columns: [
        //    {
        //        caption: "HW DETAILS",

        //        alignment: "center",
        //        columns: [
        //            "LC_Name", "Project",
        //            {
        //                dataField: "System_name",
        //                caption: "PC Name"
        //            },
        //            {
        //                dataField: "Date",
        //                caption: "Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPName",
        //                caption: "EEP Name"
        //            },
        //            {
        //                dataField: "EEPBuildDate",
        //                caption: "EEP Build Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPDatabaseVersion",
        //                caption: "EEP DB Version"
        //            },
        //            {
        //                dataField: "RTPCName",
        //                caption: "RTPC Name"
        //            },
        //            {
        //                dataField: "RBCCAFVersion",
        //                caption: "RBCCAF Version "
        //            },

        //            {
        //                dataField: "RTPCSoftwareVersion",
        //                caption: "RTPC SW Version"
        //            },
        //            {
        //                dataField: "LabCarType",
        //                caption: " LC Type"
        //            }]
        //    }],
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_HW Details"
            //allowExportSelectedData: true
        }
    });
}
function HIL_Snapshot_4(measurementData) {
    $("#hilsnap_measurement").dxDataGrid({

        //editing: {
        //    mode: "batch",
        //    allowUpdating: true,
        //    allowDeleting: true,
        //    allowAdding: true
        //},
        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        dataSource: measurementData,
        //columns: [
        //    {
        //        caption: "HW DETAILS",

        //        alignment: "center",
        //        columns: [
        //            "LC_Name", "Project",
        //            {
        //                dataField: "System_name",
        //                caption: "PC Name"
        //            },
        //            {
        //                dataField: "Date",
        //                caption: "Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPName",
        //                caption: "EEP Name"
        //            },
        //            {
        //                dataField: "EEPBuildDate",
        //                caption: "EEP Build Date",
        //                //dataType: "datetime" "date"
        //            },
        //            {
        //                dataField: "EEPDatabaseVersion",
        //                caption: "EEP DB Version"
        //            },
        //            {
        //                dataField: "RTPCName",
        //                caption: "RTPC Name"
        //            },
        //            {
        //                dataField: "RBCCAFVersion",
        //                caption: "RBCCAF Version "
        //            },

        //            {
        //                dataField: "RTPCSoftwareVersion",
        //                caption: "RTPC SW Version"
        //            },
        //            {
        //                dataField: "LabCarType",
        //                caption: " LC Type"
        //            }]
        //    }],
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_HW Details"
            //allowExportSelectedData: true
        }
    });
}

function LC_Comparator_treeview(treeListData) {
    debugger;
    $('#lccompContainer1').dxTreeList({
        dataSource: treeListData,
        keyExpr: 'DID',
        parentIdExpr: 'ParentID',
        columnAutoWidth: true,
        wordWrapEnabled: true,
        showBorders: true,
        showRowLines: true,
        autoExpandAll: true,

        headerFilter: {
            visible: true,
        },

        columns: [{
            dataField: 'Configuration',
            width: 300,
            isExpanded: true,
            headerCellTemplate(container) {
                container.append($('<div> <img class = "lc_comparator_icon" id="configuration_icon" src = "/Content/images/wrenchblue.png">Configuration</div>'));
            },
        }, {
            dataField: 'HIL1',
            minWidth: 100,
            isExpanded: true,
            caption: LC_Comparator_HIL1,
            headerCellTemplate(container) {
                container.append($('<div> <img class = "lc_comparator_icon" src = "/Content/icons8-server-shutdown-96.png">HIL 1 : ' + LC_Comparator_HIL1 + '</div>'));
            },

        }, {
            dataField: 'HIL2',
            isExpanded: true,
            caption: LC_Comparator_HIL2,
            headerCellTemplate(container) {
                container.append($('<div> <img class = "lc_comparator_icon" src = "/Content/icons8-server-shutdown-96.png">HIL 2 : ' + LC_Comparator_HIL2 + '</div>'));
            },
        }],
        onCellPrepared: function (e) {
            debugger;
            var maxDID_NonChildNode = 50;
            if (e.area = "data" && e.values != undefined) {
                if (e.data.DID > maxDID_NonChildNode) { //highlight in only child nodes             
                    if (e.values[1] == e.values[2]) {
                        e.cellElement.css("background-image", "linear-gradient(315deg, #97deb6 0%, mediumseagreen 294%)");
                        //e.cellElement.css("color", "black");
                    }
                    else {
                        e.cellElement.css("background-image", "linear-gradient(315deg, #FFFF8F 0%, #FBEC5D 294%)");
                        //e.cellElement.css("color", "black");

                    }
                }
                else {
                    e.cellElement.css("font-weight", "bold");
                }
            }

        }
    });
    debugger;
    //handleExpandTree();

}
function fn_LC_Comparator() {
    debugger;
    LC_Comparator_HIL1 = $('#selectLabId1 option:selected').text(); //"LC002" - string

    LC_Comparator_HIL2 = $('#selectLabId2 option:selected').text(); //"LC005" - string;
    $.ajax({
        type: "POST",
        url: "../Diagnostics/LCComparator",
        data: { 'HIL1': LC_Comparator_HIL1, 'HIL2': LC_Comparator_HIL2 },
        success: function (data) {
            debugger;

            var r = eval(data.data.Data.Content);
            LC_Comparator_treeview(r);
            debugger;
        }
    });
}
function handleExpandTree() {
    debugger;
    var treeView = $('#lccompContainer1').dxTreeView('instance');
    var nodeItems = treeView.element().find(".dx-treeview-item");
    for (var i = 0; i < nodeItems.length; i++) {
        treeView.expandItem(nodeItems[i]);
    }
}
$("#export_lccomp").click(function () {

    exportToExcel_LC_Comp();
})
function exportToExcel_LC_Comp(e) {

    var tv = $("#lccompContainer1").dxTreeList("instance");
    var columns = tv.getVisibleColumns();
    var data = tv.getVisibleRows();

    var csvContent = "";

    for (i = 0; i < columns.length; i++) {
        csvContent += columns[i].caption + ",";
    }
    csvContent += "\r\n";

    for (i = 0; i < data.length; i++) {
        row = data[i].values;
        row.forEach(function (item, index) {
            if (item === undefined || item === null) { csvContent += ","; }
            else { csvContent += item + ","; };
        }
        );
        csvContent += "\r\n";
    }

    var blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });

    if (navigator.msSaveBlob) {
        navigator.msSaveBlob(blob, 'HIL Comparator ' + LC_Comparator_HIL1 + ' vs ' + LC_Comparator_HIL2 + '.csv')
    }
    else {
        var link = document.createElement("a");
        var url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute("download", "HIL Comparator " + LC_Comparator_HIL1 + " vs " + LC_Comparator_HIL2 + ".csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
}
$('body').on("click touchstart", "#card1", function (e) {
    debugger;
    $("#togglediv_hwproj").toggle();
    $("#triangle-up1").toggle();
    $(".component_1").prop('hidden', false);
    $(".component_2").prop('hidden', true);
    $(".component_3").prop('hidden', true);
    document.getElementById("triangle-up2").style.display = 'none';
    document.getElementById("togglediv_yoy").style.display = 'none';
    document.getElementById("triangle-up3").style.display = 'none';
    document.getElementById("togglediv_yoy").style.display = 'none';
    document.getElementById("triangle-up4").style.display = 'none';
    document.getElementById("togglediv_hilsnap").style.display = 'none';
    //triangle - up2
    //togglediv_lccomp
});
document.getElementById("togglediv_yoy").style.display = 'none';
document.getElementById("triangle-up2").style.display = 'none';
$('body').on("click touchstart", "#card2", function (e) {
    debugger;
    $("#togglediv_yoy").toggle();
    $("#triangle-up2").toggle();
    document.getElementById("triangle-up1").style.display = 'none';
    document.getElementById("togglediv_hwproj").style.display = 'none';
    document.getElementById("triangle-up3").style.display = 'none';
    document.getElementById("togglediv_lccomp").style.display = 'none';
    document.getElementById("triangle-up4").style.display = 'none';
    document.getElementById("togglediv_hilsnap").style.display = 'none';
    //triangle - up2
    //togglediv_lccomp
});
$('body').on("click touchstart", "#card3", function (e) {
    debugger;
    $("#togglediv_lccomp").toggle();
    $("#triangle-up3").toggle();
    document.getElementById("triangle-up1").style.display = 'none';
    document.getElementById("togglediv_hwproj").style.display = 'none';
    document.getElementById("triangle-up2").style.display = 'none';
    document.getElementById("togglediv_yoy").style.display = 'none';
    document.getElementById("triangle-up4").style.display = 'none';
    document.getElementById("togglediv_hilsnap").style.display = 'none';
    //triangle - up2
    //togglediv_lccomp
});
$('body').on("click touchstart", "#card4", function (e) {
    debugger;
    $("#togglediv_hilsnap").toggle();
    $("#triangle-up4").toggle();
    document.getElementById("triangle-up1").style.display = 'none';
    document.getElementById("togglediv_hwproj").style.display = 'none';
    document.getElementById("triangle-up2").style.display = 'none';
    document.getElementById("togglediv_yoy").style.display = 'none';
    document.getElementById("triangle-up3").style.display = 'none';
    document.getElementById("togglediv_lccomp").style.display = 'none';
    //triangle - up2
    //togglediv_lccomp
});


function OnSuccess0(lstPCs) {

    if (lstPCs.data.length != 0) {
        /*****************getTimezoneOffset() returns the time difference between UTC time and local time, in minutes.********/
        const d = new Date();
        diff_UTCandLocal = -(d.getTimezoneOffset());
        pc = lstPCs.data;
        //create a variable labname 
        //var labname = [];
        //labname = $("#selectLabId").text();
        //labname = $("#selectLabId option:selected").html();


        //*****************Req from Andreas to extrct WW VSC Presence report********************************************

        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetVSCLDUSummaryData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d13,
        //    error: OnErrorCall_d13
        //});

        labname = $('#selectLabId option:selected').toArray().map(item => item.text).join(); //"LC002,LC003,LC005" - string
        //var labname_appended = Array.from(new Set(labname.split(',')));
        debugger;


        if (sessions == "Latest") {
            debugger;

            if (HWflag == true) {
                $.ajax({
                    type: "POST",
                    url: encodeURI("../Diagnostics/GetTABLE1_HWDescData_unique"),
                    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                    success: OnSuccess_d1_uniquedata,
                    error: OnErrorCall_d1_uniquedata
                });
            }




            if (Projflag == true) {
                $.ajax({
                    type: "POST",
                    url: encodeURI("../Diagnostics/TABLE2_GetPrjDescData_unique"),
                    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                    success: OnSuccess_d2_uniquedata,
                    error: OnErrorCall_d2_uniquedata

                });
            }


            if (cards != undefined) {
                for (i = 0; i < cards.length; i++) {
                    debugger;


                    //call a fn pass table nme - if else ; string url = tablename
                    switch (cards[i]) {


                        case "ECC":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE16_ECCData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d16_uniquedata,
                                error: OnErrorCall_d16_uniquedata
                            });
                            break;
                        case "GIO1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE17_GIO1Data_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d17_uniquedata,
                                error: OnErrorCall_d17_uniquedata
                            });
                            break;
                        case "GIO2":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE18_GIO2Data_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d18_uniquedata,

                                error: OnErrorCall_d18_uniquedata
                            });
                            break;
                        case "LDU":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE19_LDUData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d19_uniquedata,
                                error: OnErrorCall_d19_uniquedata
                            });
                            break;
                        case "PSC":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE20_PSCData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d20_uniquedata,
                                error: OnErrorCall_d20_uniquedata
                            });
                            break;
                        case "VSC":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE21_VSCData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d21_uniquedata,
                                error: OnErrorCall_d21_uniquedata
                            });
                            break;
                        case "WSS":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE22_WSSData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d22_uniquedata,
                                error: OnErrorCall_d22_uniquedata
                            });
                            break;
                        case "WSS2":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE23_WSS2Data_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d23_uniquedata,
                                error: OnErrorCall_d23_uniquedata
                            });
                            break;


                    }
                    debugger;
                }

            }
            if (equipments != undefined) {

                if (equipments.includes("OTSO") && !(equipments.includes("EB"))) {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d5_uniquedata")[0].style.float = "left";
                    document.getElementsByClassName("title_gridContainer_d5_uniquedata")[0].style.marginRight = "0vh";
                    document.getElementsByClassName("title_gridContainer_d5_uniquedata")[0].style.marginLeft = "45vh";

                }
                else {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d5_uniquedata")[0].style.float = "right";
                    document.getElementsByClassName("title_gridContainer_d5_uniquedata")[0].style.marginRight = "50vh";
                    document.getElementsByClassName("title_gridContainer_d5_uniquedata")[0].style.marginLeft = "0vh";
                }

                if (equipments.includes("APB") && !(equipments.includes("BOB"))) {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d11_uniquedata")[0].style.float = "left";
                    document.getElementsByClassName("title_gridContainer_d11_uniquedata")[0].style.marginRight = "0vh";
                    document.getElementsByClassName("title_gridContainer_d11_uniquedata")[0].style.marginLeft = "45vh";

                }
                else {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d11_uniquedata")[0].style.float = "right";
                    document.getElementsByClassName("title_gridContainer_d11_uniquedata")[0].style.marginRight = "50vh";
                    document.getElementsByClassName("title_gridContainer_d11_uniquedata")[0].style.marginLeft = "0vh";
                }

                if (equipments.includes("HAP") && !(equipments.includes("IXXAT"))) {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d12_uniquedata")[0].style.float = "left";
                    document.getElementsByClassName("title_gridContainer_d12_uniquedata")[0].style.marginRight = "0vh";
                    document.getElementsByClassName("title_gridContainer_d12_uniquedata")[0].style.marginLeft = "45vh";

                }
                else {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d12_uniquedata")[0].style.float = "right";
                    document.getElementsByClassName("title_gridContainer_d12_uniquedata")[0].style.marginRight = "50vh";
                    document.getElementsByClassName("title_gridContainer_d12_uniquedata")[0].style.marginLeft = "0vh";
                }

                if (equipments.includes("Motsim") && !(equipments.includes("Diagnostic Tools"))) {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d25_uniquedata")[0].style.float = "left";
                    document.getElementsByClassName("title_gridContainer_d25_uniquedata")[0].style.marginRight = "0vh";
                    document.getElementsByClassName("title_gridContainer_d25_uniquedata")[0].style.marginLeft = "45vh";

                }
                else {
                    debugger;
                    document.getElementsByClassName("title_gridContainer_d25_uniquedata")[0].style.float = "right";
                    document.getElementsByClassName("title_gridContainer_d25_uniquedata")[0].style.marginRight = "40vh";
                    document.getElementsByClassName("title_gridContainer_d25_uniquedata")[0].style.marginLeft = "0vh";
                }

                for (i = 0; i < equipments.length; i++) {
                    debugger;
                    switch (equipments[i]) {

                        case "Component Info":
                            //if ($('.Components:checked').length == 0) {
                            //    $('#Sensorcomponents').click();
                            //    components = $('.Components:checked').val();
                            //}
                            //else {
                            //    components = $('.Components:checked').val();
                            //}
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/TABLE2_GetCmpntData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal, 'components_type': components != undefined ? components : "Sensor components" },

                                success: OnSuccess_d2_CMPNTuniquedata,
                                error: OnErrorCall_d2_CMPNTuniquedata


                            });
                            break;
                        case "VDM and HYM":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE27_VDMHYMData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d27_uniquedata,
                                error: OnSuccess_d27_uniquedata
                            });
                            break;
                        case "EB":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/TABLE3_GetEBData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d3_uniquedata,
                                error: OnErrorCall_d3_uniquedata
                            });
                            break;
                        case "ES4441":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE4_ES4441Data_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d4_uniquedata,
                                error: OnErrorCall_d4_uniquedata
                            });
                            break;
                        case "OTSO":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE5_OTSOData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d5_uniquedata,
                                error: OnErrorCall_d5_uniquedata
                            });
                            break;
                        case "Power Supply":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE6_PowerSupplyData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d6_uniquedata,
                                error: OnErrorCall_d6_uniquedata
                            });
                            break;
                        case "BOB":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE7_BOBData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d7_uniquedata,
                                error: OnErrorCall_d7_uniquedata
                            });
                            break;
                        case "BOB1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE8_BOB1Data_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d8_uniquedata,
                                error: OnErrorCall_d8_uniquedata
                            });
                            break;
                        case "IXXAT1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE9_IBData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d9_uniquedata,
                                error: OnErrorCall_d9_uniquedata
                            });
                            break;
                        case "IXXAT":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE10_IXXATData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d10_uniquedata,
                                error: OnErrorCall_d10_uniquedata
                            });
                            break;
                        case "APB":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE11_APBData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d11_uniquedata,
                                error: OnErrorCall_d11_uniquedata
                            });
                            break;
                        case "HAP":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE12_HAPData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d12_uniquedata,
                                error: OnErrorCall_d12_uniquedata
                            });
                            break;
                        case "HAP1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE13_HAP1Data_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d13_uniquedata,
                                error: OnErrorCall_d13_uniquedata
                            });
                            break;
                        case "Cable":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE14_CableData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d14_uniquedata,
                                error: OnErrorCall_d14_uniquedata
                            });
                            break;
                        case "Cable1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE15_Cable1Data_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d15_uniquedata,
                                error: OnErrorCall_d15_uniquedata
                            });
                            break;
                        case "Diagnostic Tools":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE24_DiagnosticToolData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d24_uniquedata,
                                error: OnErrorCall_d24_uniquedata
                            });
                            break;
                        case "Motsim":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE25_MotsimData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d25_uniquedata,
                                error: OnErrorCall_d25_uniquedata
                            });
                            break;
                        case "Vector Tools":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE26_VectorToolData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d26_uniquedata,
                                error: OnErrorCall_d26_uniquedata
                            });
                            break;

                        case "IIS Box":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE28_IISBoxData_unique"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d28_uniquedata,
                                error: OnErrorCall_d28_uniquedata
                            });
                            break;

                    }
                    debugger;


                }
            }

        }

        if (sessions == "All") {


            if (HWflag == true) {
                $.ajax({
                    type: "POST",
                    url: encodeURI("../Diagnostics/GetTABLE1_HWDescData"),
                    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                    success: OnSuccess_d1_uniquedata,
                    error: OnErrorCall_d1_uniquedata
                });
            }

            if (Projflag == true) {
                debugger;
                $.ajax({
                    type: "POST",
                    url: encodeURI("../diagnostics/TABLE2_GetPrjDescData"),
                    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                    success: OnSuccess_d2_uniquedata,
                    error: OnErrorCall_d2_uniquedata
                });
            }





            if (cards != undefined) {
                for (i = 0; i < cards.length; i++) {
                    debugger;
                    //call a fn pass table nme - if else ; string url = tablename
                    switch (cards[i]) {

                        case "ECC":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE16_ECCData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d16_uniquedata,
                                error: OnErrorCall_d16_uniquedata
                            });
                            break;
                        case "GIO1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE17_GIO1Data"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d17_uniquedata,
                                error: OnErrorCall_d17_uniquedata
                            });
                            break;
                        case "GIO2":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE18_GIO2Data"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d18_uniquedata,

                                error: OnErrorCall_d18_uniquedata
                            });
                            break;
                        case "LDU":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE19_LDUData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d19_uniquedata,
                                error: OnErrorCall_d19_uniquedata
                            });
                            break;
                        case "PSC":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE20_PSCData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d20_uniquedata,
                                error: OnErrorCall_d20_uniquedata
                            });
                            break;
                        case "VSC":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE21_VSCData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d21_uniquedata,
                                error: OnErrorCall_d21_uniquedata
                            });
                            break;
                        case "WSS":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE22_WSSData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d22_uniquedata,
                                error: OnErrorCall_d22_uniquedata
                            });
                            break;
                        case "WSS2":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE23_WSS2Data"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d23_uniquedata,
                                error: OnErrorCall_d23_uniquedata
                            });
                            break;


                    }
                    debugger;
                }

            }
            if (equipments != undefined) {
                for (i = 0; i < equipments.length; i++) {
                    debugger;
                    switch (equipments[i]) {
                        case "Component Info":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/TABLE2_GetCmpntData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d2_CMPNTuniquedata,
                                error: OnErrorCall_d2_CMPNTuniquedata
                            });
                            break;
                        case "VDM and HYM":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE27_VDMHYMData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },

                                success: OnSuccess_d27_uniquedata,
                                error: OnSuccess_d27_uniquedata
                            });
                            break;
                        case "EB":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/TABLE3_GetEBData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d3_uniquedata,
                                error: OnErrorCall_d3_uniquedata
                            });
                            break;
                        case "ES4441":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE4_ES4441Data"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d4_uniquedata,
                                error: OnErrorCall_d4_uniquedata
                            });
                            break;
                        case "OTSO":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE5_OTSOData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d5_uniquedata,
                                error: OnErrorCall_d5_uniquedata
                            });
                            break;
                        case "Power Supply":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE6_PowerSupplyData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d6_uniquedata,
                                error: OnErrorCall_d6_uniquedata
                            });
                            break;
                        case "BOB":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE7_BOBData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d7_uniquedata,
                                error: OnErrorCall_d7_uniquedata
                            });
                            break;
                        case "BOB1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE8_BOB1Data"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d8_uniquedata,
                                error: OnErrorCall_d8_uniquedata
                            });
                            break;
                        case "IXXAT1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE9_IBData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d9_uniquedata,
                                error: OnErrorCall_d9_uniquedata
                            });
                            break;
                        case "IXXAT":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE10_IXXATData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d10_uniquedata,
                                error: OnErrorCall_d10_uniquedata
                            });
                            break;
                        case "APB":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE11_APBData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d11_uniquedata,
                                error: OnErrorCall_d11_uniquedata
                            });
                            break;
                        case "HAP":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE12_HAPData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d12_uniquedata,
                                error: OnErrorCall_d12_uniquedata
                            });
                            break;
                        case "HAP1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE13_HAP1Data"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d13_uniquedata,
                                error: OnErrorCall_d13_uniquedata
                            });
                            break;
                        case "Cable":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE14_CableData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d14_uniquedata,
                                error: OnErrorCall_d14_uniquedata
                            });
                            break;
                        case "Cable1":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE15_Cable1Data"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d15_uniquedata,
                                error: OnErrorCall_d15_uniquedata
                            });
                            break;
                        case "Diagnostic Tools":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE24_DiagnosticToolData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d24_uniquedata,
                                error: OnErrorCall_d24_uniquedata
                            });
                            break;
                        case "Motsim":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE25_MotsimData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d25_uniquedata,
                                error: OnErrorCall_d25_uniquedata
                            });
                            break;
                        case "Vector Tools":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE26_VectorToolData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d26_uniquedata,
                                error: OnErrorCall_d26_uniquedata
                            });
                            break;
                        //when user chooses IIS Box as a filter option
                        case "IIS Box":
                            $.ajax({
                                type: "POST",
                                url: encodeURI("../Diagnostics/GetTABLE28_IISBoxData"),
                                data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime, 'diff_UTCandLocal': diff_UTCandLocal },
                                success: OnSuccess_d28_uniquedata,
                                error: OnErrorCall_d28_uniquedata
                            });
                            break;
                    }
                    debugger;


                }
            }

        }


        //if (str != "Try Again") {
        //    var str = "Get LC info";
        //    var result = str.bold();
        //    genText.innerHTML = result;
        //    $("#genSpinner").removeClass("fa fa-spinner fa-spin");


        //    $.notify("Datagrids are successfully loaded!", {
        //        globalPosition: "top center",
        //        className: "success"
        //    });
        //}





        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE1_HWDescData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d1_uniquedata,
        //    error: OnErrorCall_d1_uniquedata
        //});
        //debugger;


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/TABLE2_GetPrjDescData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d2_uniquedata,
        //    error: OnErrorCall_d2_uniquedata
        //});

        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/TABLE3_GetEBData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d3_uniquedata,
        //    error: OnErrorCall_d3_uniquedata
        //});

        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE4_ES4441Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d4_uniquedata,
        //    error: OnErrorCall_d4_uniquedata
        //});

        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE5_OTSOData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d5_uniquedata,
        //    error: OnErrorCall_d5_uniquedata
        //});
        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE6_PowerSupplyData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d6_uniquedata,
        //    error: OnErrorCall_d6_uniquedata
        //});
        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE7_BOBData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d7_uniquedata,
        //    error: OnErrorCall_d7_uniquedata
        //});
        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE8_BOB1Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d8_uniquedata,
        //    error: OnErrorCall_d8_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE9_IBData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d9_uniquedata,
        //    error: OnErrorCall_d9_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE10_IXXATData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d10_uniquedata,
        //    error: OnErrorCall_d10_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE11_APBData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d11_uniquedata,
        //    error: OnErrorCall_d11_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE12_HAPData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d12_uniquedata,
        //    error: OnErrorCall_d12_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE13_HAP1Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d13_uniquedata,
        //    error: OnErrorCall_d13_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE14_CableData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d14_uniquedata,
        //    error: OnErrorCall_d14_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE15_Cable1Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d15_uniquedata,
        //    error: OnErrorCall_d15_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE16_ECCData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d16_uniquedata,
        //    error: OnErrorCall_d16_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE17_GIO1Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d17_uniquedata,
        //    error: OnErrorCall_d17_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE18_GIO2Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d18_uniquedata,
        //    error: OnErrorCall_d18_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE19_LDUData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d19_uniquedata,
        //    error: OnErrorCall_d19_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE20_PSCData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d20_uniquedata,
        //    error: OnErrorCall_d20_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE21_VSCData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d21_uniquedata,
        //    error: OnErrorCall_d22_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE22_WSSData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d22_uniquedata,
        //    error: OnErrorCall_d22_uniquedata
        //}); $.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE23_WSS2Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d23_uniquedata,
        //    error: OnErrorCall_d23_uniquedata
        //});

        //*******************************************************************************************************************************8

        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE3_APB_BOB_Cable_EB_ES4441_1_ES4441_2_HAP1Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d3,
        //    error: OnErrorCall_d3
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE4_OTSO_BOB1_Cable1_PowerSupply_HAP_IXXATData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d4,
        //    error: OnErrorCall_d4
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE5_ECC_IBData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d5,
        //    error: OnErrorCall_d5
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE6_GIO1Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d6,
        //    error: OnErrorCall_d6
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE7_GIO2Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d7,
        //    error: OnErrorCall_d7
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE8_LDUData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d8,
        //    error: OnErrorCall_d8
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE9_PSCData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d9,
        //    error: OnErrorCall_d9
        //});



        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE10_VSCData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d10,
        //    error: OnErrorCall_d10
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE11_WSSData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d11,
        //    error: OnErrorCall_d11
        //});


        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetTABLE12_WSS2Data"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d12,
        //    error: OnErrorCall_d12
        //});

        //$.ajax({
        //    type: "POST",
        //    url: encodeURI("../Diagnostics/GetVSCLDUSummaryData"),
        //    data: { 'pc': lstPCs.data, 'sdate': sTime, 'edate': eTime },
        //    success: OnSuccess_d13,
        //    error: OnErrorCall_d13
        //});

    }
    else {
        //notify message

        $.notify('There are no PCs attached to this Lab!', {
            globalPosition: "top center",
            className: "warn"
        });
        var str = "Try Again";
        var result = str.bold();
        genText.innerHTML = result;
        $("#genSpinner").removeClass("fa fa-spinner fa-spin");
    }

}
function OnErrorCall0(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");
    $.notify('Error in getting PC names!', {
        globalPosition: "top center",
        className: "warn"
    });
}


//var isProjExtracted = false;
//var isWSSExtracted = false;
function OnSuccess_d1(response) {
    var objdata = (response.data);
    debugger;

    $(".gridContainer_d1").prop('hidden', false);


    $(".gridContainer_d1").dxDataGrid({

        //editing: {
        //    mode: "batch",
        //    allowUpdating: true,
        //    allowDeleting: true,
        //    allowAdding: true
        //},
        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        dataSource: objdata,
        columns: [
            {
                caption: "HW DETAILS",

                alignment: "center",
                columns: [
                    "LC_Name", "Project",
                    {
                        dataField: "System_name",
                        caption: "PC Name"
                    },
                    {
                        dataField: "Date",
                        caption: "Date",
                        //dataType: "datetime" "date"
                    },
                    {
                        dataField: "EEPName",
                        caption: "EEP Name"
                    },
                    {
                        dataField: "EEPBuildDate",
                        caption: "EEP Build Date",
                        //dataType: "datetime" "date"
                    },
                    {
                        dataField: "EEPDatabaseVersion",
                        caption: "EEP DB Version"
                    },
                    {
                        dataField: "RTPCName",
                        caption: "RTPC Name"
                    },
                    {
                        dataField: "RBCCAFVersion",
                        caption: "RBCCAF Version "
                    },

                    {
                        dataField: "RTPCSoftwareVersion",
                        caption: "RTPC SW Version"
                    },
                    {
                        dataField: "LabCarType",
                        caption: " LC Type"
                    }]
            }],
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_HW Details"
            //allowExportSelectedData: true
        }
    });


}
function OnErrorCall_d1(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify('HW error!', {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d2(response) {
    var objdata = (response.data);
    $(".gridContainer_d2").prop('hidden', false);
    debugger;
    $(".gridContainer_d2").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {

            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        dataSource: objdata,
        columns: [
            {
                caption: "PROJECT DETAILS",
                alignment: "center",

                columns: [
                    "LC_Name", "Project",
                    {
                        dataField: "System_name",
                        caption: "PC Name"
                    },
                    {
                        dataField: "Component_name",
                        caption: "Component Name"
                    },
                    {
                        dataField: "Date",
                        caption: "Date",
                        //dataType: "datetime" "date"
                    },
                    {
                        dataField: "Db_Version",
                        caption: "DB Version"
                    },
                    {
                        dataField: "Details",
                        caption: "ProjectName"
                    },
                    {
                        dataField: "Product",
                        caption: "Product"
                    },
                    {
                        dataField: "Version",
                        caption: "Version"
                    },
                    "ToolVersion",
                    "EMUCable",
                    "AECUCable",
                    {
                        dataField: "MetaEditor_Ver",
                        caption: "MetaEditor Version"
                    },
                    {
                        dataField: "ProjectBuilder_Ver",
                        caption: "ProjectBuilder Version"
                    },
                    {
                        dataField: "Ascet_Ver",
                        caption: "Ascet Version"
                    },
                    {
                        dataField: "ProjectEditor_Ver",
                        caption: "ProjectEditor Version"
                    }




                ]
            }],
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_Project Details"
            //allowExportSelectedData: true
        }


    });
    isProjExtracted = true;
    button_change();
    debugger;


}
function OnErrorCall_d2(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("Project Details error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d3(response) {
    var objdata = (response.data);
    $(".gridContainer_d3").prop('hidden', false);

    $(".gridContainer_d3").dxDataGrid({
        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        dataSource: objdata,
        columns: [
            {
                caption: "APB_BOB_CABLE_EB_ES4441_1_ES4441_2_HAP1 DETAILS",
                alignment: "center",

                columns: [
                    "LC_Name", "Project",
                    {
                        dataField: "System_name",
                        caption: "PC Name"
                    },
                    {
                        dataField: "Date",
                        caption: "Date",
                        //dataType: "datetime" "date"
                    },
                    {
                        dataField: "ModelSpecific_EID_Switch_APB_APB_Module_GIO2_Signature_GIO2",
                        caption: "APB EID"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_SerialNumber",
                        caption: "BOB SN"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_DeviceRevision",
                        caption: "BOB Revision"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_SerialNumber",
                        caption: "Cable SN"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_DeviceRevision",
                        caption: "Cable Revision"
                    },
                    {
                        dataField: "Kernel_EB_Cards_EB5100",
                        caption: "EB5100"
                    },
                    {
                        dataField: "Kernel_EB_Cards_EB5200",
                        caption: "EB5200"
                    },
                    {
                        dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441SN",
                        caption: "ES4441 SN"
                    },
                    {
                        caption: "ES4441 FW Version",
                        calculateCellValue: function (rowData) { return rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMain + "." + rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMajor + "." + rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMinor },
                        allowHeaderFiltering: true,
                        allowSorting: true,
                        allowFiltering: true,
                        allowGrouping: true,
                        allowHiding: true,

                    },
                    {
                        dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441HWRevision",
                        caption: "ES4441 HW Revision"
                    },
                    {
                        dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441HWVersion",
                        caption: "ES4441 HW Version"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_SerialNumber",
                        caption: "HAP SNo"
                    }]
            }],
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_APB_BOB_CABLE_EB_ES4441_1_ES4441_2_HAP1 Details"
            //allowExportSelectedData: true
        }
    });


}
function OnErrorCall_d3(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("APB_BOB_CABLE_EB_ES4441_1_ES4441_2_HAP1 DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}




function OnSuccess_d4(response) {
    var objdata = (response.data);
    $(".gridContainer_d4").prop('hidden', false);

    $(".gridContainer_d4").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_OTSO_BOB1_CABLE1_POWER SUPPLY_HAP_IXXAT Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,
        columns: [

            {
                caption: "OTSO_BOB1_CABLE1_POWER SUPPLY_HAP_IXXAT DETAILS",
                alignment: "center",

                columns: [
                    "LC_Name", "Project",
                    {
                        dataField: "System_name",
                        caption: "PC Name"
                    },
                    {
                        dataField: "Date",
                        caption: "Date",
                        //dataType: "datetime" "date"
                    },
                    {
                        dataField: "Kernel_Component_IPB_TemperatureReceive_OTSO1Available",
                        caption: "OTSO1"
                    },
                    {
                        dataField: "Kernel_Component_IPB_TemperatureReceive_OTSO2Available",
                        caption: "OTSO2"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_SerialNumber",
                        caption: "BOB1 SNo"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_SerialNumber",
                        caption: "Cable1 SNo"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Configuration",
                        caption: "PS Configuration"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_ECU",
                        caption: "PS ECU Factor"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_MR",
                        caption: "PS MR Factor"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_VR",
                        caption: "PS VR Factor"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_SerialNumber",
                        caption: "HAP SNo"
                    },
                    {
                        dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_DeviceRevision",
                        caption: "HAP Revision"
                    },
                    {
                        dataField: "ModelSpecific_EID_NET_CAN_Settings_CAN_Settings_rtpc_ixxat_config",
                        caption: "IXXAT EID"
                    }]
            }]
    });


}
function OnErrorCall_d4(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("OTSO_BOB1_CABLE1_POWER SUPPLY_HAP_IXXAT DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });

}



function OnSuccess_d5(response) {
    var objdata = (response.data);
    $(".gridContainer_d5").prop('hidden', false);

    $(".gridContainer_d5").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_ECC_IXXAT1 Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,
        columns:
            [
                {
                    caption: "ECC_IXXAT1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },

                        {
                            dataField: "Kernel_Loadbox_Card_ECC_CARD_BoardType",
                            caption: "ECC Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_CARD_BoardRevision",
                            caption: "ECC Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_CARD_VER_TAG_ARRAY",
                            caption: "ECC Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Serial_No",
                            caption: "ECC SNo"
                        },
                        {
                            caption: "ECC FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_ECC_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true
                        },
                        {
                            caption: "ECC FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_ECC_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true
                        },
                        {
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_ECC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_ECC_Calibration_Year },
                            caption: "ECC Calibration Date",
                            //dataType: "datetime" "date",
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true
                        },
                        {
                            caption: "ECC NextCalibration Date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Year },
                            //dataType: "datetime" "date",
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true
                        },
                        {
                            caption: "ECC Creation Date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_ECC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_ECC_Year_of_Creation },
                            //dataType: "datetime" "date",
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true,
                            allowReordering: true
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_BuildVersion",
                            caption: "ECC Build Version"
                        },
                        {
                            dataField: "ModelSpecific_EID_NET_CAN_Settings_CAN_Settings_rtpc_ixxat_config ",
                            caption: "IXXAT1 EID"
                        }]
                }]

    });


}
function OnErrorCall_d5(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("ECC_IXXAT1 error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d6(response) {
    var objdata = (response.data);
    $(".gridContainer_d6").prop('hidden', false);


    $(".gridContainer_d6").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {
            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_GIO1 Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,


        columns:
            [
                {
                    caption: "GIO1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",

                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO1_CARD_BoardType",
                            caption: "GIO1 Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO1_CARD_BoardRevision",
                            caption: "GIO1 Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO1_CARD_VER_TAG_ARRAY",
                            caption: "GIO1 Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO1_Serial_No",
                            caption: "GIO1 SNo"
                        },
                        {
                            caption: "GIO1 FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_GIO1_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowGrouping: true,
                            allowFiltering: true
                        },
                        {
                            caption: "GIO1 FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_GIO1_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowGrouping: true,
                            allowFiltering: true
                        },
                        {
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO1_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO1_Calibration_Year },
                            caption: "GIO1 Calibration Date",
                            //dataType: "datetime" "date",
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowGrouping: true,
                            allowFiltering: true

                        },
                        {
                            caption: "GIO1 NextCalibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowGrouping: true,
                            allowFiltering: true

                        },
                        {
                            caption: "GIO1 Creation Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO1_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO1_Year_of_Creation },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true,
                            allowReordering: true,
                            allowResizing: true,
                            allowSearch: true,
                            autoExpandGroup: true,
                            format: "shortDateShortTime",
                            editorOptions: { type: "datetime" },
                            value: Date


                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO1_BuildVersion",
                            caption: "GIO1 Build Version"
                        }]
                }]

    });


}
function OnErrorCall_d6(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");


    $.notify("GIO1 error!", {
        globalPosition: "top center",
        className: "warn"
    });

}



function OnSuccess_d7(response) {
    var objdata = (response.data);
    $(".gridContainer_d7").prop('hidden', false);

    $(".gridContainer_d7").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {

            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_GIO2 Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,


        columns:
            [
                {
                    caption: "GIO2 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO2_CARD_BoardType",
                            caption: "GIO2 Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO2_CARD_BoardRevision",
                            caption: "GIO2 Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO2_CARD_VER_TAG_ARRAY",
                            caption: "GIO2 Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO2_Serial_No",
                            caption: "GIO2 SNo"
                        },
                        {
                            caption: "GIO2 FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_GIO2_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "GIO2 FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_GIO2_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO2_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO2_Calibration_Year },
                            caption: "GIO2 Calibration Date",
                            //dataType: "datetime" "date",
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true


                        },
                        {
                            caption: "GIO2 NextCalibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "GIO2 Creation Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO2_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO2_Year_of_Creation },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            dataField: "Kernel_Loadbox_Card_GIO2_BuildVersion",
                            caption: "GIO2 Build Version"
                        }]
                }]


    });


}
function OnErrorCall_d7(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("GIO2 error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d8(response) {
    var objdata = (response.data);
    $(".gridContainer_d8").prop('hidden', false);

    $(".gridContainer_d8").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {

            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_LDU Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,


        columns:
            [
                {
                    caption: "LDU DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_LDU_CARD_BoardType",
                            caption: "LDU Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_LDU_CARD_BoardRevision",
                            caption: "LDU Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_LDU_CARD_VER_TAG_ARRAY",
                            caption: "LDU Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_LDU_Serial_No",
                            caption: "LDU SNo"
                        },
                        {
                            caption: "LDU FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_LDU_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "LDU FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_LDU_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "LDU Calibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_LDU_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_LDU_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "LDU NextCalibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "LDU Creation Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_LDU_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_LDU_Year_of_Creation },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            dataField: "Kernel_Loadbox_Card_LDU_BuildVersion",
                            caption: "LDU Build Version"
                        }]
                }]
    });



}
function OnErrorCall_d8(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("LDU error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d9(response) {
    var objdata = (response.data);
    $(".gridContainer_d9").prop('hidden', false);

    $(".gridContainer_d9").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {

            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_PSC Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,


        columns:
            [
                {
                    caption: "PSC DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_CARD_BoardType",
                            caption: "PSC Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_CARD_BoardRevision",
                            caption: "PSC Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_CARD_VER_TAG_ARRAY",
                            caption: "PSC Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Serial_No",
                            caption: "PSC SNo"
                        },
                        {
                            caption: "PSC FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_PSC_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "PSC FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_PSC_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "PSC Calibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_PSC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_PSC_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "PSC NextCalibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "PSC Creation Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_PSC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_PSC_Year_of_Creation },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_BuildVersion",
                            caption: "PSC Build Version"
                        }]
                }]
    });


}
function OnErrorCall_d9(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("PSC error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d10(response) {
    var objdata = (response.data);
    $(".gridContainer_d10").prop('hidden', false);

    $(".gridContainer_d10").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {

            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_VSC Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,


        columns:
            [
                {
                    caption: "VSC DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_VSC_CARD_BoardType",
                            caption: "VSC Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_VSC_CARD_BoardRevision",
                            caption: "VSC Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_VSC_CARD_VER_TAG_ARRAY",
                            caption: "VSC Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_VSC_Serial_No",
                            caption: "VSC SNo"
                        },
                        {
                            caption: "VSC FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_VSC_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "VSC FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_VSC_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "VSC Calibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_VSC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_VSC_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "VSC NextCalibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "VSC Creation Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_VSC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_VSC_Year_of_Creation },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            dataField: "Kernel_Loadbox_Card_VSC_BuildVersion",
                            caption: "VSC Build Version"
                        }]
                }]
    });


}
function OnErrorCall_d10(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("VSC error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d11(response) {
    var objdata = (response.data);
    $(".gridContainer_d11").prop('hidden', false);

    $(".gridContainer_d11").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {

            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_WSS Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,


        columns:
            [
                {
                    caption: "WSS DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS_CARD_BoardType",
                            caption: "WSS Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS_CARD_BoardRevision",
                            caption: "WSS Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS_CARD_VER_TAG_ARRAY",
                            caption: "WSS Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS_Serial_No",
                            caption: "WSS SNo"
                        },
                        {
                            caption: "WSS FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_WSS_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "WSS FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_WSS_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "WSS Calibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "WSS NextCalibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "WSS Creation Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS_Year_of_Creation },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS_BuildVersion",
                            caption: "WSS Build Version"
                        }]
                }]
    });

}
function OnErrorCall_d11(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("WSS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d12(response) {
    var objdata = (response.data);
    $(".gridContainer_d12").prop('hidden', false);

    $(".gridContainer_d12").dxDataGrid({


        allowColumnReordering: true,
        allowColumnResizing: true,
        columnChooser: {
            enabled: true
        },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        columnFixing: {
            enabled: true
        },
        filterRow: {
            visible: true

        },
        headerFilter: {
            visible: true,
            applyFilter: "auto"
        },
        selection: {

            applyFilter: "auto"
        },

        paging: {
            pageSize: 5
        },
        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        //selection: {
        //    mode: "multiple"
        //},
        export: {
            enabled: false,
            fileName: "DiagnosticsGrid_WSS2 Details"
            //allowExportSelectedData: true
        },
        dataSource: objdata,


        columns:
            [
                {
                    caption: "WSS2 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name", "Project",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },

                        {
                            dataField: "Kernel_Loadbox_Card_WSS2_CARD_BoardType",
                            caption: "WSS2 Type"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS2_CARD_BoardRevision",
                            caption: "WSS2 Revision"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS2_CARD_VER_TAG_ARRAY",
                            caption: "WSS2 Card Version"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS2_Serial_No",
                            caption: "WSS2 SNo"
                        },
                        {
                            caption: "WSS2 FW Card Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_WSS2_Firmware_Card_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "WSS2 FW FPGA Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_WSS2_Firmware_FPGA_Minor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true
                        },
                        {
                            caption: "WSS2 Calibration Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS2_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS2_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            caption: "WSS2 NextCalibration Date",
                            //dataType: "datetime" "date",
                            format: "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Year },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true


                        },
                        {
                            caption: "WSS2 Creation Date",
                            //dataType: "datetime" "date",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS2_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS2_Year_of_Creation },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true

                        },
                        {
                            dataField: "Kernel_Loadbox_Card_WSS2_BuildVersion",
                            caption: "WSS2 Build Version"
                        }]
                }]
    });
    debugger;

    isWSSExtracted = true;
    button_change();
    debugger;
}
function OnErrorCall_d12(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");


    $.notify("WSS2 error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


//function OnSuccess_d13(response) {
//    var objdata = (response.data);
//    $(".gridContainer_d13").prop('hidden', false);

//    $(".gridContainer_d13").dxDataGrid({


//        allowColumnReordering: true,
//        allowColumnResizing: true,
//        columnChooser: {
//            enabled: true
//        },
//        columnFixing: {
//            enabled: true
//        },
//        filterRow: {
//            visible: true

//        },
//        headerFilter: {
//            visible: true,
//            applyFilter: "auto"
//        },
//        selection: {

//            applyFilter: "auto"
//        },

//        paging: {
//            pageSize: 100
//        },
//        searchPanel: {
//            visible: true,
//            width: 240,
//            placeholder: "Search..."
//        },
//        //selection: {
//        //    mode: "multiple"
//        //},
//        export: {
//            enabled: false,
//            fileName: "DiagnosticsGrid_VSCLDUSummary Details"
//            //allowExportSelectedData: true
//        },
//        dataSource: objdata,


//        columns:
//            [
//                {
//                    caption: "VSC vs LDU Summary",
//                    alignment: "center",

//                    columns: [
//                        "LC_Name", "Project",
//                        {
//                            dataField: "System_name",
//                            caption: "PC Name"
//                        },
//                        {
//                            dataField: "Date",
//                            caption: "Date",
//                            //dataType: "datetime" "date"
//                        },
//                        {
//                            dataField: "VSC_present"

//                        },
//                        {
//                            dataField: "LDU_present"

//                        }
//                       ]
//                }]
//    });
//    var str = "Get LC info";
//    var result = str.bold();
//    genText.innerHTML = result;
//    $("#genSpinner").removeClass("fa fa-spinner fa-spin");


//    $.notify("Datagrids are successfully loaded!", {
//        globalPosition: "top center",
//        className: "success"
//    });


//}
//function OnErrorCall_d13(response) {
//    var str = "Try Again";
//    var result = str.bold();
//    genText.innerHTML = result;
//    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

//    $.notify("VSC vs LDU error!", {
//        globalPosition: "top center",
//        className: "warn"
//    });

//}




//************************UNIQUE DT********************//

function OnSuccess_d1_uniquedata(response) {
    var objdata = (response.data);
    debugger;
    if (sessions == "Latest") {
        $(".gridContainer_d1_uniquedata").prop('hidden', false); $(".title_gridContainer_d1_uniquedata").prop('hidden', false);


        $(".gridContainer_d1_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            //editing: {
            //    mode: "batch",
            //    allowUpdating: true,
            //    allowDeleting: true,
            //    allowAdding: true
            //},
            allowColumnReordering: true,
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            //scrolling: {
            //    mode: 'virtual',
            //},
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            grouping: {
                autoExpandAll: false,
            },
            groupPanel: {
                visible: true,
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "HW DETAILS",

                    alignment: "center",
                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "EEPName",
                            caption: "EEP Name",
                            // ////groupIndex: 0,
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            dataType: "date"
                            ////////dataType: "datetime" "datetime"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "EEPBuildDate",
                            caption: "EEP Build Date",
                            dataType: "datetime" //"date"
                        },
                        {
                            dataField: "EEPDatabaseVersion",
                            caption: "EEP DB Version"
                        },
                        {
                            dataField: "RTPCName",
                            caption: "RTPC Name"
                        },
                        {
                            dataField: "RBCCAFVersion",
                            caption: "RBCCAF Version ",
                            visible: false
                        },
                        {
                            dataField: "RTPCSoftwareVersion",
                            caption: "RTPC SW Version"
                        },
                        {
                            dataField: "LabCarType",
                            caption: " LC Type"
                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_HW Details"
                //allowExportSelectedData: true
            }
        });

        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d1").prop('hidden', false); $(".title_gridContainer_d1").prop('hidden', false);


        $(".gridContainer_d1").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            //editing: {
            //    mode: "batch",
            //    allowUpdating: true,
            //    allowDeleting: true,
            //    allowAdding: true
            //},
            allowColumnReordering: true,
            allowColumnResizing: true,
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "HW DETAILS",

                    alignment: "center",
                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "EEPName",
                            caption: "EEP Name"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "EEPBuildDate",
                            caption: "EEP Build Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "EEPDatabaseVersion",
                            caption: "EEP DB Version"
                        },
                        {
                            dataField: "RTPCName",
                            caption: "RTPC Name"
                        },
                        {
                            dataField: "RBCCAFVersion",
                            caption: "RBCCAF Version "
                        },
                        {
                            dataField: "RTPCSoftwareVersion",
                            caption: "RTPC SW Version"
                        },
                        {
                            dataField: "LabCarType",
                            caption: " LC Type"
                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_HW Details"
                //allowExportSelectedData: true
            }
        });

        counter++;
        counter_function();
    }

}
function OnErrorCall_d1_uniquedata(response) {
    debugger;
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify('HW error!', {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d2_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d2").prop('hidden', false); $(".title_gridContainer_d2").prop('hidden', false);
        debugger;
        $(".gridContainer_d2").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true,
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "PROJECT DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        //{
                        //    dataField: "Component_name",
                        //    caption: "Component Name"
                        //},

                        {
                            dataField: "Details",
                            caption: "ProjectName"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Db_Version",
                            caption: "DB Version"
                        },
                        {
                            dataField: "Product",
                            caption: "Product"
                        },
                        //{
                        //    dataField: "Version",
                        //    caption: "Version"
                        //},
                        "ToolVersion",
                        "EMUCable",
                        "AECUCable",
                        {
                            dataField: "MetaEditor_Ver",
                            caption: "MetaEditor Version"
                        },
                        {
                            dataField: "ProjectBuilder_Ver",
                            caption: "ProjectBuilder Version"
                        },
                        {
                            dataField: "Ascet_Ver",
                            caption: "Ascet Version"
                        },
                        {
                            dataField: "ProjectEditor_Ver",
                            caption: "ProjectEditor Version"
                        }




                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_Project Details"
                //allowExportSelectedData: true
            }


        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d2_uniquedata").prop('hidden', false); $(".title_gridContainer_d2_uniquedata").prop('hidden', false);
        debugger;
        $(".gridContainer_d2_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true,
            //groupPanel: {
            //    visible: true,
            //},
            //grouping: {
            //    autoExpandAll: true,
            //},
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "PROJECT DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "LabOEM",
                            caption: "OEM"
                        },
                        //{
                        //    dataField: "Component_name",
                        //    caption: "Component Name"
                        //},

                        {
                            dataField: "Details",
                            caption: "ProjectName",
                            //  groupIndex: 0
                        },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            //dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Db_Version",
                            caption: "DB Version"
                        },
                        {
                            dataField: "Product",
                            caption: "Product"
                        },
                        //{
                        //    dataField: "Details",
                        //    caption: "Details"
                        //},
                        //{
                        //    dataField: "Version",
                        //    caption: "Version"
                        //},
                        "ToolVersion",
                        "EMUCable",
                        "AECUCable",
                        {
                            dataField: "MetaEditor_Ver",
                            caption: "MetaEditor Version"
                        },
                        {
                            dataField: "ProjectBuilder_Ver",
                            caption: "ProjectBuilder Version"
                        },
                        {
                            dataField: "Ascet_Ver",
                            caption: "Ascet Version"
                        },
                        {
                            dataField: "ProjectEditor_Ver",
                            caption: "ProjectEditor Version"
                        }




                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_Project Details"
                //allowExportSelectedData: true
            }


        });
        counter++;
        counter_function();
        debugger;
    }
    //isProjExtracted = true;
    //button_change();



}
function OnErrorCall_d2_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("Project Details error!", {
        globalPosition: "top center",
        className: "warn"
    });
}

function OnSuccess_d2_CMPNTuniquedata(response) {
    var objdata = (response.data);
    $(".component_button").prop('hidden', false);
    if (sessions == "All") {

        $(".gridContainer_d2cmpnt").prop('hidden', false); $(".title_gridContainer_d2cmpnt").prop('hidden', false);
        debugger;
        $(".gridContainer_d2cmpnt").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true,
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "COMPONENT DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Details",
                            caption: "ProjectName"
                        },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "SensorType",
                            caption: "SensorType"
                        },
                        {
                            dataField: "Component_name",
                            caption: "Component Name"
                        },


                        //{
                        //    dataField: "Db_Version",
                        //    caption: "DB Version"
                        //},

                        //{
                        //    dataField: "Product",
                        //    caption: "Product"
                        //},
                        {
                            dataField: "Version",
                            caption: "Version"
                        },
                        //"ToolVersion",
                        //"EMUCable",
                        //"AECUCable",
                        //{
                        //    dataField: "MetaEditor_Ver",
                        //    caption: "MetaEditor Version"
                        //},
                        //{
                        //    dataField: "ProjectBuilder_Ver",
                        //    caption: "ProjectBuilder Version"
                        //},
                        //{
                        //    dataField: "Ascet_Ver",
                        //    caption: "Ascet Version"
                        //},
                        //{
                        //    dataField: "ProjectEditor_Ver",
                        //    caption: "ProjectEditor Version"
                        //}




                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_Project Details"
                //allowExportSelectedData: true
            }


        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d2cmpnt_uniquedata").prop('hidden', false); $(".title_gridContainer_d2cmpnt_uniquedata").prop('hidden', false);
        debugger;
        $(".gridContainer_d2cmpnt_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            grouping: {
                autoExpandAll: true,
            },
            groupPanel: {
                visible: true,
            },
            allowColumnReordering: true,
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "COMPONENT DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        {
                            dataField: "Details",
                            caption: "ProjectName",
                            ////groupIndex: 0,
                        },
                        {

                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "SensorType",
                            caption: "SensorType",
                            visible: function (e) {
                                if (components.includes("all"))
                                    return false;
                                else
                                    return true;
                                // labteam - no option to submit
                                // vkmspoc approved sh=false - item not reviewed, so submit option available
                                // vkmspoc approved sh=true  - item reviewed, so submit option not needed


                            },
                            //visible: function (e) {
                            //    debugger;
                            //    return (components.includes("all") == true ? false : true)
                            //}
                        },
                        {
                            dataField: "Component_name",
                            caption: "Component Name"
                        },


                        //{
                        //    dataField: "Db_Version",
                        //    caption: "DB Version"
                        //},

                        //{
                        //    dataField: "Product",
                        //    caption: "Product"
                        //},
                        //{
                        //    dataField: "Details",
                        //    caption: "Details"
                        //},
                        {
                            dataField: "Version",
                            caption: "Version"
                        },
                        //"ToolVersion",
                        //"EMUCable",
                        //"AECUCable",
                        //{
                        //    dataField: "MetaEditor_Ver",
                        //    caption: "MetaEditor Version"
                        //},
                        //{
                        //    dataField: "ProjectBuilder_Ver",
                        //    caption: "ProjectBuilder Version"
                        //},
                        //{
                        //    dataField: "Ascet_Ver",
                        //    caption: "Ascet Version"
                        //},
                        //{
                        //    dataField: "ProjectEditor_Ver",
                        //    caption: "ProjectEditor Version"
                        //}




                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_Project Details"
                //allowExportSelectedData: true
            }


        });
        counter++;
        counter_function();
        debugger;
    }
    //isProjExtracted = true;
    //button_change();



}
function OnErrorCall_d2_CMPNTuniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("Component Details error!", {
        globalPosition: "top center",
        className: "warn"
    });
}

function OnSuccess_d3_uniquedata(response) {
    debugger;
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d3").prop('hidden', false); $(".title_gridContainer_d3").prop('hidden', false);

        $(".gridContainer_d3").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true,
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "EB DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project", /*groupIndex: 0,*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_EB_Cards_EB5100",
                            caption: "EB5100"
                        },
                        {
                            dataField: "Kernel_EB_Cards_EB5200",
                            caption: "EB5200"
                        }

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_EB Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d3_uniquedata").prop('hidden', false); $(".title_gridContainer_d3_uniquedata").prop('hidden', false);

        $(".gridContainer_d3_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "EB DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project", /*groupIndex: 0,*/ },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_EB_Cards_EB5100",
                            caption: "EB5100"
                        },
                        {
                            dataField: "Kernel_EB_Cards_EB5200",
                            caption: "EB5200"
                        }

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_EB Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d3_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("EB error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d4_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d4").prop('hidden', false); $(".title_gridContainer_d4").prop('hidden', false);

        $(".gridContainer_d4").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true,
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "ES4441 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        "Project",
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },

                        {
                            dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441SN",
                            caption: "ES4441 SN"
                        },
                        {
                            caption: "ES4441 FW Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMain + "." + rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMajor + "." + rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMinor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true,

                        },
                        {
                            dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441HWRevision",
                            caption: "ES4441 HW Revision"
                        },
                        {
                            dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441HWVersion",
                            caption: "ES4441 HW Version"
                        }

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_ES4441 Details"
                //allowExportSelectedData: true
            }
        });

        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d4_uniquedata").prop('hidden', false); $(".title_gridContainer_d4_uniquedata").prop('hidden', false); $(".title_gridContainer_d4_uniquedata").prop('hidden', false);

        $(".gridContainer_d4_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            border: true,
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "ES4441 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441SN",
                            caption: "ES4441 SN"
                        },
                        {
                            caption: "ES4441 FW Version",
                            calculateCellValue: function (rowData) { return rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMain + "." + rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMajor + "." + rowData.Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441FWVersionMinor },
                            allowHeaderFiltering: true,
                            allowSorting: true,
                            allowFiltering: true,
                            allowGrouping: true,
                            allowHiding: true,

                        },
                        {
                            dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441HWRevision",
                            caption: "ES4441 HW Revision"
                        },
                        {
                            dataField: "Kernel_Component_FaultSimulationControl_ES4441_FW_ES4441HWVersion",
                            caption: "ES4441 HW Version"
                        }

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_ES4441 Details"
                //allowExportSelectedData: true
            }
        });

        counter++;
        counter_function();
    }
}
function OnErrorCall_d4_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("ES4441 error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d5_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d5").prop('hidden', false); $(".title_gridContainer_d5").prop('hidden', false);

        $(".gridContainer_d5").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_OTSO Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    // caption: "OTSO DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Component_IPB_TemperatureReceive_OTSO1Available",
                            caption: "OTSO1"
                        },
                        {
                            dataField: "Kernel_Component_IPB_TemperatureReceive_OTSO2Available",
                            caption: "OTSO2"


                        }]
                }]
        });

        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d5_uniquedata").prop('hidden', false); $(".title_gridContainer_d5_uniquedata").prop('hidden', false);

        $(".gridContainer_d5_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_OTSO Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    // caption: "OTSO DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Component_IPB_TemperatureReceive_OTSO1Available",
                            caption: "OTSO1"
                        },
                        {
                            dataField: "Kernel_Component_IPB_TemperatureReceive_OTSO2Available",
                            caption: "OTSO2"


                        }]
                }]
        });

        counter++;
        counter_function();
    }
}
function OnErrorCall_d5_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("OTSO error!", {
        globalPosition: "top center",
        className: "warn"
    });

}


function OnSuccess_d6_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d6").prop('hidden', false); $(".title_gridContainer_d6").prop('hidden', false);

        $(".gridContainer_d6").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_POWER SUPPLY Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    //caption: "POWER SUPPLY DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project" /*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Configuration",
                            caption: "PS Configuration"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_ECU",
                            caption: "PS ECU Factor"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_MR",
                            caption: "PS MR Factor"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_VR",
                            caption: "PS VR Factor"

                        }]
                }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d6_uniquedata").prop('hidden', false); $(".title_gridContainer_d6_uniquedata").prop('hidden', false);

        $(".gridContainer_d6_uniquedata").dxDataGrid({

            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_POWER SUPPLY Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    // caption: "POWER SUPPLY DETAILS",
                    alignment: "center",
                    //visible: false,

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Configuration",
                            caption: "PS Configuration"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_ECU",
                            caption: "PS ECU Factor"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_MR",
                            caption: "PS MR Factor"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_PSC_Power_Supply_Configuration_PS_Factor_VR",
                            caption: "PS VR Factor"

                        }]
                }]
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d6_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("POWER SUPPLY DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });

}


function OnSuccess_d7_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d7").prop('hidden', false); $(".title_gridContainer_d7").prop('hidden', false);

        $(".gridContainer_d7").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "BOB DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_SerialNumber",
                            caption: "BOB SN"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_DeviceRevision",
                            caption: "BOB Revision"

                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_BOB Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d7_uniquedata").prop('hidden', false); $(".title_gridContainer_d7_uniquedata").prop('hidden', false);

        $(".gridContainer_d7_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "BOB DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_SerialNumber",
                            caption: "BOB SN"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_DeviceRevision",
                            caption: "BOB Revision"

                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_BOB Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d7_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("BOB DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d8_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d8").prop('hidden', false); $(".title_gridContainer_d8").prop('hidden', false);

        $(".gridContainer_d8").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: true,
                fileName: "DiagnosticsGrid_BOB1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    caption: "BOB1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_SerialNumber",
                            caption: "BOB1 SNo"
                        }

                    ]
                }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d8_uniquedata").prop('hidden', false); $(".title_gridContainer_d8_uniquedata").prop('hidden', false);

        $(".gridContainer_d8_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: true,
                fileName: "DiagnosticsGrid_BOB1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    caption: "BOB1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_BreakOutBox_BOB_SerialNumber",
                            caption: "BOB1 SNo"
                        }

                    ]
                }]
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d8_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("BOB1 DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });

}


function OnSuccess_d9_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d9").prop('hidden', false); $(".title_gridContainer_d9").prop('hidden', false);

        $(".gridContainer_d9").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_IXXAT1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns:
                [
                    {
                        //caption: "IXXAT1 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "ModelSpecific_EID_NET_CAN_Settings_CAN_Settings_rtpc_ixxat_config ",
                                caption: "IXXAT1 EID"
                            }]
                    }]

        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d9_uniquedata").prop('hidden', false); $(".title_gridContainer_d9_uniquedata").prop('hidden', false);

        $(".gridContainer_d9_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_IXXAT1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns:
                [
                    {
                        //caption: "IXXAT1 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "ModelSpecific_EID_NET_CAN_Settings_CAN_Settings_rtpc_ixxat_config ",
                                caption: "IXXAT1 EID"
                            }]
                    }]

        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d9_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("IXXAT1 error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d10_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d10").prop('hidden', false); $(".title_gridContainer_d10").prop('hidden', false);

        $(".gridContainer_d10").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_IXXAT Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    //caption: "IXXAT DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "ModelSpecific_EID_NET_CAN_Settings_CAN_Settings_rtpc_ixxat_config",
                            caption: "IXXAT EID"
                        }]
                }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d10_uniquedata").prop('hidden', false); $(".title_gridContainer_d10_uniquedata").prop('hidden', false);

        $(".gridContainer_d10_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_IXXAT Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    //caption: "IXXAT DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "ModelSpecific_EID_NET_CAN_Settings_CAN_Settings_rtpc_ixxat_config",
                            caption: "IXXAT EID"
                        }]
                }]
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d10_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("IXXAT DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });

}



function OnSuccess_d11_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d11").prop('hidden', false); $(".title_gridContainer_d11").prop('hidden', false);

        $(".gridContainer_d11").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "APB DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "ModelSpecific_EID_Switch_APB_APB_Module_GIO2_Signature_GIO2",
                            caption: "APB EID"


                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_APB Details"
                //allowExportSelectedData: true
            }
        });

        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d11_uniquedata").prop('hidden', false); $(".title_gridContainer_d11_uniquedata").prop('hidden', false);

        $(".gridContainer_d11_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "APB DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project" /*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "ModelSpecific_EID_Switch_APB_APB_Module_GIO2_Signature_GIO2",
                            caption: "APB EID"


                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_APB Details"
                //allowExportSelectedData: true
            }
        });

        counter++;
        counter_function();
    }
}
function OnErrorCall_d11_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("APB DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d12_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d12").prop('hidden', false); $(".title_gridContainer_d12").prop('hidden', false);

        $(".gridContainer_d12").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_HAP Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    //caption: "HAP DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project" /*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_SerialNumber",
                            caption: "HAP SNo"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_DeviceRevision",
                            caption: "HAP Revision"

                        }]
                }]
        });

        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d12_uniquedata").prop('hidden', false); $(".title_gridContainer_d12_uniquedata").prop('hidden', false);

        $(".gridContainer_d12_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_HAP Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    //caption: "HAP DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project" /*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_SerialNumber",
                            caption: "HAP SNo"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_DeviceRevision",
                            caption: "HAP Revision"

                        }]
                }]
        });

        counter++;
        counter_function();
    }
}
function OnErrorCall_d12_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("HAP DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });

}


function OnSuccess_d13_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d13").prop('hidden', false); $(".title_gridContainer_d13").prop('hidden', false);

        $(".gridContainer_d13").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    caption: "HAP1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project" /*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },

                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_SerialNumber",
                            caption: "HAP SNo"
                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: true,
                fileName: "DiagnosticsGrid_HAP1 Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d13_uniquedata").prop('hidden', false); $(".title_gridContainer_d13_uniquedata").prop('hidden', false);

        $(".gridContainer_d13_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    caption: "HAP1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Harnesadapter_HAP_SerialNumber",
                            caption: "HAP SNo"
                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: true,
                fileName: "DiagnosticsGrid_HAP1 Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d13_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("HAP1 DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d14_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d14").prop('hidden', false); $(".title_gridContainer_d14").prop('hidden', false);

        $(".gridContainer_d14").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "CABLE DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project" /*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_SerialNumber",
                            caption: "Cable SN"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_DeviceRevision",
                            caption: "Cable Revision"


                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_CABLE Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d14_uniquedata").prop('hidden', false); $(".title_gridContainer_d14_uniquedata").prop('hidden', false);

        $(".gridContainer_d14_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "49vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "CABLE DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project" /*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_SerialNumber",
                            caption: "Cable SN"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_DeviceRevision",
                            caption: "Cable Revision"


                        }]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_CABLE Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d14_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("CABLE DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d15_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d15").prop('hidden', false); $(".title_gridContainer_d15").prop('hidden', false);

        $(".gridContainer_d15").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: true,
                fileName: "DiagnosticsGrid_CABLE1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    caption: "CABLE1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },

                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_SerialNumber",
                            caption: "Cable1 SNo"


                        }]
                }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d15_uniquedata").prop('hidden', false); $(".title_gridContainer_d15_uniquedata").prop('hidden', false);

        $(".gridContainer_d15_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: true,
                fileName: "DiagnosticsGrid_CABLE1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns: [

                {
                    caption: "CABLE1 DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Kernel_Loadbox_Card_ECC_Cable_CABLE_SerialNumber",
                            caption: "Cable1 SNo"


                        }]
                }]
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d15_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("CABLE1 DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });

}


function OnSuccess_d16_uniquedata(response) {
    var objdata = (response.data);
    debugger;
    if (sessions == "All") {

        $(".gridContainer_d16").prop('hidden', false); $(".title_gridContainer_d16").prop('hidden', false);

        $(".gridContainer_d16").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_ECC Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns:
                [
                    {
                        //caption: "ECC DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project" /*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_AddOn_Present",
                                caption: "AddOn Presence"

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_CARD_BoardType",
                                caption: "ECC Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_CARD_BoardRevision",
                                caption: "ECC Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_CARD_VER_TAG_ARRAY",
                                caption: "ECC Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_Serial_No",
                                caption: "ECC SNo"
                            },
                            {
                                caption: "ECC FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_ECC_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                caption: "ECC FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_ECC_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_ECC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_ECC_Calibration_Year },
                                caption: "ECC Calibration Date",
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                caption: "ECC NextCalibration Date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Year },
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                caption: "ECC Creation Date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_ECC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_ECC_Year_of_Creation },
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true,
                                allowReordering: true
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_BuildVersion",
                                caption: "ECC Build Version"

                            }]
                    }]

        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d16_uniquedata").prop('hidden', false); $(".title_gridContainer_d16_uniquedata").prop('hidden', false);

        $(".gridContainer_d16_uniquedata").dxDataGrid({


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_ECC Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,
            columns:
                [
                    {
                        //caption: "ECC DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_AddOn_Present",
                                caption: "AddOn Presence"

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_CARD_BoardType",
                                caption: "ECC Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_CARD_BoardRevision",
                                caption: "ECC Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_CARD_VER_TAG_ARRAY",
                                caption: "ECC Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_Serial_No",
                                caption: "ECC SNo"
                            },
                            {
                                caption: "ECC FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_ECC_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                caption: "ECC FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_ECC_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_ECC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_ECC_Calibration_Year },
                                caption: "ECC Calibration Date",
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                caption: "ECC NextCalibration Date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_ECC_Next_Calibration_Year },
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true
                            },
                            {
                                caption: "ECC Creation Date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_ECC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_ECC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_ECC_Year_of_Creation },
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true,
                                allowReordering: true
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_ECC_BuildVersion",
                                caption: "ECC Build Version"

                            }]
                    }]

        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d16_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("ECC error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d17_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d17").prop('hidden', false); $(".title_gridContainer_d17").prop('hidden', false);


        $(".gridContainer_d17").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },

            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_GIO1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "GIO1 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",

                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project" /*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_CARD_BoardType",
                                caption: "GIO1 Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_CARD_BoardRevision",
                                caption: "GIO1 Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_CARD_VER_TAG_ARRAY",
                                caption: "GIO1 Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_Serial_No",
                                caption: "GIO1 SNo"
                            },
                            {
                                caption: "GIO1 FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_GIO1_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true
                            },
                            {
                                caption: "GIO1 FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_GIO1_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true
                            },
                            {
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO1_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO1_Calibration_Year },
                                caption: "GIO1 Calibration Date",
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true

                            },
                            {
                                caption: "GIO1 NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true

                            },
                            {
                                caption: "GIO1 Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO1_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO1_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true,
                                allowReordering: true,
                                allowResizing: true,
                                allowSearch: true,
                                autoExpandGroup: true,
                                format: "shortDateShortTime",
                                editorOptions: { type: "datetime" },
                                value: Date


                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_BuildVersion",
                                caption: "GIO1 Build Version"
                            }]
                    }]

        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d17_uniquedata").prop('hidden', false); $(".title_gridContainer_d17_uniquedata").prop('hidden', false);


        $(".gridContainer_d17_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_GIO1 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "GIO1 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",

                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_CARD_BoardType",
                                caption: "GIO1 Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_CARD_BoardRevision",
                                caption: "GIO1 Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_CARD_VER_TAG_ARRAY",
                                caption: "GIO1 Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_Serial_No",
                                caption: "GIO1 SNo"
                            },
                            {
                                caption: "GIO1 FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_GIO1_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true
                            },
                            {
                                caption: "GIO1 FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_GIO1_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true
                            },
                            {
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO1_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO1_Calibration_Year },
                                caption: "GIO1 Calibration Date",
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true

                            },
                            {
                                caption: "GIO1 NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO1_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowGrouping: true,
                                allowFiltering: true

                            },
                            {
                                caption: "GIO1 Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO1_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO1_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO1_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true,
                                allowGrouping: true,
                                allowHiding: true,
                                allowReordering: true,
                                allowResizing: true,
                                allowSearch: true,
                                autoExpandGroup: true,
                                format: "shortDateShortTime",
                                editorOptions: { type: "datetime" },
                                value: Date


                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO1_BuildVersion",
                                caption: "GIO1 Build Version"
                            }]
                    }]

        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d17_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");


    $.notify("GIO1 error!", {
        globalPosition: "top center",
        className: "warn"
    });

}



function OnSuccess_d18_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d18").prop('hidden', false); $(".title_gridContainer_d18").prop('hidden', false);

        $(".gridContainer_d18").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_GIO2 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "GIO2 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_CARD_BoardType",
                                caption: "GIO2 Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_CARD_BoardRevision",
                                caption: "GIO2 Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_CARD_VER_TAG_ARRAY",
                                caption: "GIO2 Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_Serial_No",
                                caption: "GIO2 SNo"
                            },
                            {
                                caption: "GIO2 FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_GIO2_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "GIO2 FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_GIO2_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO2_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO2_Calibration_Year },
                                caption: "GIO2 Calibration Date",
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true


                            },
                            {
                                caption: "GIO2 NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "GIO2 Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO2_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO2_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_BuildVersion",
                                caption: "GIO2 Build Version"
                            }]
                    }]


        });

        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d18_uniquedata").prop('hidden', false); $(".title_gridContainer_d18_uniquedata").prop('hidden', false);

        $(".gridContainer_d18_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_GIO2 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "GIO2 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_CARD_BoardType",
                                caption: "GIO2 Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_CARD_BoardRevision",
                                caption: "GIO2 Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_CARD_VER_TAG_ARRAY",
                                caption: "GIO2 Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_Serial_No",
                                caption: "GIO2 SNo"
                            },
                            {
                                caption: "GIO2 FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_GIO2_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "GIO2 FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_GIO2_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO2_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO2_Calibration_Year },
                                caption: "GIO2 Calibration Date",
                                ////dataType: "datetime" "date",
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true


                            },
                            {
                                caption: "GIO2 NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_GIO2_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "GIO2 Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_GIO2_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO2_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_GIO2_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_GIO2_BuildVersion",
                                caption: "GIO2 Build Version"
                            }]
                    }]


        });

        counter++;
        counter_function();
    }
}
function OnErrorCall_d18_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("GIO2 error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d19_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d19").prop('hidden', false); $(".title_gridContainer_d19").prop('hidden', false);

        $(".gridContainer_d19").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },

            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_LDU Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        // caption: "LDU DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_CARD_BoardType",
                                caption: "LDU Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_CARD_BoardRevision",
                                caption: "LDU Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_CARD_VER_TAG_ARRAY",
                                caption: "LDU Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_Serial_No",
                                caption: "LDU SNo"
                            },
                            {
                                caption: "LDU FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_LDU_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "LDU FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_LDU_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "LDU Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_LDU_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_LDU_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "LDU NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "LDU Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_LDU_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_LDU_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_BuildVersion",
                                caption: "LDU Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d19_uniquedata").prop('hidden', false); $(".title_gridContainer_d19_uniquedata").prop('hidden', false);

        $(".gridContainer_d19_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_LDU Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "LDU DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_CARD_BoardType",
                                caption: "LDU Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_CARD_BoardRevision",
                                caption: "LDU Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_CARD_VER_TAG_ARRAY",
                                caption: "LDU Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_Serial_No",
                                caption: "LDU SNo"
                            },
                            {
                                caption: "LDU FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_LDU_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "LDU FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_LDU_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "LDU Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_LDU_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_LDU_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "LDU NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_LDU_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "LDU Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_LDU_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_LDU_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_LDU_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_LDU_BuildVersion",
                                caption: "LDU Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }



}
function OnErrorCall_d19_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("LDU error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d20_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d20").prop('hidden', false); $(".title_gridContainer_d20").prop('hidden', false);

        $(".gridContainer_d20").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_PSC Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "PSC DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_CARD_BoardType",
                                caption: "PSC Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_CARD_BoardRevision",
                                caption: "PSC Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_CARD_VER_TAG_ARRAY",
                                caption: "PSC Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_Serial_No",
                                caption: "PSC SNo"
                            },
                            {
                                caption: "PSC FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_PSC_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "PSC FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_PSC_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "PSC Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_PSC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_PSC_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "PSC NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "PSC Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_PSC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_PSC_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_BuildVersion",
                                caption: "PSC Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d20_uniquedata").prop('hidden', false); $(".title_gridContainer_d20_uniquedata").prop('hidden', false);

        $(".gridContainer_d20_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_PSC Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "PSC DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_CARD_BoardType",
                                caption: "PSC Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_CARD_BoardRevision",
                                caption: "PSC Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_CARD_VER_TAG_ARRAY",
                                caption: "PSC Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_Serial_No",
                                caption: "PSC SNo"
                            },
                            {
                                caption: "PSC FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_PSC_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "PSC FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_PSC_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "PSC Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_PSC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_PSC_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "PSC NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_PSC_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "PSC Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_PSC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_PSC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_PSC_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_PSC_BuildVersion",
                                caption: "PSC Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d20_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("PSC error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d21_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d21").prop('hidden', false); $(".title_gridContainer_d21").prop('hidden', false);

        $(".gridContainer_d21").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_VSC Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "VSC DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_UVRAddOnPresent",
                                caption: "AddOn Presence"

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_CARD_BoardType",
                                caption: "VSC Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_CARD_BoardRevision",
                                caption: "VSC Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_CARD_VER_TAG_ARRAY",
                                caption: "VSC Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_Serial_No",
                                caption: "VSC SNo"
                            },
                            {
                                caption: "VSC FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_VSC_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "VSC FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_VSC_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "VSC Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_VSC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_VSC_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "VSC NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "VSC Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_VSC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_VSC_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_BuildVersion",
                                caption: "VSC Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d21_uniquedata").prop('hidden', false); $(".title_gridContainer_d21_uniquedata").prop('hidden', false);

        $(".gridContainer_d21_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_VSC Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "VSC DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_UVRAddOnPresent",
                                caption: "AddOn Presence"

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_CARD_BoardType",
                                caption: "VSC Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_CARD_BoardRevision",
                                caption: "VSC Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_CARD_VER_TAG_ARRAY",
                                caption: "VSC Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_Serial_No",
                                caption: "VSC SNo"
                            },
                            {
                                caption: "VSC FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_VSC_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "VSC FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_VSC_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "VSC Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_VSC_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_VSC_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "VSC NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_VSC_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "VSC Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_VSC_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_VSC_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_VSC_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_VSC_BuildVersion",
                                caption: "VSC Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d21_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("VSC error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d22_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d22").prop('hidden', false); $(".title_gridContainer_d22").prop('hidden', false);

        $(".gridContainer_d22").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_WSS Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "WSS DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_CARD_BoardType",
                                caption: "WSS Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_CARD_BoardRevision",
                                caption: "WSS Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_CARD_VER_TAG_ARRAY",
                                caption: "WSS Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_Serial_No",
                                caption: "WSS SNo"
                            },
                            {
                                caption: "WSS FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_WSS_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_WSS_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "WSS NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "WSS Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_BuildVersion",
                                caption: "WSS Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d22_uniquedata").prop('hidden', false); $(".title_gridContainer_d22_uniquedata").prop('hidden', false);

        $(".gridContainer_d22_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_WSS Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "WSS DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_CARD_BoardType",
                                caption: "WSS Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_CARD_BoardRevision",
                                caption: "WSS Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_CARD_VER_TAG_ARRAY",
                                caption: "WSS Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_Serial_No",
                                caption: "WSS SNo"
                            },
                            {
                                caption: "WSS FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_WSS_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_WSS_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "WSS NextCalibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "WSS Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS_BuildVersion",
                                caption: "WSS Build Version"
                            }]
                    }]
        });
        counter++;
        counter_function();
    }
}
function OnErrorCall_d22_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("WSS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}



function OnSuccess_d23_uniquedata(response) {
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d23").prop('hidden', false); $(".title_gridContainer_d23").prop('hidden', false);

        $(".gridContainer_d23").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_WSS2 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "WSS2 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },

                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_CARD_BoardType",
                                caption: "WSS2 Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_CARD_BoardRevision",
                                caption: "WSS2 Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_CARD_VER_TAG_ARRAY",
                                caption: "WSS2 Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_Serial_No",
                                caption: "WSS2 SNo"
                            },
                            {
                                caption: "WSS2 FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_WSS2_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS2 FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_WSS2_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS2 Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS2_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS2_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "WSS2 NextCalibration Date",
                                ////dataType: "datetime" "date",
                                format: "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true


                            },
                            {
                                caption: "WSS2 Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS2_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS2_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_BuildVersion",
                                caption: "WSS2 Build Version"
                            }]
                    }]
        });
        debugger;
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d23_uniquedata").prop('hidden', false); $(".title_gridContainer_d23_uniquedata").prop('hidden', false);

        $(".gridContainer_d23_uniquedata").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns


            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {

                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_WSS2 Details"
                //allowExportSelectedData: true
            },
            dataSource: objdata,


            columns:
                [
                    {
                        //caption: "WSS2 DETAILS",
                        alignment: "center",

                        columns: [
                            "LC_Name",
                            {
                                dataField: "System_name",
                                caption: "PC Name"
                            },
                            { dataField: "Project"/*, groupIndex: 0*/ },
                            {
                                dataField: "Date", dataType: "date",
                                caption: "Date",
                                ////dataType: "datetime" "date"
                                dataType: "date"
                            },
                            {
                                dataField: "CreationDate", caption: "Time",

                                //dataType: "datetime" //"date"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_CARD_BoardType",
                                caption: "WSS2 Type"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_CARD_BoardRevision",
                                caption: "WSS2 Revision"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_CARD_VER_TAG_ARRAY",
                                caption: "WSS2 Card Version"
                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_Serial_No",
                                caption: "WSS2 SNo"
                            },
                            {
                                caption: "WSS2 FW Card Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Firmware_Card_Major + "." + rowData.Kernel_Loadbox_Card_WSS2_Firmware_Card_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS2 FW FPGA Version",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Firmware_FPGA_Major + "." + rowData.Kernel_Loadbox_Card_WSS2_Firmware_FPGA_Minor },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true
                            },
                            {
                                caption: "WSS2 Calibration Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS2_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS2_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                caption: "WSS2 NextCalibration Date",
                                ////dataType: "datetime" "date",
                                format: "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Day + "/" + rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Month + "/" + rowData.Kernel_Loadbox_Card_WSS2_Next_Calibration_Year },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true


                            },
                            {
                                caption: "WSS2 Creation Date",
                                ////dataType: "datetime" "date",
                                calculateCellValue: function (rowData) { return rowData.Kernel_Loadbox_Card_WSS2_Day_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS2_Month_of_Creation + "/" + rowData.Kernel_Loadbox_Card_WSS2_Year_of_Creation },
                                allowHeaderFiltering: true,
                                allowSorting: true,
                                allowFiltering: true

                            },
                            {
                                dataField: "Kernel_Loadbox_Card_WSS2_BuildVersion",
                                caption: "WSS2 Build Version"
                            }]
                    }]
        });
        debugger;
        counter++;
        counter_function();
    }
    //isWSSExtracted = true;
    //button_change();
    //debugger;
}
function OnErrorCall_d23_uniquedata(response) {
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");


    $.notify("WSS2 error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d24_uniquedata(response) {
    debugger;
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d24").prop('hidden', false); $(".title_gridContainer_d24").prop('hidden', false);

        $(".gridContainer_d24").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "DIAGNOSTIC TOOL VERSION DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "TKWinX",
                            encodeHtml: false,
                        },
                        {
                            dataField: "MM6",
                            encodeHtml: false,
                        },
                        {
                            dataField: "XFlash",
                            encodeHtml: false,
                        }
                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_DiagnosticTools Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d24_uniquedata").prop('hidden', false); $(".title_gridContainer_d24_uniquedata").prop('hidden', false);

        $(".gridContainer_d24_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "DIAGNOSTIC TOOL VERSION DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "TKWinX",
                            encodeHtml: false,
                        },
                        {
                            dataField: "MM6",
                            encodeHtml: false,
                        },
                        {
                            dataField: "XFlash",
                            encodeHtml: false,
                        }
                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_DiagnosticTools Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d24_uniquedata(response) {
    debugger;
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("Diagnostic Tools DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d25_uniquedata(response) {
    debugger;
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d25").prop('hidden', false); $(".title_gridContainer_d25").prop('hidden', false);

        $(".gridContainer_d25").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "MOTSIM DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        "Component_name", "Version", "MotsimType"
                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_Motsim Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d25_uniquedata").prop('hidden', false); $(".title_gridContainer_d25_uniquedata").prop('hidden', false);

        $(".gridContainer_d25_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "MOTSIM DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },
                        { dataField: "Project"/*, groupIndex: 0*/ },
                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        "Component_name", "Version", "MotsimType"
                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_Motsim Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d25_uniquedata(response) {
    debugger;
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("Motsim detail error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d26_uniquedata(response) {
    debugger;
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d26").prop('hidden', false); $(".title_gridContainer_d26").prop('hidden', false);

        $(".gridContainer_d26").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw",  //"32vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "VECTOR TOOL VERSION DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },

                        "Vector_HW_Name",
                        "Vector_DeviceSerialNumber",
                        {
                            dataField: "Vector_SW_Name",
                            encodeHtml: false,
                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Vector_SW_Version",
                            encodeHtml: false,
                            //dataType: "datetime" //"date"
                        },
                        //"Vector_License_Name"      ,
                        //"Vector_License_ID"        ,
                        //"Vector_HW_Name"           ,
                        //"Vector_LicenseMaxVersion" ,
                        //"Vector_DeviceSerialNumber",
                        //"Vector_LicenseType"  



                        //"Vector_SW_Name"            ,
                        //"Vector_SW_Version"         ,
                        {
                            dataField: "SP",
                            encodeHtml: false,
                        },
                        {
                            dataField: "Vector_License_Name",
                            encodeHtml: false
                        },
                        {
                            dataField: "Vector_LicenseMaxVersion",
                            encodeHtml: false
                        },
                        {
                            dataField: "FR_Vector_License",
                            encodeHtml: false
                        },
                        "FR",
                        {
                            dataField: "LIN_Vector_License",
                            encodehtml: false
                        },
                        "LIN",
                        {
                            dataField: "DIVA_Vector_License",
                            encodehtml: false
                        },
                        "DIVA",
                        {
                            dataField: "AMD_orXCP_Vector_License",
                            encodeHtml: false
                        },
                        "AMD_orXCP",
                        //{
                        //    datafield: "vector_piggy",
                        //    caption: "vector_piggy (vector device-application-bustype-channel)",
                        //    encodehtml: false
                        //},
                        {
                            caption: "Vector Piggy",
                            alignment: "center",
                            columns: [
                                {
                                    dataField: "Vector_Piggy_Device",
                                    caption: "Device",
                                    encodeHtml: false
                                },
                                {
                                    dataField: "Vector_Piggy_Application",
                                    caption: "Application",
                                    encodeHtml: false
                                },
                                {
                                    dataField: "Vector_Piggy_BusType",
                                    caption: "BusType",
                                    encodeHtml: false
                                },
                                {
                                    dataField: "Vector_Piggy_Channel",
                                    caption: "Channel",
                                    encodeHtml: false
                                }
                            ]
                        }

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_VectorTools Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        debugger;
        $(".gridContainer_d26_uniquedata").prop('hidden', false); $(".title_gridContainer_d26_uniquedata").prop('hidden', false);

        $(".gridContainer_d26_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },




            width: "98vw", //"32vw", //1590, //needed to allow horizontal scroll

            columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "VECTOR TOOL VERSION DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Vector_HW_Name",
                            encodeHtml: false
                        },
                        {
                            dataField: "Vector_DeviceSerialNumber",
                            encodeHtml: false
                        },
                        {
                            dataField: "Vector_SW_Name",
                            encodeHtml: false,
                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "Vector_SW_Version",
                            encodeHtml: false,
                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "SP",
                            encodeHtml: false,
                        },
                        {
                            dataField: "Vector_License_Name",
                            encodeHtml: false
                        },
                        {
                            dataField: "Vector_LicenseMaxVersion",
                            encodeHtml: false
                        },
                        {
                            dataField: "FR_Vector_License",
                            encodeHtml: false
                        },
                        "FR",
                        {
                            dataField: "LIN_Vector_License",
                            encodehtml: false
                        },
                        "LIN",
                        {
                            dataField: "DIVA_Vector_License",
                            encodehtml: false
                        },
                        "DIVA",
                        {
                            dataField: "AMD_orXCP_Vector_License",
                            encodeHtml: false
                        },
                        "AMD_orXCP",
                        //{
                        //    dataField: "Vector_Piggy",
                        //    caption: "Vector_Piggy (Vector Device-Application-BusType-Channel)",
                        //    encodeHtml: false
                        //},
                        {
                            caption: "Vector Piggy",
                            alignment: "center",
                            columns: [
                                {
                                    dataField: "Vector_Piggy_Device",
                                    caption: "Device",
                                    encodeHtml: false
                                },
                                {
                                    dataField: "Vector_Piggy_Application",
                                    caption: "Application",
                                    encodeHtml: false
                                },
                                {
                                    dataField: "Vector_Piggy_BusType",
                                    caption: "BusType",
                                    encodeHtml: false
                                },
                                {
                                    dataField: "Vector_Piggy_Channel",
                                    caption: "Channel",
                                    encodeHtml: false
                                }
                            ]
                        }

                        //"Vector_License_Name",
                        //"Vector_License_ID",
                        //"Vector_HW_Name",
                        //"Vector_LicenseMaxVersion",
                        //"Vector_DeviceSerialNumber",
                        //"Vector_LicenseType"       

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_VectorTools Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d26_uniquedata(response) {
    debugger;
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("Vector Tools DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}

function OnSuccess_d27_uniquedata(response) {
    debugger;
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d27").prop('hidden', false); $(".title_gridContainer_d27").prop('hidden', false);

        $(".gridContainer_d27").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "VEHICLE AND HYDRAULIC MODEL DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "ModelType",
                            caption: "ModelType"
                        },
                        {
                            dataField: "Component_name",
                            caption: "Component Name"
                        },

                        {
                            dataField: "Version",
                            caption: "Version"
                        },

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_VDM HYM Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d27_uniquedata").prop('hidden', false); $(".title_gridContainer_d27_uniquedata").prop('hidden', false);

        $(".gridContainer_d27_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },

            //width: "32vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "VEHICLE AND HYDRAULIC MODEL DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        {
                            dataField: "ModelType",
                            caption: "ModelType"
                        },
                        {
                            dataField: "Component_name",
                            caption: "Component Name"
                        },

                        {
                            dataField: "Version",
                            caption: "Version"
                        },

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_VDM HYM Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d27_uniquedata(response) {
    debugger;
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("VDM and HYM DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function OnSuccess_d28_uniquedata(response) {
    debugger;
    var objdata = (response.data);
    if (sessions == "All") {

        $(".gridContainer_d28").prop('hidden', false); $(".title_gridContainer_d28").prop('hidden', false);

        $(".gridContainer_d28").dxDataGrid({
            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },
            width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    //caption: "IIS BOX DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        //{
                        //    dataField: "ModelType",
                        //    caption: "ModelType"
                        //},
                        {
                            dataField: "Component_name",
                            caption: "IIS Component"
                        },

                        {
                            dataField: "Version",
                            caption: "Version"
                        },

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_IIS Box Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }
    else {
        $(".gridContainer_d28_uniquedata").prop('hidden', false); $(".title_gridContainer_d28_uniquedata").prop('hidden', false);

        $(".gridContainer_d28_uniquedata").dxDataGrid({

            scrolling: {
                columnRenderingMode: 'virtual',
            },
            paging: {
                enabled: true,
            },

            width: "98vw", //1590, //needed to allow horizontal scroll

            // columnAutoWidth: true, //needed to allow horizontal scroll - column area expanding when there are more columns instead of fixed area with conjusted columns

            allowColumnReordering: true, grouping: { autoExpandAll: false, }, groupPanel: { visible: true, },
            allowColumnResizing: true,
            columnChooser: {
                enabled: true
            },
            showColumnLines: true,
            showRowLines: true,
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            filterRow: {
                visible: true

            },
            headerFilter: {
                visible: true,
                applyFilter: "auto"
            },
            selection: {
                applyFilter: "auto"
            },

            paging: {
                pageSize: 5
            },
            searchPanel: {
                visible: true,
                width: 240,
                placeholder: "Search..."
            },
            dataSource: objdata,
            columns: [
                {
                    // caption: "IIS BOX DETAILS",
                    alignment: "center",

                    columns: [
                        "LC_Name",
                        {
                            dataField: "System_name",
                            caption: "PC Name"
                        },

                        {
                            dataField: "Date", dataType: "date",
                            caption: "Date",
                            ////dataType: "datetime" "date"
                        },
                        {
                            dataField: "CreationDate", caption: "Time",

                            //dataType: "datetime" //"date"
                        },
                        //{
                        //    dataField: "ModelType",
                        //    caption: "ModelType"
                        //},
                        {
                            dataField: "Component_name",
                            caption: "IIS Component"
                        },

                        {
                            dataField: "Version",
                            caption: "Version"
                        },

                    ]
                }],
            //selection: {
            //    mode: "multiple"
            //},
            export: {
                enabled: false,
                fileName: "DiagnosticsGrid_IIS Box Details"
                //allowExportSelectedData: true
            }
        });
        counter++;
        counter_function();
    }

}
function OnErrorCall_d28_uniquedata(response) {
    debugger;
    var str = "Try Again";
    var result = str.bold();
    genText.innerHTML = result;
    $("#genSpinner").removeClass("fa fa-spinner fa-spin");

    $.notify("IIS Box DETAILS error!", {
        globalPosition: "top center",
        className: "warn"
    });
}


function button_change() {
    debugger;
    if (isProjExtracted == true && isWSSExtracted == true) {
        var str = "Get LC info";
        var result = str.bold();
        genText.innerHTML = result;
        $("#genSpinner").removeClass("fa fa-spinner fa-spin");


        $.notify("Datagrids are successfully loaded!", {
            globalPosition: "top center",
            className: "success"
        });
        debugger;

        isWSSExtracted = false;
        isProjExtracted = false;
    }
    debugger;
}

$(function () {

    $("#StartTime").datepicker();
    $("#EndTime").datepicker();
});


$(function () {
    var create = document.querySelector('.create');
    var genText = document.querySelector("#genText");
    var genSpinner = document.querySelector("#genSpinner");
    create.addEventListener("click", function () {
        if (validatepage()) {
            var str = "Please Wait...  ";
            var result = str.bold();
            genText.innerHTML = result;

            genSpinner.classList.add('fa');
            genSpinner.classList.add('fa-spinner');
            genSpinner.classList.add('fa-pulse');

        }

    });

});


function exportGrids() {
    var today = new Date();
    var dataGrid = [];
    //var dataGrid1, dataGrid2, dataGrid3, dataGrid4, dataGrid5, dataGrid6, dataGrid7, dataGrid8, dataGrid10, dataGrid11,
    //    dataGrid12, dataGrid13, dataGrid14, dataGrid15, dataGrid16, dataGrid17, dataGrid18, dataGrid19, dataGrid20,
    debugger;
    if (sessions == "Latest") {
        if (HWflag == true)
            dataGrid[0] = $(".gridContainer_d1_uniquedata").dxDataGrid("instance");
        if (Projflag == true)
            dataGrid[1] = $(".gridContainer_d2_uniquedata").dxDataGrid("instance");


        if (equipments != undefined && equipments.includes('EB'))
            dataGrid[2] = $(".gridContainer_d3_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('ES4441'))
            dataGrid[3] = $(".gridContainer_d4_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('OTSO'))
            dataGrid[4] = $(".gridContainer_d5_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Power Supply'))
            dataGrid[5] = $(".gridContainer_d6_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('BOB'))
            dataGrid[6] = $(".gridContainer_d7_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('BOB1'))
            dataGrid[7] = $(".gridContainer_d8_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('IXXAT1'))
            dataGrid[8] = $(".gridContainer_d9_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('HAP'))
            dataGrid[9] = $(".gridContainer_d12_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('HAP1'))
            dataGrid[10] = $(".gridContainer_d13_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('IXXAT'))
            dataGrid[11] = $(".gridContainer_d10_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Cable'))
            dataGrid[12] = $(".gridContainer_d14_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Cable1'))
            dataGrid[13] = $(".gridContainer_d15_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('APB'))
            dataGrid[14] = $(".gridContainer_d11_uniquedata").dxDataGrid("instance");

        if (cards != undefined && cards.includes('ECC'))
            dataGrid[15] = $(".gridContainer_d16_uniquedata").dxDataGrid("instance");
        if (cards != undefined && cards.includes('GIO1'))
            dataGrid[16] = $(".gridContainer_d17_uniquedata").dxDataGrid("instance");
        if (cards != undefined && cards.includes('GIO2'))
            dataGrid[17] = $(".gridContainer_d18_uniquedata").dxDataGrid("instance");
        if (cards != undefined && cards.includes('LDU'))
            dataGrid[18] = $(".gridContainer_d19_uniquedata").dxDataGrid("instance");
        if (cards != undefined && cards.includes('PSC'))
            dataGrid[19] = $(".gridContainer_d20_uniquedata").dxDataGrid("instance");
        if (cards != undefined && cards.includes('VSC'))
            dataGrid[20] = $(".gridContainer_d21_uniquedata").dxDataGrid("instance");
        if (cards != undefined && cards.includes('WSS'))
            dataGrid[21] = $(".gridContainer_d22_uniquedata").dxDataGrid("instance");
        if (cards != undefined && cards.includes('WSS2'))
            dataGrid[22] = $(".gridContainer_d23_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Component Info'))
            dataGrid[23] = $(".gridContainer_d2cmpnt_uniquedata").dxDataGrid("instance");

        if (equipments != undefined && equipments.includes('Diagnostic Tools'))
            dataGrid[24] = $(".gridContainer_d24_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Motsim'))
            dataGrid[25] = $(".gridContainer_d25_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Vector Tools'))
            dataGrid[26] = $(".gridContainer_d26_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('VDM and HYM'))
            dataGrid[27] = $(".gridContainer_d27_uniquedata").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('IIS Box'))
            dataGrid[28] = $(".gridContainer_d28_uniquedata").dxDataGrid("instance");

        //dataGrid[2] = $(".gridContainer_d3_uniquedata").dxDataGrid("instance");
        //dataGrid[3] = $(".gridContainer_d4_uniquedata").dxDataGrid("instance");
        //dataGrid[4] = $(".gridContainer_d5_uniquedata").dxDataGrid("instance");
        //dataGrid[5] = $(".gridContainer_d6_uniquedata").dxDataGrid("instance");
        //dataGrid[6] = $(".gridContainer_d7_uniquedata").dxDataGrid("instance");
        //dataGrid[7] = $(".gridContainer_d8_uniquedata").dxDataGrid("instance");
        //dataGrid[8] = $(".gridContainer_d9_uniquedata").dxDataGrid("instance");
        //dataGrid[9] = $(".gridContainer_d12_uniquedata").dxDataGrid("instance");
        //dataGrid[10] = $(".gridContainer_d13_uniquedata").dxDataGrid("instance");
        //dataGrid[11] = $(".gridContainer_d10_uniquedata").dxDataGrid("instance");
        //dataGrid[12] = $(".gridContainer_d14_uniquedata").dxDataGrid("instance");
        //dataGrid[13] = $(".gridContainer_d15_uniquedata").dxDataGrid("instance");
        //dataGrid[14] = $(".gridContainer_d11_uniquedata").dxDataGrid("instance");
        //dataGrid[15] = $(".gridContainer_d16_uniquedata").dxDataGrid("instance");
        //dataGrid[16] = $(".gridContainer_d17_uniquedata").dxDataGrid("instance");
        //dataGrid[17] = $(".gridContainer_d18_uniquedata").dxDataGrid("instance");
        //dataGrid[18] = $(".gridContainer_d19_uniquedata").dxDataGrid("instance");
        //dataGrid[19] = $(".gridContainer_d20_uniquedata").dxDataGrid("instance");
        //dataGrid[20] = $(".gridContainer_d21_uniquedata").dxDataGrid("instance");
        //dataGrid[21] = $(".gridContainer_d22_uniquedata").dxDataGrid("instance");
        //dataGrid[22] = $(".gridContainer_d23_uniquedata").dxDataGrid("instance");
    }
    else {
        if (HWflag == true)
            dataGrid[0] = $(".gridContainer_d1").dxDataGrid("instance");
        if (Projflag == true)
            dataGrid[1] = $(".gridContainer_d2").dxDataGrid("instance");

        if (equipments != undefined && equipments.includes('EB'))
            dataGrid[2] = $(".gridContainer_d3").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('ES4441'))
            dataGrid[3] = $(".gridContainer_d4").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('OTSO'))
            dataGrid[4] = $(".gridContainer_d5").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Power Supply'))
            dataGrid[5] = $(".gridContainer_d6").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('BOB'))
            dataGrid[6] = $(".gridContainer_d7").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('BOB1'))
            dataGrid[7] = $(".gridContainer_d8").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('IXXAT1'))
            dataGrid[8] = $(".gridContainer_d9").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('HAP'))
            dataGrid[9] = $(".gridContainer_d12").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('HAP1'))
            dataGrid[10] = $(".gridContainer_d13").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('IXXAT'))
            dataGrid[11] = $(".gridContainer_d10").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Cable'))
            dataGrid[12] = $(".gridContainer_d14").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Cable1'))
            dataGrid[13] = $(".gridContainer_d15").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('APB'))
            dataGrid[14] = $(".gridContainer_d11").dxDataGrid("instance");
        if (cards != undefined && cards.includes('ECC'))
            dataGrid[15] = $(".gridContainer_d16").dxDataGrid("instance");
        if (cards != undefined && cards.includes('GIO1'))
            dataGrid[16] = $(".gridContainer_d17").dxDataGrid("instance");
        if (cards != undefined && cards.includes('GIO2'))
            dataGrid[17] = $(".gridContainer_d18").dxDataGrid("instance");
        if (cards != undefined && cards.includes('LDU'))
            dataGrid[18] = $(".gridContainer_d19").dxDataGrid("instance");
        if (cards != undefined && cards.includes('PSC'))
            dataGrid[19] = $(".gridContainer_d20").dxDataGrid("instance");
        if (cards != undefined && cards.includes('VSC'))
            dataGrid[20] = $(".gridContainer_d21").dxDataGrid("instance");
        if (cards != undefined && cards.includes('WSS'))
            dataGrid[21] = $(".gridContainer_d22").dxDataGrid("instance");
        if (cards != undefined && cards.includes('WSS2'))
            dataGrid[22] = $(".gridContainer_d23").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Component Info'))
            dataGrid[23] = $(".gridContainer_d2cmpnt").dxDataGrid("instance");

        if (equipments != undefined && equipments.includes('Diagnostic Tools'))
            dataGrid[24] = $(".gridContainer_d24").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Motsim'))
            dataGrid[25] = $(".gridContainer_d25").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('Vector Tools'))
            dataGrid[26] = $(".gridContainer_d26").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('VDM and HYM'))
            dataGrid[27] = $(".gridContainer_d27").dxDataGrid("instance");
        if (equipments != undefined && equipments.includes('IIS Box'))
            dataGrid[28] = $(".gridContainer_d28").dxDataGrid("instance");

        //dataGrid[0] = $(".gridContainer_d1").dxDataGrid("instance");
        //dataGrid[1] = $(".gridContainer_d2").dxDataGrid("instance");
        //dataGrid[2] = $(".gridContainer_d3").dxDataGrid("instance");
        //dataGrid[3] = $(".gridContainer_d4").dxDataGrid("instance");
        //dataGrid[4] = $(".gridContainer_d5").dxDataGrid("instance");
        //dataGrid[5] = $(".gridContainer_d6").dxDataGrid("instance");
        //dataGrid[6] = $(".gridContainer_d7").dxDataGrid("instance");
        //dataGrid[7] = $(".gridContainer_d8").dxDataGrid("instance");
        //dataGrid[8] = $(".gridContainer_d9").dxDataGrid("instance");
        //dataGrid[9] = $(".gridContainer_d12").dxDataGrid("instance");
        //dataGrid[10] = $(".gridContainer_d13").dxDataGrid("instance");
        //dataGrid[11] = $(".gridContainer_d10").dxDataGrid("instance");
        //dataGrid[12] = $(".gridContainer_d14").dxDataGrid("instance");
        //dataGrid[13] = $(".gridContainer_d15").dxDataGrid("instance");
        //dataGrid[14] = $(".gridContainer_d11").dxDataGrid("instance");
        //dataGrid[15] = $(".gridContainer_d16").dxDataGrid("instance");
        //dataGrid[16] = $(".gridContainer_d17").dxDataGrid("instance");
        //dataGrid[17] = $(".gridContainer_d18").dxDataGrid("instance");
        //dataGrid[18] = $(".gridContainer_d19").dxDataGrid("instance");
        //dataGrid[19] = $(".gridContainer_d20").dxDataGrid("instance");
        //dataGrid[20] = $(".gridContainer_d21").dxDataGrid("instance");
        //dataGrid[21] = $(".gridContainer_d22").dxDataGrid("instance");
        //dataGrid[22] = $(".gridContainer_d23").dxDataGrid("instance");


    }


    var workbook = new ExcelJS.Workbook();
    var d1sheet = workbook.addWorksheet("Query Info");

    var d2sheet, d3sheet, d4sheet, d5sheet, d6sheet, d7sheet, d8sheet, d9sheet, d10sheet, d11sheet,
        d11sheet, d12sheet, d13sheet, d14sheet, d15sheet, d16sheet, d17sheet,
        d18sheet, d19sheet, d20sheet, d21sheet, d21sheet, d22sheet, d23sheet, d24sheet, d25sheet, d26sheet, d27sheet, d28sheet, d29sheet,
        d30sheet;
    debugger;
    if (HWflag == true)
        d2sheet = workbook.addWorksheet("HWDescription");
    if (Projflag == true)
        d3sheet = workbook.addWorksheet("PrjDescription");


    if (equipments != undefined && equipments.includes('EB'))
        d4sheet = workbook.addWorksheet("EB");
    if (equipments != undefined && equipments.includes('ES4441'))
        d5sheet = workbook.addWorksheet("ES4441");
    if (equipments != undefined && equipments.includes('OTSO'))
        d6sheet = workbook.addWorksheet("OTSO");
    if (equipments != undefined && equipments.includes('Power Supply'))
        d7sheet = workbook.addWorksheet("Power Supply");
    if (equipments != undefined && equipments.includes('BOB'))
        d8sheet = workbook.addWorksheet("BOB");
    if (equipments != undefined && equipments.includes('BOB1'))
        d9sheet = workbook.addWorksheet("BOB1");
    if (equipments != undefined && equipments.includes('IXXAT1'))
        d10sheet = workbook.addWorksheet("IXXAT1");
    if (equipments != undefined && equipments.includes('HAP'))
        d11sheet = workbook.addWorksheet("HAP");
    if (equipments != undefined && equipments.includes('HAP1'))
        d12sheet = workbook.addWorksheet("HAP1");
    if (equipments != undefined && equipments.includes('IXXAT'))
        d13sheet = workbook.addWorksheet("IXXAT");
    if (equipments != undefined && equipments.includes('Cable'))
        d14sheet = workbook.addWorksheet("Cable");
    if (equipments != undefined && equipments.includes('Cable1'))
        d15sheet = workbook.addWorksheet("Cable1");
    if (equipments != undefined && equipments.includes('APB'))
        d16sheet = workbook.addWorksheet("APB");
    if (cards != undefined && cards.includes('ECC'))
        d17sheet = workbook.addWorksheet("ECC");
    if (cards != undefined && cards.includes('GIO1'))
        d18sheet = workbook.addWorksheet("GIO1");
    if (cards != undefined && cards.includes('GIO2'))
        d19sheet = workbook.addWorksheet("GIO2");
    if (cards != undefined && cards.includes('LDU'))
        d20sheet = workbook.addWorksheet("LDU");
    if (cards != undefined && cards.includes('PSC'))
        d21sheet = workbook.addWorksheet("PSC");
    if (cards != undefined && cards.includes('VSC'))
        d22sheet = workbook.addWorksheet("VSC");
    if (cards != undefined && cards.includes('WSS'))
        d23sheet = workbook.addWorksheet("WSS");
    if (cards != undefined && cards.includes('WSS2'))
        d24sheet = workbook.addWorksheet("WSS2");
    if (equipments != undefined && equipments.includes('Component Info'))
        d25sheet = workbook.addWorksheet("Component Info");

    if (equipments != undefined && equipments.includes('Diagnostic Tools'))
        d26sheet = workbook.addWorksheet("Diagnostic Tools");
    if (equipments != undefined && equipments.includes('Motsim'))
        d27sheet = workbook.addWorksheet("Motsim");
    if (equipments != undefined && equipments.includes('Vector Tools'))
        d28sheet = workbook.addWorksheet("Vector Tools");
    if (equipments != undefined && equipments.includes('VDM and HYM'))
        d29sheet = workbook.addWorksheet("Vehicle and Hydraulic Models");
    if (equipments != undefined && equipments.includes('IIS Box'))
        d30sheet = workbook.addWorksheet("IIS Box");
    d1sheet.columns = [
        { width: 10 }, { width: 10 }, { width: 10 }, { width: 10 }, { width: 10 }, { width: 10 }, { width: 10 }, { width: 80 }
    ];
    d1sheet.getRow(4).getCell(8).value = "Query Information";
    d1sheet.getRow(4).getCell(8).font = { bold: true, size: 25, underline: "double" };
    d1sheet.getRow(4).height = 70;

    if (cards == undefined || cards == "")
        cards = ' - ';
    if (equipments == undefined || equipments == "")
        equipments = ' - ';

    d1sheet.getRow(7).getCell(8).value = 'Start Date: ' + sTime;
    d1sheet.getRow(8).getCell(8).value = 'End Date: ' + eTime;
    d1sheet.getRow(9).getCell(8).value = 'Location: ' + locations;
    d1sheet.getRow(10).getCell(8).value = 'Lab IDs: ' + labname;
    d1sheet.getRow(11).getCell(8).value = 'Cards: ' + cards;
    d1sheet.getRow(12).getCell(8).value = 'Equipments: ' + equipments;
    d1sheet.getRow(13).getCell(8).value = 'Sessions: ' + sessions;

    d1sheet.getRow(14).getCell(8).value = "Date of Report Generation: " + today.getDate() + '/' + (today.getMonth() + 1) + '/' + today.getFullYear();
    // d1sheet.getRow(11).getCell(8).value = today.getDate() + '/' + (today.getMonth() + 1) + '/' + today.getFullYear();

    for (var j = 7; j <= 14; j++) {

        d1sheet.getRow(j).width = 1000;
        d1sheet.getRow(j).font = { size: 15 };
        d1sheet.getRow(j).getCell(8).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '99CCFF' },

        };
        d1sheet.getRow(j).getCell(8).border = {
            top: { style: 'double', color: { argb: '0000000' } },
            left: { style: 'double', color: { argb: '00000000' } },
            bottom: { style: 'double', color: { argb: '00000000' } },
            right: { style: 'double', color: { argb: '00000000' } }
        };



    }



    debugger;
    function setAlternatingRowsBackground(gridCell, excelCell) {

        //dark blue bg color for header
        if (gridCell.rowType === 'header') {

            excelCell.border = {

                //top: { style: 'solid', color: { argb: '0000000' } },
                //left: { style: 'solid', color: { argb: '00000000' } },
                bottom: { style: 'thin', color: { argb: 'FFFFFFFF' } },
                //right: { style: 'solid', color: { argb: 'FFFFFFFF' } }
            };
            excelCell.font = {
                color: { argb: 'FFFFFFFF' },
                bold: true
            };
            excelCell.fill = {
                type: 'pattern', pattern: 'solid', fgColor: { argb: '2D7CBD' }, bgColor: { argb: '2D7CBD' },

            };
        }
        if (gridCell.rowType === 'data') {
            //Diagnostic Tool Versions data - if many versions present, show in new lines (and remove break line provided for showing in next lines in UI)
            if (gridCell.column.dataField === 'TKWinX') {
                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'MM6') {
                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'XFlash') {
                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            //Vector Tool Versions data - if many versions present, show in new lines (and remove break line provided for showing in next lines in UI)
            if (gridCell.column.dataField === 'Vector_SW_Version') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'Vector_SW_Name') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'SP') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }


            if (gridCell.column.dataField === 'Vector_HW_Name') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'FR_Vector_License') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }



            if (gridCell.column.dataField === 'Vector_DeviceSerialNumber') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'Vector_License_Name') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }

            if (gridCell.column.dataField === 'Vector_LicenseMaxVersion') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'LIN_Vector_License') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }

            if (gridCell.column.dataField === 'DIVA_Vector_License') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            if (gridCell.column.dataField === 'AMD_orXCP_Vector_License') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }
            //if (gridCell.column.dataField === 'Vector_Piggy') {

            //    excelCell.value = gridCell.value.replaceAll("<br/>", "");
            //}
            if (gridCell.column.dataField === 'Vector_Piggy_Device') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            } if (gridCell.column.dataField === 'Vector_Piggy_Application') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            } if (gridCell.column.dataField === 'Vector_Piggy_BusType') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            } if (gridCell.column.dataField === 'Vector_Piggy_Channel') {

                excelCell.value = gridCell.value.replaceAll("<br/>", "");
            }



            //excel formatting
            excelCell.alignment = { wrapText: true };
            excelCell.border = {

                //top: { style: 'solid', color: { argb: '0000000' } },
                //left: { style: 'solid', color: { argb: '00000000' } },
                bottom: { style: 'thin', color: { argb: '2B78B7' } },
                //right: { style: 'solid', color: { argb: 'FFFFFFFF' } }
            };

            //light blue bg color for alternate rows
            if (excelCell.fullAddress.row % 2 != 0) {
                excelCell.fill = {
                    type: 'pattern', pattern: 'solid', fgColor: { argb: 'DDEBF7' }, bgColor: { argb: 'DDEBF7' },

                };
            }

            //if (!excelCell.border) {
            //    excelCell.border = {};
            //}
            //Object.assign(excelCell.border, { bottom: borderStylePattern });

            //excelCell.border = {
            //    type: 'pattern', pattern: 'solid', fgColor: { argb: '2B78B7' }, bgColor: { argb: '2B78B7' },

            //};

        }

    }

    //function VDMandHYM_Export() {
    //    debugger;
    //    if (equipments != undefined && equipments.includes('VDM and HYM')) {
    //        d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
    //        d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //        return DevExpress.excelExporter.exportDataGrid({
    //            worksheet: d29sheet,
    //            component: dataGrid[27],
    //            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

    //        });
    //    }
    //}
    debugger;
    if (HWflag == true) {
        d2sheet.getRow(1).getCell(1).value = "HWDescription";
        d2sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

        DevExpress.excelExporter.exportDataGrid({
            worksheet: d2sheet,
            component: dataGrid[0],
            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

        })
            //.then(function (dataGridRange) {
            //    // See border - https://github.com/exceljs/exceljs#borders for more details
            //    setBorders(dataGrid[0], d2sheet, dataGridRange);
            //    return Promise.resolve();
            //})
            .then(
                function () {
                    if (Projflag == true) {
                        d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                        d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d3sheet,
                            component: dataGrid[1],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }


                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Component Info')) {
                        d25sheet.getRow(1).getCell(1).value = "Component Info";
                        d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d25sheet,
                            component: dataGrid[23],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('EB')) {
                        d4sheet.getRow(1).getCell(1).value = "EB";
                        d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d4sheet,
                            component: dataGrid[2],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('ES4441')) {
                        d5sheet.getRow(1).getCell(1).value = "ES4441";
                        d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d5sheet,
                            component: dataGrid[3],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('OTSO')) {
                        d6sheet.getRow(1).getCell(1).value = "OTSO";
                        d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d6sheet,
                            component: dataGrid[4],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Power Supply')) {
                        d7sheet.getRow(1).getCell(1).value = "Power Supply";
                        d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d7sheet,
                            component: dataGrid[5],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('BOB')) {
                        d8sheet.getRow(1).getCell(1).value = "BOB";
                        d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d8sheet,
                            component: dataGrid[6],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('BOB1')) {
                        d9sheet.getRow(1).getCell(1).value = "BOB1";
                        d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d9sheet,
                            component: dataGrid[7],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('IXXAT1')) {
                        d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                        d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d10sheet,
                            component: dataGrid[8],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('HAP')) {
                        d11sheet.getRow(1).getCell(1).value = "HAP";
                        d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d11sheet,
                            component: dataGrid[9],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('HAP1')) {
                        d12sheet.getRow(1).getCell(1).value = "HAP1";
                        d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d12sheet,
                            component: dataGrid[10],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('IXXAT')) {
                        d13sheet.getRow(1).getCell(1).value = "IXXAT";
                        d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d13sheet,
                            component: dataGrid[11],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Cable')) {
                        d14sheet.getRow(1).getCell(1).value = "Cable";
                        d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d14sheet,
                            component: dataGrid[12],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Cable1')) {
                        d15sheet.getRow(1).getCell(1).value = "Cable1";
                        d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d15sheet,
                            component: dataGrid[13],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('APB')) {
                        d16sheet.getRow(1).getCell(1).value = "APB";
                        d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d16sheet,
                            component: dataGrid[14],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('ECC')) {
                        d17sheet.getRow(1).getCell(1).value = "ECC";
                        d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d17sheet,
                            component: dataGrid[15],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('GIO1')) {
                        d18sheet.getRow(1).getCell(1).value = "GIO1";
                        d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d18sheet,
                            component: dataGrid[16],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('GIO2')) {
                        d19sheet.getRow(1).getCell(1).value = "GIO2";
                        d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d19sheet,
                            component: dataGrid[17],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('LDU')) {
                        d20sheet.getRow(1).getCell(1).value = "LDU";
                        d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d20sheet,
                            component: dataGrid[18],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('PSC')) {
                        d21sheet.getRow(1).getCell(1).value = "PSC";
                        d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d21sheet,
                            component: dataGrid[19],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('VSC')) {
                        d22sheet.getRow(1).getCell(1).value = "VSC";
                        d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d22sheet,
                            component: dataGrid[20],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('WSS')) {
                        d23sheet.getRow(1).getCell(1).value = "WSS";
                        d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d23sheet,
                            component: dataGrid[21],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('WSS2')) {
                        d24sheet.getRow(1).getCell(1).value = "WSS2";
                        d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d24sheet,
                            component: dataGrid[22],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })

            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                        d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                        d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d26sheet,
                            component: dataGrid[24],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })

            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Vector Tools')) {
                        d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                        d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d28sheet,
                            component: dataGrid[26],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('VDM and HYM')) {
                        d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                        d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d29sheet,
                            component: dataGrid[27],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }
                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('IIS Box')) {
                        d30sheet.getRow(1).getCell(1).value = "IIS Box";
                        d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d30sheet,
                            component: dataGrid[28],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }
                })
            .then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                });
            });
    }


    else if (Projflag == true) {
        d3sheet.getRow(1).getCell(1).value = "PrjDescription";
        d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };



        DevExpress.excelExporter.exportDataGrid({
            worksheet: d3sheet,
            component: dataGrid[1],
            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

        })

            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Component Info')) {
                        d25sheet.getRow(1).getCell(1).value = "Component Info";
                        d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d25sheet,
                            component: dataGrid[23],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('EB')) {
                        d4sheet.getRow(1).getCell(1).value = "EB";
                        d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d4sheet,
                            component: dataGrid[2],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('ES4441')) {
                        d5sheet.getRow(1).getCell(1).value = "ES4441";
                        d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d5sheet,
                            component: dataGrid[3],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('OTSO')) {
                        d6sheet.getRow(1).getCell(1).value = "OTSO";
                        d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d6sheet,
                            component: dataGrid[4],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Power Supply')) {
                        d7sheet.getRow(1).getCell(1).value = "Power Supply";
                        d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d7sheet,
                            component: dataGrid[5],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('BOB')) {
                        d8sheet.getRow(1).getCell(1).value = "BOB";
                        d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d8sheet,
                            component: dataGrid[6],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('BOB1')) {
                        d9sheet.getRow(1).getCell(1).value = "BOB1";
                        d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d9sheet,
                            component: dataGrid[7],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('IXXAT1')) {
                        d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                        d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d10sheet,
                            component: dataGrid[8],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('HAP')) {
                        d11sheet.getRow(1).getCell(1).value = "HAP";
                        d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d11sheet,
                            component: dataGrid[9],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('HAP1')) {
                        d12sheet.getRow(1).getCell(1).value = "HAP1";
                        d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d12sheet,
                            component: dataGrid[10],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('IXXAT')) {
                        d13sheet.getRow(1).getCell(1).value = "IXXAT";
                        d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d13sheet,
                            component: dataGrid[11],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Cable')) {
                        d14sheet.getRow(1).getCell(1).value = "Cable";
                        d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d14sheet,
                            component: dataGrid[12],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Cable1')) {
                        d15sheet.getRow(1).getCell(1).value = "Cable1";
                        d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d15sheet,
                            component: dataGrid[13],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('APB')) {
                        d16sheet.getRow(1).getCell(1).value = "APB";
                        d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d16sheet,
                            component: dataGrid[14],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('ECC')) {
                        d17sheet.getRow(1).getCell(1).value = "ECC";
                        d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d17sheet,
                            component: dataGrid[15],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('GIO1')) {
                        d18sheet.getRow(1).getCell(1).value = "GIO1";
                        d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d18sheet,
                            component: dataGrid[16],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('GIO2')) {
                        d19sheet.getRow(1).getCell(1).value = "GIO2";
                        d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d19sheet,
                            component: dataGrid[17],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('LDU')) {
                        d20sheet.getRow(1).getCell(1).value = "LDU";
                        d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d20sheet,
                            component: dataGrid[18],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('PSC')) {
                        d21sheet.getRow(1).getCell(1).value = "PSC";
                        d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d21sheet,
                            component: dataGrid[19],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('VSC')) {
                        d22sheet.getRow(1).getCell(1).value = "VSC";
                        d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d22sheet,
                            component: dataGrid[20],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('WSS')) {
                        d23sheet.getRow(1).getCell(1).value = "WSS";
                        d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d23sheet,
                            component: dataGrid[21],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (cards != undefined && cards.includes('WSS2')) {
                        d24sheet.getRow(1).getCell(1).value = "WSS2";
                        d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d24sheet,
                            component: dataGrid[22],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })

            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                        d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                        d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d26sheet,
                            component: dataGrid[24],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Motsim')) {
                        d27sheet.getRow(1).getCell(1).value = "Motsim";
                        d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d27sheet,
                            component: dataGrid[25],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })

            .then(
                function () {
                    if (equipments != undefined && equipments.includes('Vector Tools')) {
                        d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                        d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d28sheet,
                            component: dataGrid[26],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }

                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('VDM and HYM')) {
                        d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                        d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d29sheet,
                            component: dataGrid[27],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }
                })
            .then(
                function () {
                    if (equipments != undefined && equipments.includes('IIS Box')) {
                        d30sheet.getRow(1).getCell(1).value = "IIS Box";
                        d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                        return DevExpress.excelExporter.exportDataGrid({
                            worksheet: d30sheet,
                            component: dataGrid[28],
                            topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                        });
                    }
                })
            .then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                });
            });
    }

    else if (equipments != undefined) {
        if (equipments.includes('EB')) {
            debugger;
            d4sheet.getRow(1).getCell(1).value = "EB";
            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            DevExpress.excelExporter.exportDataGrid({
                worksheet: d4sheet,
                component: dataGrid[2],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        debugger;
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });


        }
        else if (equipments.includes('ES4441')) {
            d5sheet.getRow(1).getCell(1).value = "ES4441";
            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d5sheet,
                component: dataGrid[3],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('OTSO')) {

            d6sheet.getRow(1).getCell(1).value = "OTSO";
            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d6sheet,
                component: dataGrid[4],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })


                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('Power Supply')) {

            d7sheet.getRow(1).getCell(1).value = "Power Supply";
            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d7sheet,
                component: dataGrid[5],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })


                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })

                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('BOB')) {

            d8sheet.getRow(1).getCell(1).value = "BOB";
            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d8sheet,
                component: dataGrid[6],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })


                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('IXXAT')) {

            d13sheet.getRow(1).getCell(1).value = "IXXAT";
            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d13sheet,
                component: dataGrid[11],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('APB')) {

            d16sheet.getRow(1).getCell(1).value = "APB";
            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d16sheet,
                component: dataGrid[14],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('HAP')) {


            d11sheet.getRow(1).getCell(1).value = "HAP";
            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d11sheet,
                component: dataGrid[9],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('Cable')) {

            d14sheet.getRow(1).getCell(1).value = "Cable";
            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d14sheet,
                component: dataGrid[12],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('Component Info')) {

            d25sheet.getRow(1).getCell(1).value = "Component Info";
            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d25sheet,
                component: dataGrid[23],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }

        else if (equipments.includes('Diagnostic Tools')) {

            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d26sheet,
                component: dataGrid[24],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }

        else if (equipments.includes('Vector Tools')) {

            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d28sheet,
                component: dataGrid[26],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }


        else if (equipments.includes('Motsim')) {

            d27sheet.getRow(1).getCell(1).value = "Motsim";
            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d27sheet,
                component: dataGrid[25],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {

                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },
                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('VDM and HYM')) {

            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d29sheet,
                component: dataGrid[27],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {

                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },
                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (equipments.includes('IIS Box')) {

            debugger;

            d30sheet.getRow(1).getCell(1).value = "IIS Box";
            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d30sheet,
                component: dataGrid[28],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })
                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {

                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },
                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }


    }

    else {//card not undefined
        if (cards.includes('ECC')) {

            d17sheet.getRow(1).getCell(1).value = "ECC";
            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d17sheet,
                component: dataGrid[15],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (cards.includes("GIO1")) {

            d18sheet.getRow(1).getCell(1).value = "GIO1";
            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d18sheet,
                component: dataGrid[16],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (cards.includes("GIO2")) {

            d19sheet.getRow(1).getCell(1).value = "GIO2";
            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d19sheet,
                component: dataGrid[17],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (cards.includes("LDU")) {

            d20sheet.getRow(1).getCell(1).value = "LDU";
            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d20sheet,
                component: dataGrid[18],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (cards.includes("PSC")) {

            d21sheet.getRow(1).getCell(1).value = "PSC";
            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d21sheet,
                component: dataGrid[19],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (cards.includes("VSC")) {

            d22sheet.getRow(1).getCell(1).value = "VSC";
            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d22sheet,
                component: dataGrid[20],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })
                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (cards.includes("WSS")) {

            d23sheet.getRow(1).getCell(1).value = "WSS";
            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d23sheet,
                component: dataGrid[21],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS2')) {
                            d24sheet.getRow(1).getCell(1).value = "WSS2";
                            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d24sheet,
                                component: dataGrid[22],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
        else if (cards.includes("WSS2")) {

            d24sheet.getRow(1).getCell(1).value = "WSS2";
            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
            return DevExpress.excelExporter.exportDataGrid({
                worksheet: d24sheet,
                component: dataGrid[22],
                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },


            })

                .then(
                    function () {
                        if (Projflag == true) {
                            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
                            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d3sheet,
                                component: dataGrid[1],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }


                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Component Info')) {
                            d25sheet.getRow(1).getCell(1).value = "Component Info";
                            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d25sheet,
                                component: dataGrid[23],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('EB')) {
                            d4sheet.getRow(1).getCell(1).value = "EB";
                            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d4sheet,
                                component: dataGrid[2],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('ES4441')) {
                            d5sheet.getRow(1).getCell(1).value = "ES4441";
                            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d5sheet,
                                component: dataGrid[3],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('OTSO')) {
                            d6sheet.getRow(1).getCell(1).value = "OTSO";
                            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d6sheet,
                                component: dataGrid[4],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Power Supply')) {
                            d7sheet.getRow(1).getCell(1).value = "Power Supply";
                            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d7sheet,
                                component: dataGrid[5],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB')) {
                            d8sheet.getRow(1).getCell(1).value = "BOB";
                            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d8sheet,
                                component: dataGrid[6],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('BOB1')) {
                            d9sheet.getRow(1).getCell(1).value = "BOB1";
                            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d9sheet,
                                component: dataGrid[7],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT1')) {
                            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
                            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d10sheet,
                                component: dataGrid[8],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP')) {
                            d11sheet.getRow(1).getCell(1).value = "HAP";
                            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d11sheet,
                                component: dataGrid[9],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('HAP1')) {
                            d12sheet.getRow(1).getCell(1).value = "HAP1";
                            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d12sheet,
                                component: dataGrid[10],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IXXAT')) {
                            d13sheet.getRow(1).getCell(1).value = "IXXAT";
                            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d13sheet,
                                component: dataGrid[11],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable')) {
                            d14sheet.getRow(1).getCell(1).value = "Cable";
                            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d14sheet,
                                component: dataGrid[12],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Cable1')) {
                            d15sheet.getRow(1).getCell(1).value = "Cable1";
                            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d15sheet,
                                component: dataGrid[13],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('APB')) {
                            d16sheet.getRow(1).getCell(1).value = "APB";
                            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d16sheet,
                                component: dataGrid[14],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('ECC')) {
                            d17sheet.getRow(1).getCell(1).value = "ECC";
                            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d17sheet,
                                component: dataGrid[15],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO1')) {
                            d18sheet.getRow(1).getCell(1).value = "GIO1";
                            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d18sheet,
                                component: dataGrid[16],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('GIO2')) {
                            d19sheet.getRow(1).getCell(1).value = "GIO2";
                            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d19sheet,
                                component: dataGrid[17],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('LDU')) {
                            d20sheet.getRow(1).getCell(1).value = "LDU";
                            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d20sheet,
                                component: dataGrid[18],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('PSC')) {
                            d21sheet.getRow(1).getCell(1).value = "PSC";
                            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d21sheet,
                                component: dataGrid[19],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('VSC')) {
                            d22sheet.getRow(1).getCell(1).value = "VSC";
                            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d22sheet,
                                component: dataGrid[20],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (cards != undefined && cards.includes('WSS')) {
                            d23sheet.getRow(1).getCell(1).value = "WSS";
                            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d23sheet,
                                component: dataGrid[21],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })

                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Diagnostic Tools')) {
                            d26sheet.getRow(1).getCell(1).value = "Diagnostic Tool Version";
                            d26sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d26sheet,
                                component: dataGrid[24],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Motsim')) {
                            d27sheet.getRow(1).getCell(1).value = "Motsim";
                            d27sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d27sheet,
                                component: dataGrid[25],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('Vector Tools')) {
                            d28sheet.getRow(1).getCell(1).value = "Vector Tool Version";
                            d28sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d28sheet,
                                component: dataGrid[26],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }

                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('VDM and HYM')) {
                            d29sheet.getRow(1).getCell(1).value = "Vehicle and Hydraulic Models";
                            d29sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d29sheet,
                                component: dataGrid[27],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(
                    function () {
                        if (equipments != undefined && equipments.includes('IIS Box')) {
                            d30sheet.getRow(1).getCell(1).value = "IIS Box";
                            d30sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
                            return DevExpress.excelExporter.exportDataGrid({
                                worksheet: d30sheet,
                                component: dataGrid[28],
                                topLeftCell: { row: 3, column: 2 }, customizeCell(options) { setAlternatingRowsBackground(options.gridCell, options.excelCell); },

                            });
                        }
                    })
                .then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
                    });
                });
        }
    }






    //.then(
    //    function () {
    //        if (Projflag == true) {
    //            d3sheet.getRow(1).getCell(1).value = "PrjDescription";
    //            d3sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d3sheet,
    //                component: dataGrid[1],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }


    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('Component Info')) {
    //            d25sheet.getRow(1).getCell(1).value = "Component Info";
    //            d25sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d25sheet,
    //                component: dataGrid[23],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('EB')) {
    //            d4sheet.getRow(1).getCell(1).value = "EB";
    //            d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d4sheet,
    //                component: dataGrid[2],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('ES4441')) {
    //            d5sheet.getRow(1).getCell(1).value = "ES4441";
    //            d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d5sheet,
    //                component: dataGrid[3],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('OTSO')) {
    //            d6sheet.getRow(1).getCell(1).value = "OTSO";
    //            d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d6sheet,
    //                component: dataGrid[4],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('Power Supply')) {
    //            d7sheet.getRow(1).getCell(1).value = "Power Supply";
    //            d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d7sheet,
    //                component: dataGrid[5],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('BOB')) {
    //            d8sheet.getRow(1).getCell(1).value = "BOB";
    //            d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d8sheet,
    //                component: dataGrid[6],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('BOB1')) {
    //            d9sheet.getRow(1).getCell(1).value = "BOB1";
    //            d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d9sheet,
    //                component: dataGrid[7],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('IXXAT1')) {
    //            d10sheet.getRow(1).getCell(1).value = "IXXAT1";
    //            d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d10sheet,
    //                component: dataGrid[8],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('HAP')) {
    //            d11sheet.getRow(1).getCell(1).value = "HAP";
    //            d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d11sheet,
    //                component: dataGrid[9],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('HAP1')) {
    //            d12sheet.getRow(1).getCell(1).value = "HAP1";
    //            d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d12sheet,
    //                component: dataGrid[10],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('IXXAT')) {
    //            d13sheet.getRow(1).getCell(1).value = "IXXAT";
    //            d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d13sheet,
    //                component: dataGrid[11],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('Cable')) {
    //            d14sheet.getRow(1).getCell(1).value = "Cable";
    //            d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d14sheet,
    //                component: dataGrid[12],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('Cable1')) {
    //            d15sheet.getRow(1).getCell(1).value = "Cable1";
    //            d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d15sheet,
    //                component: dataGrid[13],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (equipments != undefined && equipments.includes('APB')) {
    //            d16sheet.getRow(1).getCell(1).value = "APB";
    //            d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d16sheet,
    //                component: dataGrid[14],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (cards != undefined && cards.includes('ECC')) {
    //            d17sheet.getRow(1).getCell(1).value = "ECC";
    //            d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d17sheet,
    //                component: dataGrid[15],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (cards != undefined && cards.includes('GIO1')) {
    //            d18sheet.getRow(1).getCell(1).value = "GIO1";
    //            d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d18sheet,
    //                component: dataGrid[16],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (cards != undefined && cards.includes('GIO2')) {
    //            d19sheet.getRow(1).getCell(1).value = "GIO2";
    //            d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d19sheet,
    //                component: dataGrid[17],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (cards != undefined && cards.includes('LDU')) {
    //            d20sheet.getRow(1).getCell(1).value = "LDU";
    //            d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d20sheet,
    //                component: dataGrid[18],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (cards != undefined && cards.includes('PSC')) {
    //            d21sheet.getRow(1).getCell(1).value = "PSC";
    //            d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d21sheet,
    //                component: dataGrid[19],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(   
    //    function () { 
    //        if (cards != undefined && cards.includes('VSC')) {
    //            d22sheet.getRow(1).getCell(1).value = "VSC";
    //            d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d22sheet,
    //                component: dataGrid[20],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })
    //.then(
    //    function () {
    //        if (cards != undefined && cards.includes('WSS')) {
    //            d23sheet.getRow(1).getCell(1).value = "WSS";
    //            d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d23sheet,
    //                component: dataGrid[21],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    }) 
    //.then(
    //    function () {
    //        if (cards != undefined && cards.includes('WSS2')) {
    //            d24sheet.getRow(1).getCell(1).value = "WSS2";
    //            d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d24sheet,
    //                component: dataGrid[22],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }

    //    })

    //.then(function () {
    //    workbook.xlsx.writeBuffer().then(function (buffer) {
    //        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //    });
    //});










    //DevExpress.excelExporter.exportDataGrid
    //    ({
    //        worksheet: d2sheet,
    //        component: dataGrid[0],
    //        topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //    }).then(
    //        function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d3sheet,
    //                component: dataGrid[1],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //    }).then(function () {
    //        workbook.xlsx.writeBuffer().then(function (buffer) {
    //            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //        });
    //    });


    //if (equipments != undefined && equipments.includes('EB')) {
    //    d4sheet.getRow(1).getCell(1).value = "EB";
    //    d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d4sheet,
    //            component: dataGrid[2], 
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('ES4441')) {
    //    d5sheet.getRow(1).getCell(1).value = "ES4441";
    //    d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d5sheet,
    //            component: dataGrid[3],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('OTSO')) {
    //    d6sheet.getRow(1).getCell(1).value = "OTSO";
    //    d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d6sheet,
    //            component: dataGrid[4],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('Power Supply')) {
    //    d7sheet.getRow(1).getCell(1).value = "Power Supply";
    //    d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d7sheet,
    //            component: dataGrid[5],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('BOB')) {
    //    d8sheet.getRow(1).getCell(1).value = "BOB";
    //    d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d8sheet,
    //            component: dataGrid[6],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('BOB1')) {
    //    d9sheet.getRow(1).getCell(1).value = "BOB1";
    //    d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d9sheet,
    //            component: dataGrid[7],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('IXXAT1')) {
    //    d10sheet.getRow(1).getCell(1).value = "IXXAT1";
    //    d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d10sheet,
    //            component: dataGrid[8],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}



    //if (equipments != undefined && equipments.includes('HAP')) {
    //    d11sheet.getRow(1).getCell(1).value = "HAP";
    //    d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d11sheet,
    //            component: dataGrid[9],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('HAP1')) {
    //    d12sheet.getRow(1).getCell(1).value = "HAP1";
    //    d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d12sheet,
    //            component: dataGrid[10],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('IXXAT')) {
    //    d13sheet.getRow(1).getCell(1).value = "IXXAT";
    //    d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d13sheet,
    //            component: dataGrid[11],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('Cable')) {
    //    d14sheet.getRow(1).getCell(1).value = "Cable";
    //    d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d14sheet,
    //            component: dataGrid[12],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('Cable1')) {
    //    d15sheet.getRow(1).getCell(1).value = "Cable1";
    //    d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d15sheet,
    //            component: dataGrid[13],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments != undefined && equipments.includes('APB')) {
    //    d16sheet.getRow(1).getCell(1).value = "APB";
    //    d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d16sheet,
    //            component: dataGrid[14],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (cards != undefined && cards.includes('ECC')) {
    //    d17sheet.getRow(1).getCell(1).value = "ECC";
    //    d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d17sheet,
    //            component: dataGrid[15],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (cards != undefined && cards.includes('GIO1'))
    //{
    //    d18sheet.getRow(1).getCell(1).value = "GIO1";
    //    d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d18sheet,
    //            component: dataGrid[16],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}

    //if (cards != undefined && cards.includes('GIO2')) {
    //    d19sheet.getRow(1).getCell(1).value = "GIO2";
    //    d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d19sheet,
    //            component: dataGrid[17],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}

    //if (cards != undefined && cards.includes('LDU')) 
    //{
    //    d20sheet.getRow(1).getCell(1).value = "LDU";
    //    d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d20sheet,
    //            component: dataGrid[18],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}

    //if (cards != undefined && cards.includes('PSC'))
    //{
    //    d21sheet.getRow(1).getCell(1).value = "PSC";
    //    d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d21sheet,
    //            component: dataGrid[19],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}

    //if (cards != undefined && cards.includes('VSC'))
    //{
    //    d22sheet.getRow(1).getCell(1).value = "VSC";
    //    d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d22sheet,
    //            component: dataGrid[20],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (cards != undefined && cards.includes('WSS'))
    //{
    //    d23sheet.getRow(1).getCell(1).value = "WSS";
    //    d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d23sheet,
    //            component: dataGrid[21],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (cards != undefined && cards.includes('WSS2'))
    //{
    //    d24sheet.getRow(1).getCell(1).value = "WSS2";
    //    d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d24sheet,
    //            component: dataGrid[22],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    debugger;
    //d4sheet.getRow(1).getCell(1).value = "Table3: EB";
    //d4sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d5sheet.getRow(1).getCell(1).value = "Table4: ES4441";
    //d5sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d6sheet.getRow(1).getCell(1).value = "Table5: OTSO";
    //d6sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d7sheet.getRow(1).getCell(1).value = "Table6: Power Supply";
    //d7sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d8sheet.getRow(1).getCell(1).value = "Table7: BOB";
    //d8sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d9sheet.getRow(1).getCell(1).value = "Table8: BOB1";
    //d9sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d10sheet.getRow(1).getCell(1).value = "Table9: IXXAT1";
    //d10sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d11sheet.getRow(1).getCell(1).value = "Table10: HAP";
    //d11sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d12sheet.getRow(1).getCell(1).value = "Table11: HAP1";
    //d12sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d13sheet.getRow(1).getCell(1).value = "Table12: IXXAT";
    //d13sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d14sheet.getRow(1).getCell(1).value = "Table13: Cable";
    //d14sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d15sheet.getRow(1).getCell(1).value = "Table14: Cable1";
    //d15sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d16sheet.getRow(1).getCell(1).value = "Table15: APB";
    //d16sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };


    //d17sheet.getRow(1).getCell(1).value = "Table16: ECC";
    //d17sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d18sheet.getRow(1).getCell(1).value = "Tableq17: GIO1";
    //d18sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d19sheet.getRow(1).getCell(1).value = "Table18: GIO2";
    //d19sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d20sheet.getRow(1).getCell(1).value = "Table19: LDU";
    //d20sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d21sheet.getRow(1).getCell(1).value = "Table20: PSC";
    //d21sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d22sheet.getRow(1).getCell(1).value = "Table21: VSC";
    //d22sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d23sheet.getRow(1).getCell(1).value = "Table22: WSS";
    //d23sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };
    //d24sheet.getRow(1).getCell(1).value = "Table23: WSS2";
    //d24sheet.getRow(1).getCell(1).font = { bold: true, size: 16, underline: "double" };

    //Function to export several DataGrids
    //if (equipments.includes('EB')) {
    //    debugger;
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d4sheet,
    //            component: dataGrid[2],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //if (equipments.includes('APB')) {
    //    debugger;
    //    DevExpress.excelExporter.exportDataGrid
    //        ({
    //            worksheet: d16sheet,
    //            component: dataGrid[14],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}
    //else {
    //    DevExpress.excelExporter.exportDataGrid
    //        ({ 
    //            worksheet: d2sheet,
    //            component: dataGrid[0],
    //            topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            //})
    //            //.then(function (cellRange) {
    //            //    // header
    //            //    var headerRow = d1sheet.getRow(2);
    //            //    headerRow.height = 30;
    //            //    //d1sheet.mergeCells(2, 1, 2, 8);

    //            //    headerRow.getCell(1).value = 'QUERY INFORMATION' + '\n' + 'ABCX';
    //            //    headerRow.getCell(1).font = { name: 'Segoe UI Light', size: 22 };
    //            //    headerRow.getCell(1).alignment = { horizontal: 'center' };

    //            //    headerRow = d1sheet.getRow(3);
    //            //    headerRow.getCell(2).value = 'Start Date: ' + sTime;
    //            //    headerRow.getCell(2).font = { name: 'Segoe UI Light', size: 22 };
    //            //    headerRow.getCell(2).alignment = { horizontal: 'center' };

    //            //    headerRow = d1sheet.getRow(4);
    //            //    headerRow.getCell(3).value = 'End Date: ' + eTime;
    //            //    headerRow.getCell(3).font = { name: 'Segoe UI Light', size: 22 };
    //            //    headerRow.getCell(3).alignment = { horizontal: 'center' };

    //            //    headerRow = d1sheet.getRow(5);
    //            //    headerRow.getCell(4).value = 'Location: ' + locations_chosen;
    //            //    headerRow.getCell(4).font = { name: 'Segoe UI Light', size: 22 };
    //            //    headerRow.getCell(4).alignment = { horizontal: 'center' };

    //            //    headerRow = d1sheet.getRow(6);
    //            //    headerRow.getCell(5).value = 'Lab IDs: ' + labids_chosen;
    //            //    headerRow.getCell(5).font = { name: 'Segoe UI Light', size: 22 };
    //            //    headerRow.getCell(5).alignment = { horizontal: 'center' };

    //            //    headerRow = d1sheet.getRow(7);
    //            //    headerRow.getCell(6).value = 'Date of Report Generation: '  + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();
    //            //    headerRow.getCell(6).font = { name: 'Segoe UI Light', size: 22 };
    //            //    headerRow.getCell(6).alignment = { horizontal: 'center' };


    //        }).then(
    //            function () {

    //                return DevExpress.excelExporter.exportDataGrid({
    //                    worksheet: d3sheet,
    //                    component: dataGrid[1],
    //                    topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //                });
    //            }).then(function () {

    //                return DevExpress.excelExporter.exportDataGrid({
    //                    worksheet: d4sheet,
    //                    component: dataGrid[2],
    //                    topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //                });
    //            })

    //        .then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d5sheet,
    //                component: dataGrid[3],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        })
    //        .then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d6sheet,
    //                component: dataGrid[4],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d7sheet,
    //                component: dataGrid[5],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d8sheet,
    //                component: dataGrid[6],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d9sheet,
    //                component: dataGrid[7],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d10sheet,
    //                component: dataGrid[8],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d11sheet,
    //                component: dataGrid[9],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d12sheet,
    //                component: dataGrid[10],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d13sheet,
    //                component: dataGrid[11],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d14sheet,
    //                component: dataGrid[12],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d15sheet,
    //                component: dataGrid[13],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d16sheet,
    //                component: dataGrid[14],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d17sheet,
    //                component: dataGrid[15],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d18sheet,
    //                component: dataGrid[16],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d19sheet,
    //                component: dataGrid[17],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d20sheet,
    //                component: dataGrid[18],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d21sheet,
    //                component: dataGrid[19],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d22sheet,
    //                component: dataGrid[20],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d23sheet,
    //                component: dataGrid[21],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });
    //        }).then(function () {

    //            return DevExpress.excelExporter.exportDataGrid({
    //                worksheet: d24sheet,
    //                component: dataGrid[22],
    //                topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            });


    //            //}).then(function () {

    //            //    return DevExpress.excelExporter.exportDataGrid({
    //            //        worksheet: d13sheet,
    //            //        component: dataGrid12,
    //            //        topLeftCell: { row: 3, column: 2 },customizeCell(options) {setAlternatingRowsBackground(options.gridCell, options.excelCell);},

    //            //    });
    //        }).then(function () {
    //            workbook.xlsx.writeBuffer().then(function (buffer) {
    //                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DiagnosticsGrid" + ' ' + today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ".xlsx");
    //            });
    //        });
    //}

}






function exportGrids_hilsnap() {
            var dataGrid1 = $("#hilsnap_projecthw").dxDataGrid("instance");
            var dataGrid2 = $("#hilsnap_measurement").dxDataGrid("instance");
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('Main sheet');

            Object.assign(
                worksheet.getRow(2).getCell(2),
                { value: "Costs:", font: { bold: true, size: 16, underline: 'double' } }
            );
            Object.assign(
                worksheet.getRow(2).getCell(6),
                { value: "Ratings:", font: { bold: true, size: 16, underline: 'double' } }
            );

            DevExpress.excelExporter.exportDataGrid({
                worksheet,
                component: dataGrid1,
                topLeftCell: { row: 4, column: 2 }
            }).then(function (dataGridRange) {
                return DevExpress.excelExporter.exportDataGrid({
                    worksheet,
                    component: dataGrid2,
                    topLeftCell: { row: 4, column: (dataGridRange.to.column + 2) }
                });
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DataGrid.xlsx");
                });
            });
        }

