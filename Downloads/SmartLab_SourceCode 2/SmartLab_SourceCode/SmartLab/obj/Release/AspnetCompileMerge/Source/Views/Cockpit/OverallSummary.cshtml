
@{
    ViewBag.Title = "OverallSummary";
    Layout = "~/Views/Shared/_Layout_SLCockpit.cshtml";
}


<head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GKX0NP1SYR"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-GKX0NP1SYR');
    </script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script>
        $(document).ready(function () {
            // debugger;;
            var data = @Html.Raw(Json.Encode(Model));
            var CurrentYear = '@TempData["Year"]';
            document.getElementById("overalltitle").innerHTML = "VKM " + CurrentYear + " NE-CC Budget Summary";
            document.getElementById("overalltitle").style.fontWeight = "600";
            const formatNumber = new Intl.NumberFormat('en-US', { maximumFractionDigits: 0 }).format;

            OnSuccess_QuarUtil(data);

            function OnSuccess_QuarUtil(data) {
                // debugger;;
                var vkm_overall = eval(data.overall);
                //var vkm_overall_totals = eval(data.total);
                const palette = ['#c3a2cc', '#b7b5e0', '#e48cba'];
                let paletteIndex = 0;

                $('#pivotgrid-chart').dxChart({

                    dataSource: vkm_overall,

                        commonSeriesSettings: {
                            argumentField: 'VKM_elt',
                            type: "bar",
                            barPadding: 0.5,

                        },
                        panes: [{
                            name: 'topPane',

                        }, {
                                name: 'bottomPane',

                        }],
                        defaultPane: 'bottomPane',
                        series: [{
                            pane: 'topPane',
                           // color: '#b0daff',
                            valueField: 'Plan',

                            label: {
                                visible: true,
                                format: 'currency',
                                customizeText() {
                                    // debugger;;
                                    return `${this.valueText}`;
                                },
                                font: {
                                    color: "black",
                                    family: "Arial",
                                    size: 13

                                },
                            },



                        }, {

                            valueField: 'Used',

                            label: {
                                visible: true,
                                format: 'currency',
                                customizeText() {
                                    // debugger;;
                                    return `${this.valueText}`;

                                },
                                font: {
                                    color: "black",
                                    family: "Arial",
                                    size: 13

                                },
                                },


                        },
                    ],
                    customizePoint() {
                        const color = palette[paletteIndex];
                        paletteIndex = paletteIndex === 2 ? 0 : paletteIndex + 1;

                        return {
                            color,
                        };
                    },
                    argumentAxis: {
                        label: {
                            format: 'currency',
                            font: {
                                color: "black",
                                family: "Arial",
                                size: 13

                            },
                            customizeText: function (e) {

                                return "<p style='color:black'>" + e.valueText + "</p>";

                            }

                        },
                        //constantLines: [
                        //    {
                        //        value: "Totals 2021",

                        //        paddingLeftRight: 100,
                        //        verticalAlignment : "left"

                        //    }

                        //]
                    },
                        valueAxis: [{
                            pane: 'bottomPane',
                            grid: {
                                visible: true,
                            },
                            title: {
                                text: 'Used (in $)',
                                font: {
                                    color: "black",
                                    family: "Arial",
                                    size: 13

                                },
                            },
                            label: {
                                format: 'currency',
                                font: {
                                    color: "black",
                                    family: "Arial",
                                    size: 13

                                },
                                customizeText: function (e) {

                                    return "<p style='color:black'>" + e.valueText + "</p>";

                                }

                            },

                        }, {
                            pane: 'topPane',
                            grid: {
                                visible: true,
                            },
                            title: {
                                text: 'Plan (in $)',
                                font: {
                                    color: "black",
                                    family: "Arial",
                                    size: 13

                                },
                                },
                                label: {
                                    format: 'currency',
                                    font: {
                                        color: "black",
                                        family: "Arial",
                                        size: 13

                                    },
                                    customizeText: function (e) {

                                        return "<p style='color:black'>" + e.valueText + "</p>";

                                    }

                                },

                        }],
                    legend: {
                        visible: false,
                    },
                    export: {
                        enabled: false,
                        },


                    tooltip: {
                        enabled: true,
                        format: 'currency',
                        font: {
                            color: "black",
                            family: "Arial",
                            size: 13

                        },

                        customizeTooltip(args) {
                            // debugger;;
                            return {
                                html: `${args.argument} | Total<div class='currency'>${args.totalText}</div>`,
                            };
                        },
                    },



                }).dxChart('instance');


                const pivotGrid =  $('#VKMSummaryTable').dxPivotGrid({
                    allowSortingBySummary: true,
                    allowFiltering: true,
                    showBorders: true,
                    showColumnGrandTotals: false,
                    showRowGrandTotals: true,
                    showRowTotals: true,
                    showColumnTotals: false,

                    fieldChooser: {


                        enabled: false
                    },
                    dataSource: {
                        fields: [{


                            dataField: 'VKM_elt',
                            area: 'row',
                            width: 90
                        },

                        {
                            dataField: 'VKM_yr',//new Date(parseInt(data.data[0].RequestDate.substr(6))),
                            // dataType: 'date',
                            area: 'column',
                        },

                        {

                            dataField: 'Plan',
                            caption: 'Plan',
                            dataType: 'number',
                            summaryType: 'sum',
                            format: 'currency',
                            area: 'data',
                            //width: 80
                        },
                        {

                            dataField: 'Used',
                            caption: 'Used',
                            dataType: 'number',
                            summaryType: 'sum',
                            format: 'currency',
                            area: 'data',
                            //width: 80
                            },
                            {

                                dataField: 'Available',
                                caption: 'Available',
                                summaryType: 'sum',
                                dataType: 'number',
                                format: 'currency',
                                area: 'data',
                                //width: 80
                            },

                        ],
                        store: vkm_overall,
                    },
                    onCellPrepared: function (e) {
                        // debugger;;
                        e.cellElement.css("color", "black");
                        if (e.area === "column" /*|| e.area == "row"*/) {
                            // debugger;;
                            e.cellElement.css("font-weight", "bold");
                            e.cellElement.css("font-size", 15);


                            //if (e.cell.text != undefined &&  e.cell.text.includes("Plan")) {
                            //    e.cellElement.css("background-color", "#1db2f5");
                            //    e.cellElement.css("color", "#0000");
                            //}

                            //if (e.cell.text != undefined &&  e.cell.text.includes("Used")) {
                            //    e.cellElement.css("background-color", "#f5564a");
                            //    e.cellElement.css("color", "#0000");
                            //}
                        }
                        if (e.area == "row" && e.cell.text == "Cost Element") {
                            e.cellElement.css("background-color", "#e48cba");
                        }
                        else if (e.area == "row" && e.cell.text == "HeadCount") {
                            e.cellElement.css("background-color", "#c3a2cc");
                        }
                        else if (e.area == "row" && e.cell.text == "Travel Cost") {
                            e.cellElement.css("background-color", "#b7b5e0");
                        }

                        if (e.cell.rowPath != undefined && e.cell.rowPath[0] == "Cost Element") {
                            e.cellElement.css("background-color", "#e48cba");
                            e.cellElement.css("color", "#0000");
                        }
                        else if (e.cell.rowPath != undefined && e.cell.rowPath[0] == "HeadCount") {
                            e.cellElement.css("background-color", "#c3a2cc");
                                 e.cellElement.css("color", "#0000");
                        }
                        else if (e.cell.rowPath != undefined && e.cell.rowPath[0] == "Travel Cost") {
                            e.cellElement.css("background-color", "#b7b5e0");
                            e.cellElement.css("color", "#0000");
                        }
                        //if (e.area == "data") {
                        //    if (e.cell.dataIndex == 0) {
                        //        e.cellElement.css("background-color", "#acd4e6");
                        //        e.cellElement.css("color", "#0000");
                        //    }
                        //    else if (e.cell.dataIndex == 1) {
                        //        e.cellElement.css("background-color", "#f5beba");
                        //        e.cellElement.css("color", "#0000");
                        //    }
                        //}


                        //if (e.cell.columnPath != undefined && e.cell.columnPath[1] != undefined && e.cell.columnPath[1].includes("Plan") /*|| e.area == "row"*/) {

                        //    e.cellElement.css("background-color", "#bce4e6");

                        //}
                        //if ((e.cell.columnPath != undefined && e.cell.columnPath[1] != undefined && e.cell.columnPath[1].includes("Used"))  /*|| e.area == "row"*/) {

                        //    e.cellElement.css("background-color", "#f0c0de"); //"#eba4d1"); //"#bce4e6"); //

                        //}

                    },


                }).dxPivotGrid('instance');

                //pivotGrid.bindChart(pivotGridChart, {
                //    dataFieldsDisplayMode: 'splitPanes',
                //    alternateDataFields: false,
                //});


                $("#pie_plan").dxPieChart({
                    type: 'doughnut',
                     dataSource: vkm_overall,

                   // title: "LC Type Percentage Stats",
                    commonAnnotationSettings: {
                        type: "text"

                    },


                    resolveLabelOverlapping: 'shift',
                    commonSeriesSettings: {
                        argumentField: "VKM_elt",
                    },
                    centerTemplate(pieChart, container) {
                        debugger;
                        const total = pieChart
                            .getAllSeries()[0]
                            .getVisiblePoints()
                            .reduce((s, p) => s + p.originalValue, 0);
                        const  title  =  pieChart.getAllSeries()[0].name;/*pieChart.getAllSeries()[0].getVisiblePoints()[0].data;*/
                        const content = $(`<svg><circle cx="100" cy="100" fill="#eee" r="${pieChart.getInnerRadius() - 6}"></circle>`

                            + '<text text-anchor="middle" style="font-size: 18px" x="100" y="100" fill="#494949">'
                            + `<tspan x="100" >${title}</tspan>`
                            + `<tspan x="100" dy="20px" style="font-weight: 600">${"$" +
                            formatNumber(total)
                            }</tspan></text></svg>`);

                        container.appendChild(content.get(0));
                    },
                     series: [

                    //{
                    //    valueField: "Used",
                    //         name: "Used Percentage Ratio", //shown in series name while hover over chart segments
                    //         font: {
                    //             color: "black",
                    //             family: "Arial",
                    //             size: 13

                    //         },
                    //    label: {
                    //        visible: true,
                    //     format: 'curremcy',
                    //        font: {
                    //            size: 16
                    //        },
                    //        font: {
                    //            color: "black",
                    //            family: "Arial",
                    //            size: 13

                    //        },
                    //        connector: {
                    //            visible: true,
                    //            width: 0.5
                    //        },
                    //        position: "columns",
                    //        customizeText: function (arg) {
                    //            return "Used " + arg.argument + " : " + arg.valueText + " (" + arg.percent + ")";
                    //        }
                    //    }


                    //     },
                         {

                             valueField: "Plan",
                             name: "Plan",
                             tagField: "splitup_ratio",
                             font: {
                                 color: "black",
                                 family: "Arial",
                                 size: 13

                             },
                             label: {
                                 visible: true,
                                 format: 'currency',
                                 font: {
                                     size: 16
                                 },
                                 font: {
                                     color: "black",
                                     family: "Arial",
                                     size: 13

                                 },
                                 connector: {
                                     visible: true,
                                     width: 0.5
                                 },
                                 position: "columns",
                                 customizeText: function (arg) {
                                      debugger;
                                     return  arg.argument + " : " + arg.valueText + " (" + (arg.percent.toFixed(4) * 100).toFixed(2) + "%)";
                                 }
                             }

                         },
                     ],
                     customizePoint() {
                         const color = palette[paletteIndex];
                         paletteIndex = paletteIndex === 2 ? 0 : paletteIndex + 1;

                         return {
                             color,
                         };
                     },
                    tooltip: {
                        enabled: true,
                        location: "edge",
                        format: 'currency',
                        customizeTooltip: function (arg) {
                            // debugger;;
                            return { text: arg.point.tag };
                            //if (arg.percent != null)
                            //    return { text:   arg.argument + " : " + arg.valueText + "\n" + arg.point.series.name + ":" + arg.percent }
                            //else
                            //    return { text:  arg.valueText }
                            // debugger;;

                        }
                    },
                    legend:
                    {
                        visible: false,
                        verticalAlignment: "Bottom",
                        horizontalAlignment: "Center",
                        border: {
                            visible: true
                        },
                        font: {
                            color: "black",
                            family: "Arial",
                            size: 13

                        },
                    },


                }).dxPieChart("instance");


                $("#pie_used").dxPieChart({
                    type: 'doughnut',
                    dataSource: vkm_overall,

                    // title: "LC Type Percentage Stats",
                    commonAnnotationSettings: {
                        type: "text"

                    },
                    centerTemplate(pieChart, container) {
                       debugger;;
                        const total = pieChart
                            .getAllSeries()[0]
                            .getVisiblePoints()
                            .reduce((s, p) => s + p.originalValue, 0);
                        const  title  = pieChart.getAllSeries()[0].name;/*pieChart.getAllSeries()[0].getVisiblePoints()[0].data;*/
                        const content = $(`<svg><circle cx="100" cy="100" fill="#eee" r="${pieChart.getInnerRadius() - 6}"></circle>`

                            + '<text text-anchor="middle" style="font-size: 18px" x="100" y="100" fill="#494949">'
                            + `<tspan x="100" >${title}</tspan>`
                            + `<tspan x="100" dy="20px" style="font-weight: 600">${"$" +
                            formatNumber(total)
                            }</tspan></text></svg>`);

                        container.appendChild(content.get(0));
                    },


                    resolveLabelOverlapping: 'shift',
                    commonSeriesSettings: {
                        argumentField: "VKM_elt",
                    },
                    series: [

                        {
                            valueField: "Used",
                            tagField: "splitup_ratio",
                                 name: "Used", //shown in series name while hover over chart segments
                                 font: {
                                     color: "black",
                                     family: "Arial",
                                     size: 13

                                 },
                            label: {
                                visible: true,
                             format: 'currency',
                                font: {
                                    size: 16
                                },
                                font: {
                                    color: "black",
                                    family: "Arial",
                                    size: 13

                                },
                                connector: {
                                    visible: true,
                                    width: 0.5
                                },
                                position: "columns",
                                customizeText: function (arg) {
                                    debugger;
                                    return  arg.argument + " : " + arg.valueText + " (" + (arg.percent.toFixed(4) * 100).toFixed(2) + "%)";
                                }
                            }


                             },
                        //{

                        //    valueField: "Plan",
                        //    name: "Plan Percentage Ratio",
                        //    font: {
                        //        color: "black",
                        //        family: "Arial",
                        //        size: 13

                        //    },
                        //    label: {
                        //        visible: true,
                        //        format: 'currency',
                        //        font: {
                        //            size: 16
                        //        },
                        //        font: {
                        //            color: "black",
                        //            family: "Arial",
                        //            size: 13

                        //        },
                        //        connector: {
                        //            visible: true,
                        //            width: 0.5
                        //        },
                        //        position: "columns",
                        //        customizeText: function (arg) {
                        //            // debugger;;
                        //            return "Plan " + arg.argument + " : " + arg.valueText + " (" + arg.percent + ")";
                        //        }
                        //    }

                        //},
                    ],
                    customizePoint() {
                        const color = palette[paletteIndex];
                        paletteIndex = paletteIndex === 2 ? 0 : paletteIndex + 1;

                        return {
                            color,
                        };
                    },
                    tooltip: {
                        enabled: true,
                        location: "edge",
                        format: 'currency',
                        customizeTooltip: function (arg) {
                            debugger;

                            if (arg.percent != null)
                                return { text: arg.argument + " : " + arg.valueText + "\n" + arg.point.series.name + ":" + (arg.percent.toFixed(4) * 100).toFixed(2) + "%" }
                            else
                                return { text: arg.valueText }


                        }
                    },
                    legend:
                    {

                        //verticalAlignment: "Bottom",
                        //horizontalAlignment: "Center",
                        border: {
                            visible: true
                        },
                        font: {
                            color: "black",
                            family: "Arial",
                            size: 13

                        },
                    },


                }).dxPieChart("instance");



                //$('#pie').dxPieChart({
                //    //size: {
                //    //    width: 500,
                //    //},
                //    //palette: 'bright',
                //    dataSource: vkm_overall_totals,
                //    series: [
                //        {
                //            argumentField: 'is_Plan_Util',
                //            valueField: 'Totals',
                //            tagField: 'splitup_ratio',
                //            label: {
                //                visible: true,
                //                connector: {
                //                    visible: true,
                //                    width: 1,
                //                },
                //                customizeText: function (arg) {
                //                    // debugger;;
                //                    return arg.point.data.is_Plan_Util + ": $" + arg.point.data.Totals + " | " + "Ratio: " + arg.percent;

                //                }
                //            },
                //        },
                //    ],
                //    //title: 'Area of Countries',
                //    //export: {
                //    //    enabled: true,
                //    //},
                //    onPointClick(e) {
                //        const point = e.target;

                //        toggleVisibility(point);
                //    },
                //    onLegendClick(e) {
                //        const arg = e.target;

                //        toggleVisibility(this.getAllSeries()[0].getPointsByArg(arg)[0]);
                //    },
                //    tooltip: {
                //        enabled: true,
                //        location: "edge",
                //        customizeTooltip: function (arg) {
                //            // debugger;;
                //           // return {text: arg.tag}
                //            //if (arg.percent != null)
                //            //    return { text: arg.point.data.Location + ":" + arg.valueText + "\n" + arg.point.series.name + ":" + arg.percent }
                //            //else
                //            //    return { text: arg.point.data.Location + ":" + arg.valueText }
                //            //// debugger;;

                //        }
                //    },
                //});

                function toggleVisibility(item) {
                    if (item.isVisible()) {
                        item.hide();
                    } else {
                        item.show();
                    }
                }
            }
        });



    </script>

</head>

<body>


    <div id="overalltitle" style="margin:0 auto; text-align:center; font-size:20px; font-family:Arial; "><b></b></div>
    @*<table align="center" style="width:80%">
        <tr style="width:100%">

            <td style="height: 300px;width:40%">
                <div id="pie_plan"></div>

            </td>


            <td style="padding-left:50px;height:300px;width:60%">
                <div id="pie_used"></div>

            </td>


        </tr>
    </table>*@
  
    @*<table align="center" style="width: 80%;">

        
        <tr align="center">

            <td>
                <div id="VKMSummaryTable"></div>

            </td>


            <td style="width:100px;padding-left:180px;height:300px;">
                <div id="pivotgrid-chart"></div>

            </td>


        </tr>
        <tr style="height:20px;"></tr>
      
    </table>*@
    @*<div class="card-deck">
        <div class="card ml-4 mr-4" style="float:left;display:inherit;width:300px;">*@
            @*<table>
                
                <tr>
                    <td align="center" style="width:100px;">
                        <div id="pie_plan"></div>
                    </td>
                    <td align="center" style="width:270px;">
                        <div id="pie_used"></div>
                    </td>
                </tr>
            </table>*@
            
           
        @*</div>
       
    </div>*@
    @*<div style="padding-left:100px;">*@
    <table align="center">
        <tr>
            <td style="padding-top:20px;">
                <div class="card mr-5 ml-5" style="height:40vh;width:35vw;display:inherit;float:left;">

                    <div style="margin:0 auto; text-align:center; font-size:15px; font-family:Arial;padding-top: 30px; "><b>Budget Division</b></div>


                    <div id="VKMSummaryTable"></div>
                </div>
            </td>
        </tr>
    </table>
       
        @*<div class="card ml-5" style="height:40vh;width:35vw;">
            <div style="margin:0 auto; text-align:center; font-size:15px; font-family:Arial; "><b>Utilization Graph</b></div>
            <div id="pivotgrid-chart" style="height:40vh"></div>
        </div>*@
    @*</div>*@
    
</body>