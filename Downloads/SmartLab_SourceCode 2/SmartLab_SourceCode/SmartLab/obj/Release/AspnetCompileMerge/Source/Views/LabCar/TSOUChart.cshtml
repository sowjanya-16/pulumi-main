@model LC_Reports_V1.Models.TsouChartAttributes

@{
    ViewBag.Title = "Test System Overall Usage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GKX0NP1SYR"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-GKX0NP1SYR');
    </script>
    <meta charset="UTF-8" />
    <title>SmartLab - Reporting TSOU</title>
    <style type="text/css">
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        }

        #chartdiv {
            width: 100%;
            height: 800px;
        }


        .amcharts-amexport-item {
            border: 2px solid #777;
        }

        .amcharts-amexport-top .amcharts-amexport-item > .amcharts-amexport-menu {
            top: 5px !important;
            right: 2px !important;
        }
    </style>
</head>

<body>
    <h2 style="text-align:center;">Test System Overall Usage</h2>
    <div style="height:40px">
        @* Export to Excel- oig1cob *@
        <input type="image" src="~/Content/images/Excel_Icon.png" alt="Submit" width="39" height="35" id="export" class="btn btn-outline-secondary btn-sm" style="margin:5px;float:right;" disabled/>

        <script type="text/javascript">
            document.querySelector('#export').addEventListener('click', function () {
                    debugger;

                        var url='@Url.Action("ExportTSOUDataToExcel","LabCar",new {source="TSOU_DA_TS"})';
                        window.location.href=url;
                }, false);

        </script>
        @*end: Export to Excel- oig1cob*@
        </div>
        <div id="chartdiv">
        </div>/
        <script src="../../Scripts/core.js" type="text/javascript"></script>
        <script src="../../Scripts/charts.js" type="text/javascript"></script>
        <script src="../../Scripts/animated.js" type="text/javascript"></script>
        @section Scripts{
            <!-- Chart code -->
            <script type="text/javascript">

        debugger;

        var averageManHours = @Math.Round(Model.OverallManualHours/Model.LabFields.Count(), 2);
        var averageAutoHours = @Math.Round(Model.OverallAutomatedHours/Model.LabFields.Count(),2);
        var averageAllHours = @Math.Round((Model.OverallAutomatedHours+Model.OverallManualHours)/@Model.LabFields.Count(),2);

            // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end
            am4core.options.queue = true;
            am4core.options.onlyShowOnViewport = true;

    var chart = am4core.create("chartdiv", am4charts.XYChart);
    chart.hiddenState.properties.opacity = 0;
            //chart



            //foreachloop
            const sum = 0;
            var cnt =0;
          @{uint cntName = 0;}
            @foreach (LC_Reports_V1.Models.TsouChartAttributesLab labs in Model.LabFields)
            {
                if (labs != null) {
                    <text>

                    chart.data[cnt] =
                    {
                        name: "@labs.TSOULabel",
                        manual: "@Math.Round(labs.ManualTotalTime, 2)",
                        automated: "@Math.Round(labs.AutomatedTotalTime, 2)",
                        reader: {
                            manual: "@Math.Round(labs.ManualTotalTime)",
                            automated: "@Math.Round(labs.AutomatedTotalTime)",
                            total: "@Math.Round(labs.TotalSum)"
                        }

            };

                    @{cntName++;}
                    cnt++;

                    </text>

                            }
                        }

            debugger;


                   // percentage on Y axis
                    @*var diffdate = new Date(@{ Model.EndTime.Subtract(Model.StartTime) });
                    var axisval=diffdate*12;*@

                    @*var diffdate = @{ Model.EndTime.Subtract(Model.StartTime) };
                    var axisval=diffdate*12;*@


                    const date1 = new Date("@Model.StartTime");
                    const date2 = new Date("@Model.EndTime");
                    //const stime = date1.getTime();
                    //const etime = date2.getTime();
                    //var hours = Math.abs(date1 - date2) / 36e5;
                    const diffTime = Math.abs(date2 - date1);
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                    //const yval = diffDays * 12;
                    const yval = diffDays * 24;

                    //const per = 100 * (sum / yval);
                    /// seconds
                    //var diff = Math.abs(date1.getTime() - date2.getTime()) / 1000;
                    //var yvalue=((diff)*43200);
                    //var date = new Date(diffTime * 1000);
                    //var hours = date.getHours();
                    //var minutes = "0" + date.getMinutes();
                    //var seconds = "0" + date.getSeconds();
                    //// Will display time in 10:30:23 format
                    //var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);


                    chart.colors.step=2;
                    chart.padding(30, 30, 10, 30);
                    chart.legend = new am4charts.Legend();

                    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "name";
                    categoryAxis.renderer.grid.template.location = 0;
                    categoryAxis.renderer.labels.template.verticalCenter = "middle";
                    categoryAxis.renderer.labels.template.horizontalCenter = "left";
                    categoryAxis.renderer.grid.template.above = true;
                    categoryAxis.renderer.grid.template.disabled = true;
                    categoryAxis.renderer.labels.template.rotation = 270;
                    categoryAxis.renderer.minGridDistance = 5;



                    var title = chart.titles.create();
                            title.text = "Location: @Model.Location; Model: @Model.Model; StartDate: @Model.StartTime.ToShortDateString() - EndDate: @Model.EndTime.ToShortDateString()";
                    title.fontSize = 20;

                    //categoryAxis.renderer.cellStartLocation = 0;
                    //categoryAxis.renderer.cellEndLocation = 0.5;


                    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                            chart.events.on("ready", function(ev) {
                                valueAxis.min = valueAxis.minZoomed;
                                valueAxis.max = yval;
                            });
                    valueAxis.strictMinMax = true;
                    valueAxis.calculateTotals = true;
                    valueAxis.renderer.minWidth = 30;
                    //categoryAxis.renderer.minWidth = 80;
                    //categoryAxis.gridAlpha = 0;
                    //categoryAxis.autoGridCount = true;
                    //categoryAxis.minHorizontalGap = 100;
                    //categoryAxis.gridPosition = "start";
                    //categoryAxis.equalSpacing = false;
                    //categoryAxis.parseDates = false;
                    //categoryAxis.minPeriod = "DD";
                    //categoryAxis.startOnAxis = true;
                    //categoryAxis.axisColor = "#dcdcdc";
                    //categoryAxis.axisThickness = 1;
                    //categoryAxis.showLastLabel = true;

                    //1
                    var series1 = chart.series.push(new am4charts.ColumnSeries());
        series1.columns.template.width = am4core.percent(30);
        series1.columns.template.propertyFields.dummyData = "reader";
            series1.columns.template.tooltipText =
                         " Manual Hours: {valueY} hrs \x0a Total Usage: {dummyData.total} hrs";
                     //" Manual Hours: {valueY.totalPercent.formatNumber('#.00')}%}";
                    series1.name = "Manual Total Hours : @Math.Round(@Model.OverallManualHours,2) hrs";
                    series1.dataFields.categoryX = "name";
                    series1.dataFields.valueY = "manual";
                    series1.dataItems.template.locations.categoryX = 0.5;
                    series1.stacked = true;
                    series1.tooltip.pointerOrientation = "vertical";
                    series1.tooltip.exportable = true;

                    var bullet1 = series1.bullets.push(new am4charts.LabelBullet());
                            bullet1.interactionsEnabled = false;
                    bullet1.label.text = "Manual Hours: {valueY} hrs";
                    bullet1.label.fill = am4core.color("#ffffff");
                    bullet1.locationY = 0.5;


                    //2
                    var series2 = chart.series.push(new am4charts.ColumnSeries());
            series2.columns.template.width = am4core.percent(30);
            series2.columns.template.propertyFields.dummyData = "reader";
                    series2.columns.template.tooltipText =
                    "Automated Hours: {valueY} hrs ] \x0a Total Usage: {dummyData.total} hrs ";
                    series2.name = "Automated Total Hours : @Math.Round(@Model.OverallAutomatedHours,2) hrs";
                    series2.dataFields.categoryX = "name";
                    series2.dataFields.valueY = "automated";
                    series2.dataItems.template.locations.categoryX = 0.5;
                    series2.stacked = true;
                    series2.tooltip.pointerOrientation = "vertical";
                    series2.tooltip.exportable = true;

                    var bullet2 = series2.bullets.push(new am4charts.LabelBullet());
                            bullet2.interactionsEnabled = false;
                    bullet2.label.text = "Automated Hours: {valueY} hrs";
                    bullet2.locationY = 0.5;
                    bullet2.label.fill = am4core.color("#ffffff");

                    chart.scrollbarX = new am4core.Scrollbar();
                    chart.scrollbarX.parent = chart.topAxesContainer;

                    chart.scrollbarY = new am4core.Scrollbar();
                    chart.scrollbarY.parent = chart.leftAxesContainer;

            chart.chartContainer.wheelable = false;
        var AvgInformation = chart.createChild(am4core.Label);
        AvgInformation.text = "Total No of Systems : @Model.LabFields.Count() | Average Manual Hours : " + averageManHours + " | Average Automated Hours : " + averageAutoHours+" | Average Overall Hours: "+ averageAllHours;
        AvgInformation.fontSize = 14;
        AvgInformation.align = "center";
                        chart.exporting.menu = new am4core.ExportMenu();
        chart.exporting.filePrefix = "TSOU_@Model.Location @Model.Model @Model.StartTime.ToShortDateString() @Model.EndTime.ToShortDateString()";

                $("#export").prop('disabled', false); 
            </script>
        }
        <!-- HTML -->

</body>
</html>
@*<html>
    <body>
        <h1 style="text-align:center;"> Test System Overall Usage</h1>

        <h3 style="text-align:center">Model: @Model.Model, Location: @Model.Location, Start Date: @Model.StartTime.ToShortDateString() -End Date: @Model.EndTime.ToShortDateString()</h3>
        <br />
        <h4 style="text-align:center"><b>Manual Total Hours: @Math.Round(Model.OverallManualHours, 2)  &nbsp  &nbsp Automated Total Hours: @Math.Round(Model.OverallAutomatedHours, 2)</b> </h4>
        <style type="text/css">
            #chart {
                height: 600px;
            }

            .button {
                align-content: center;
            }
        </style>

    </body>

    </html>
    <script>debugger;

        </script>




    @{ string str1 = string.Empty;
        //  string str2 = string.Empty;

        // str1 = "Model: " + Model.Model + ' ' + ", " + "Location: " + Model.Location + ' ' + ", " + "Start Date: " + Model.StartTime.ToShortDateString() + ' ' + '-' + ' ' + "End Date: " + Model.EndTime.ToShortDateString() + "\r\n" + ;



        //foreach (LC_Reports_V1.Models.TsouChartAttributesLab lab in Model.LabFields)
        //{

        //    if (lab == null)
        //    {
        //        continue;
        //    }
        //    str2 = lab.Inventory + '_' + lab.id;
        //}
    }

    @(Html.DevExtreme().Chart()
        .ID("chart")
        .CommonSeriesSettings(s => s
            .ArgumentField("TSOULabel")
            .Type(SeriesType.StackedBar)


        )
         .ArgumentAxis(a =>
         {
             a.ArgumentType(ChartDataType.DateTime);
             a.AggregationInterval(VizTimeInterval.Week);
             a.ValueMarginsEnabled(false);

         })

        .Series(s =>
        {
            s.Add().ValueField("ManualTotalTime").Name("Manual Hours");
            s.Add().ValueField("AutomatedTotalTime").Name("Automated Hours");

        })

        .ArgumentAxis(a => a
                .Label(l => l
                    .OverlappingBehavior(OverlappingBehavior.Rotate)
                    .WordWrap(VizWordWrap.None)
                )
                )
            .Legend(l => l
            .VerticalAlignment(VerticalEdge.Bottom)
            .HorizontalAlignment(HorizontalAlignment.Center)
            .ItemTextPosition(Position.Bottom)





        )
        .ValueAxis(a => a
            .Add()
            .Title(t => t.Text("Hours"))
            .Position(Position.Right)
        )


        .Export(e => e.Enabled(true))

        .ScrollBar(s => s.Visible(true))
       .ZoomAndPan(z => z
            .ArgumentAxis(ChartZoomAndPanMode.Both)
            .ValueAxis(ChartZoomAndPanMode.Both)
            .DragToZoom(true)
            .AllowMouseWheel(true)
            .PanKey(EventKeyModifier.Shift)
        )

        .Tooltip(t => t
            .Enabled(true)
            .Location(ChartTooltipLocation.Edge)

            .CustomizeTooltip(@<text>
                    function(arg) {
                    return {
                    text: arg.seriesName  + arg.valueText
                    };
                    }
            </text>)

    )

    .DataSource(Model.LabFields)
    )*@



