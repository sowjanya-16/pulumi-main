<!--Start Show Session Expire Warning Popup here -->
<div class="modal fade" id="session-expire-warning-modal" aria-hidden="true" data-keyboard="false" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Session Expire Warning</h4>
            </div>
            <div class="modal-body"> Your session will expire in <span id="seconds-timer"></span> seconds. Do you want to extend the session? </div>
            <div class="modal-footer">
                <button id="btnSessionOk" type="button" class="btn btn-default" style="padding: 6px 12px; margin-bottom: 0; font-size: 14px; font-weight: normal; border: 1px solid transparent; border-radius: 4px;  background-color: #428bca; color: #FFF;">Yes</button>
                <button id="btnLogoutNow" type="button" class="btn btn-default" style="padding: 6px 12px; margin-bottom: 0; font-size: 14px; font-weight: normal; border: 1px solid transparent; border-radius: 4px;  background-color: #428bca; color: #FFF;">No</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        debugger;
        var sessionTimeoutInMinutes = 15;
        var warningTimeoutInMilliseconds = sessionTimeoutInMinutes * 60 * 1000; // Convert minutes to milliseconds
        var counter = 30;
        var warningTimer;
        var sessoff = "/Budgeting/Index"; //logout action url
        var sessurl = "/home/KeepSessionAlive";
        var renew = 0;

        $("#session-expire-warning-modal").modal('hide');
        //ClientAlive = 0;
        //CheckAlive();
        //ActiveCheck();
        //NotifyUser();
        $("#btnSessionOk").click(function () {
            debugger;
            //counter = 30;
            
            $("#session-expire-warning-modal").modal('hide');
            PingServer('hbeat');
            //hold = 0;
            counter = 30;
        });
        $("#btnLogoutNow").click(function () {
           
            $("#session-expire-warning-modal").modal('hide');
            window.location = sessoff;
        });

        // Function to reset the warning timer
        function resetWarningTimer() {
            //alert('resetWarningTimer');
            clearTimeout(warningTimer);
            warningTimer = setTimeout(displaySessionTimeoutWarning, warningTimeoutInMilliseconds);
        }

        // Function to display the session timeout warning
        function displaySessionTimeoutWarning() {
            //alert("Your session is about to expire due to inactivity.");
            //alert('displaySessionTimeoutWarning');
            counter = 30;
            renew = 0;
            var dialogDisplaySeconds = counter;
            popTimer = setInterval(function () {
                $('#seconds-timer').html(dialogDisplaySeconds);
                dialogDisplaySeconds -= 1;
            }, 1000);

            
            $("#session-expire-warning-modal").modal('show');
            //beep();
            setTimeout(function () {
                if (renew == 0) {
                    $("#session-expire-warning-modal").modal('hide');
                    if (typeof callback === 'function') {
                        callback(); // Call the callback function (PingServer) if provided
                    }
                    window.location = sessoff;
                }
            }, counter * 1000);
            // Perform additional actions, such as displaying a modal or redirecting the user

        }

        function PingServer(src) {
            debugger;
            //alert('Pingserver');
            $.ajax({
                type: "POST",
                url: sessurl,
                success: function (data) {
                },
                error: function (data) {
                    alert("ERROR");
                    console.log("Error posting to " & keepSessionAliveUrl);
                }
            });
            //clearTimeout(abeat);
            //beattimex = beattime / 1000;
            //clearTimeout(hbeat);
            //timeoutx = timeout / 1000;
            clearTimeout(popTimer);
            ////ClientAlive = 0;
            ////NotifyUser();
            //ActiveCheck();
            //CheckAlive();
            renew = 1;
        }

        // Event listeners for user activity
        $(document).on('mousemove keydown', function () {
            resetWarningTimer();
        });

        // Start the initial warning timer
        resetWarningTimer();




    });


</script>
