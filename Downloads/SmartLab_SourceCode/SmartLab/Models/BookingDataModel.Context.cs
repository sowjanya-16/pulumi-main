//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LC_Reports_V1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BookingServerReplicaEntities : DbContext
    {
        public BookingServerReplicaEntities()
            : base("name=BookingServerReplicaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LabInfo> LabInfoes { get; set; }
        public virtual DbSet<LabType> LabTypes { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<tactivity> tactivities { get; set; }
        public virtual DbSet<LabOEM> LabOEMs { get; set; }
        public virtual DbSet<DailySummaryTable> DailySummaryTables { get; set; }
        public virtual DbSet<tactivitiesUpdate> tactivitiesUpdates { get; set; }
        public virtual DbSet<CPC_Summary_Table> CPC_Summary_Table { get; set; }
        public virtual DbSet<DailySummaryTable_v3> DailySummaryTable_v3 { get; set; }
        public virtual DbSet<OSS_LabAdmin> OSS_LabAdmin { get; set; }
        public virtual DbSet<TimeConfig> TimeConfigs { get; set; }
        public virtual DbSet<OSS_Admin> OSS_Admin { get; set; }
        public virtual DbSet<LabComputersPr> LabComputersPrs { get; set; }
        public virtual DbSet<PROJECT_ADMINS_TSUA> PROJECT_ADMINS_TSUA { get; set; }
        public virtual DbSet<ProjectUsersdbTSUA> ProjectUsersdbTSUAs { get; set; }
    
        [DbFunction("BookingServerReplicaEntities", "fnGetWeekDates")]
        public virtual IQueryable<fnGetWeekDates_Result> fnGetWeekDates(Nullable<int> year, Nullable<int> weekNo)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var weekNoParameter = weekNo.HasValue ?
                new ObjectParameter("WeekNo", weekNo) :
                new ObjectParameter("WeekNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetWeekDates_Result>("[BookingServerReplicaEntities].[fnGetWeekDates](@year, @WeekNo)", yearParameter, weekNoParameter);
        }
    
        public virtual int GetCPCSummary(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCPCSummary", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetDatewiseData_Result> GetDatewiseData(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> labID, Nullable<int> locationID, Nullable<int> computerID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var labIDParameter = labID.HasValue ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var computerIDParameter = computerID.HasValue ?
                new ObjectParameter("ComputerID", computerID) :
                new ObjectParameter("ComputerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDatewiseData_Result>("GetDatewiseData", startDateParameter, endDateParameter, labIDParameter, locationIDParameter, computerIDParameter);
        }
    
        public virtual int GetTActivitiesSummary(Nullable<int> month, Nullable<int> computerID)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var computerIDParameter = computerID.HasValue ?
                new ObjectParameter("ComputerID", computerID) :
                new ObjectParameter("ComputerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTActivitiesSummary", monthParameter, computerIDParameter);
        }
    
        public virtual ObjectResult<GetTActivitiesSummary_1_Result> GetTActivitiesSummary_1(Nullable<int> month, Nullable<int> computerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var computerIDParameter = computerID.HasValue ?
                new ObjectParameter("ComputerID", computerID) :
                new ObjectParameter("ComputerID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTActivitiesSummary_1_Result>("GetTActivitiesSummary_1", monthParameter, computerIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetTActivitiesUpdate_Result> GetTActivitiesUpdate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> computerID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var computerIDParameter = computerID.HasValue ?
                new ObjectParameter("ComputerID", computerID) :
                new ObjectParameter("ComputerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTActivitiesUpdate_Result>("GetTActivitiesUpdate", startDateParameter, endDateParameter, computerIDParameter);
        }
    
        public virtual ObjectResult<GetWeekendSummary_Result> GetWeekendSummary(Nullable<int> computerID)
        {
            var computerIDParameter = computerID.HasValue ?
                new ObjectParameter("ComputerID", computerID) :
                new ObjectParameter("ComputerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekendSummary_Result>("GetWeekendSummary", computerIDParameter);
        }
    
        public virtual int InsertOssLabAdmin(string labName, string fQDN, string location, string lab, string projectChange, string currentProject, string category, string type, string responsible, string setupType)
        {
            var labNameParameter = labName != null ?
                new ObjectParameter("LabName", labName) :
                new ObjectParameter("LabName", typeof(string));
    
            var fQDNParameter = fQDN != null ?
                new ObjectParameter("FQDN", fQDN) :
                new ObjectParameter("FQDN", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var labParameter = lab != null ?
                new ObjectParameter("Lab", lab) :
                new ObjectParameter("Lab", typeof(string));
    
            var projectChangeParameter = projectChange != null ?
                new ObjectParameter("ProjectChange", projectChange) :
                new ObjectParameter("ProjectChange", typeof(string));
    
            var currentProjectParameter = currentProject != null ?
                new ObjectParameter("CurrentProject", currentProject) :
                new ObjectParameter("CurrentProject", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var responsibleParameter = responsible != null ?
                new ObjectParameter("Responsible", responsible) :
                new ObjectParameter("Responsible", typeof(string));
    
            var setupTypeParameter = setupType != null ?
                new ObjectParameter("SetupType", setupType) :
                new ObjectParameter("SetupType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOssLabAdmin", labNameParameter, fQDNParameter, locationParameter, labParameter, projectChangeParameter, currentProjectParameter, categoryParameter, typeParameter, responsibleParameter, setupTypeParameter);
        }
    }
}
