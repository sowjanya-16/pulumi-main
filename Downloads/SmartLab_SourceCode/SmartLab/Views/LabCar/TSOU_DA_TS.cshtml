@model LC_Reports_V1.Models.TsouChartAttributes
@{
    ViewBag.Title = "TSOU_DA_TS";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GKX0NP1SYR"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-GKX0NP1SYR');
    </script>
    <meta charset="UTF-8" />
    <title>SmartLab - Reporting TSOU</title>
    <style type="text/css">
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        }

        #chartdiv {
            width: 100%;
            height: 800px;
        }


        .amcharts-amexport-item {
            border: 2px solid #777;
        }

        .amcharts-amexport-top .amcharts-amexport-item > .amcharts-amexport-menu {
            top: 5px !important;
            right: 2px !important;
        }
        /*#button {
            position: absolute;
            top: 100px;
            left: 100px;
            align-content: center;
        }

        .create {
            display: inline-block;
            border: 1px solid #dfdfe0;
            outline: none;
            padding: 10px 20px;
            line-height: 1.4;
            background-color: #dfdfe0;
            border: 1px solid #dfdfe0;
            position: relative;
            transition: padding-right .3s ease;
            box-shadow: 0 1px 0 #dfdfe0 inset, 0px 1px 0 #dfdfe0;
            cursor: pointer;
            color: black;
            padding: 12px 12px 12px 12px;
            font-size: 14px;
        }

            .create:hover {
                background-color: #cfd0d1;
            }

            .create:active {
                box-shadow: 0 0 10px #dfdfe0 inset, 0px 1px 0 #dfdfe0;
                color: silver;
                background: #dfdfe0;
            }*/
    </style>
</head>

<body>
    <h2 style="text-align:center;">Test System Overall Usage</h2>
    <div style="height:40px">
        @* Export to Excel- oig1cob *@
        <input type="image" src="~/Content/images/Excel_Icon.png" alt="Submit" width="39" height="35" id="export" class="btn btn-outline-secondary btn-sm" style="margin:5px; float:right;" disabled />







        <script type="text/javascript">
            document.querySelector('#export').addEventListener('click', function () {
                    debugger;

                        var url='@Url.Action("ExportTSOUDataToExcel","LabCar",new {source="TSOU_DA_TS",sdate=Model.StartTime.ToShortDateString(),edate=Model.EndTime.ToShortDateString()})';
                        window.location.href=url;
                }, false);

        </script>

        @*end: Export to Excel- oig1cob*@
        </div>
        @*<div id="button">

                <button type="button" id="gen" class="create"><b>Go Back</b></button>

            </div>*@
        <div id="chartdiv">
        </div>
        <script src="../../Scripts/core.js" type="text/javascript"></script>
        <script src="../../Scripts/charts.js" type="text/javascript"></script>
        <script src="../../Scripts/animated.js" type="text/javascript"></script>
        <!-- Chart code -->
        @section Scripts{
            <script type="text/javascript">

        debugger;
                $(function () {
            document.querySelector('.create').addEventListener('click', function () {
                debugger;
                    var url='@Url.Action("Lab_Report", "LabCar",new {reload=true})';
                    window.location.href=url;
            }, false);
        });
    // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end
    am4core.options.queue = true;
    am4core.options.onlyShowOnViewport = true;

    var chart = am4core.create("chartdiv", am4charts.XYChart);
    chart.hiddenState.properties.opacity = 0;
            //chart



            //foreachloop
            const sum = 0;
            var cnt =0;
          @{uint cntName = 0;}
        @{double days = Model.EndTime.Subtract(Model.StartTime).TotalDays;}
        @{double hours_100p = (days*12);}
            @foreach (LC_Reports_V1.Models.TsouChartAttributesLab labs in Model.LabFields)
            {
                if (labs != null) {
                    <text>

                    chart.data[cnt] =
                    {
                        name: "@labs.TSOULabel",
                        manual: "@Math.Round((labs.TotalSum/hours_100p)*100, 2)",
                        reader: {
                            manual: "@Math.Round(labs.ManualTotalTime)",
                            automated: "@Math.Round(labs.AutomatedTotalTime)",
                            total: "@Math.Round(labs.TotalSum)"
                        }

            };

                    @{cntName++;}
                    cnt++;

                    </text>

                            }
                        }







        chart.colors.step=2;
        chart.padding(30, 30, 10, 30);
        chart.legend = new am4charts.Legend();

        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "name";
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.labels.template.verticalCenter = "middle";
        categoryAxis.renderer.labels.template.horizontalCenter = "left";
        categoryAxis.renderer.grid.template.above = true;
        categoryAxis.renderer.grid.template.disabled = true;
        categoryAxis.renderer.labels.template.rotation = 270;
        categoryAxis.renderer.minGridDistance = 5;



        var title = chart.titles.create();
        title.text = "Location: @Model.Location @Model.Model StartDate: @Model.StartTime.ToShortDateString() - EndDate: @Model.EndTime.ToShortDateString() | All Days x 12 hrs = 100 % | All Days x 8 hrs = 67 %";
        title.fontSize = 20;

        //categoryAxis.renderer.cellStartLocation = 0;
        //categoryAxis.renderer.cellEndLocation = 0.5;


        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                chart.events.on("ready", function(ev) {
                    valueAxis.min = 0;
                    valueAxis.max = 200;
                });
        valueAxis.strictMinMax = true;
        valueAxis.calculateTotals = true;
        valueAxis.renderer.minGridDistance = 20;
        valueAxis.title.text = "Utilization %";
        valueAxis.title.rotation = 270;
        valueAxis.title.align = "center";
        valueAxis.title.valign = "middle";
        valueAxis.title.dy = -40;
        valueAxis.title.fontWeight = 600;

        //Code to add the range mark
        var range = valueAxis.axisRanges.create();
        range.value = 100; //100%
        range.grid.stroke = am4core.color("#33cc33"); //green
        range.grid.strokeWidth = 2;
        range.grid.strokeOpacity = 1;
        range.grid.above = true; //to display the grid line on top of the data.
        range.label.inside = true;
        range.label.text = "\xa0\xa0\xa0\xa0\xa0\xa0>100%";
        range.label.fontWeight = 750;
        range.label.fill = range.grid.stroke;
        range.label.verticalCenter = "bottom";
        var rangeRed = valueAxis.axisRanges.create();
        rangeRed.value = 67; //67%
        rangeRed.grid.stroke = am4core.color("#ff0000"); //red
        rangeRed.grid.strokeWidth = 2;
        rangeRed.grid.strokeOpacity = 1;
        rangeRed.grid.above = true; //to display the grid line on top of the data.
        rangeRed.label.inside = true;
        rangeRed.label.text = "\xa0\xa0\xa0\xa0\xa0\xa0>67%";
        rangeRed.label.fontWeight = 750;
        rangeRed.label.fill = rangeRed.grid.stroke;
        rangeRed.label.verticalCenter = "bottom";

        //Code to shade the marked ranges
        //background fill green for >100% utilization
        var greenBG = valueAxis.axisRanges.create();
        greenBG.value = 100
        greenBG.endValue = 200;
        greenBG.axisFill.fill = am4core.color("#99ff99");
        greenBG.axisFill.fillOpacity = 0.2;
        greenBG.grid.strokeOpacity = 0;

        //background fill yellow for 100 > x > 50 utilization
        var yellowBG = valueAxis.axisRanges.create();
        yellowBG.value = 67;
        yellowBG.endValue = 100;
        yellowBG.axisFill.fill = am4core.color("#ffff99");
        yellowBG.axisFill.fillOpacity = 0.2;
        yellowBG.grid.strokeOpacity = 0;

        //background fill red for <50% utilization
        var redBG = valueAxis.axisRanges.create();
        redBG.value = 0;
        redBG.endValue = 67;
        redBG.axisFill.fill = am4core.color("#ff6666");
        redBG.axisFill.fillOpacity = 0.2;
        redBG.grid.strokeOpacity = 0;
                    //1
        var series1 = chart.series.push(new am4charts.ColumnSeries());
        series1.columns.template.width = am4core.percent(30);
        series1.columns.template.propertyFields.dummyData = "reader";
        series1.columns.template.tooltipText = "Total Usage: {dummyData.total} hrs";
            //" Manual Hours: {valueY.totalPercent.formatNumber('#.00')}%}";
        series1.name = "Total Usage : @Math.Round(@Model.OverallManualHours,2) hrs";
        series1.dataFields.categoryX = "name";
        series1.dataFields.valueY = "manual";
        series1.dataItems.template.locations.categoryX = 0.5;
        series1.stacked = true;
        series1.tooltip.pointerOrientation = "vertical";
        series1.tooltip.exportable = true;

        var bullet1 = series1.bullets.push(new am4charts.LabelBullet());
                bullet1.interactionsEnabled = false;
        bullet1.label.text = "Total Usage: {valueY} %";
        bullet1.label.fill = am4core.color("#ffffff");
        bullet1.locationY = 0.5;


        @*//2
        var series2 = chart.series.push(new am4charts.ColumnSeries());
        series2.columns.template.width = am4core.percent(30);
        series2.columns.template.propertyFields.dummyData = "reader";
        series2.columns.template.tooltipText =
        "Automated Usage: {dummyData.automated} hrs \x0a Total Usage: {dummyData.total} hrs";
        series2.name = "Automated Usage : @Math.Round(@Model.OverallAutomatedHours,2) hrs";
        series2.dataFields.categoryX = "name";
        series2.dataFields.valueY = "automated";
        series2.dataItems.template.locations.categoryX = 0.5;
        series2.stacked = true;
        series2.tooltip.pointerOrientation = "vertical";
        series2.tooltip.exportable = true;*@

        //var bullet2 = series2.bullets.push(new am4charts.LabelBullet());
        //        bullet2.interactionsEnabled = false;
        //bullet2.label.text = "Automated Usage: {valueY} %";
        //bullet2.locationY = 0.5;
        //bullet2.label.fill = am4core.color("#ffffff");

        chart.scrollbarX = new am4core.Scrollbar();
        chart.scrollbarX.parent = chart.topAxesContainer;

        chart.scrollbarY = new am4core.Scrollbar();
        chart.scrollbarY.parent = chart.leftAxesContainer;
        var averageManHours = @Math.Round(Model.OverallManualHours/Model.LabFields.Count(), 2);
        var averageAutoHours = @Math.Round(Model.OverallAutomatedHours/Model.LabFields.Count(),2);
        var averageAllHours = @Math.Round((Model.OverallAutomatedHours+Model.OverallManualHours)/@Model.LabFields.Count(),2);
        chart.chartContainer.wheelable = false;
        var AvgInformation = chart.createChild(am4core.Label);
        AvgInformation.text = "Total No of Systems : @Model.LabFields.Count() | Average Overall Hours: "+ averageAllHours;;
        AvgInformation.fontSize = 14;
        AvgInformation.align = "center";

        chart.exporting.menu = new am4core.ExportMenu();
        chart.exporting.filePrefix = "TSOU_@Model.Location @Model.Model @Model.StartTime.ToShortDateString() @Model.EndTime.ToShortDateString()";

                $("#export").prop('disabled', false); 
            </script>
            <!-- HTML -->
        }
</body>
</html>

