@model List<LC_Reports_V1.Models.LC_TSIU>

@{
    ViewBag.Title = "Test System Individual Usage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GKX0NP1SYR"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-GKX0NP1SYR');
    </script>
    <meta charset="UTF-8" />
    <title>SmartLab - Reporting TSIU</title>
    <link rel="stylesheet" href="index.css" />
</head>
<body>
    <div>
        <h2 style="text-align:center;">Test System Individual Usage</h2>
        <div style="height:40px">
            @* Export to Excel- oig1cob *@
            <input type="image" src="~/Content/images/Excel_Icon.png" alt="Submit" width="39" height="35" id="export" class="btn btn-outline-secondary btn-sm" style="margin:5px; float:right;" disabled />
            <script type="text/javascript">
            document.querySelector('#export').addEventListener('click', function () {
                    debugger;

                        var url='@Url.Action("ExportTSIUDataToExcel","LabCar",new {id=Model.ElementAt(0).ID_key})';
                        window.location.href=url;
                }, false);

            </script>
            @*end: Export to Excel- oig1cob*@
        </div>
        @*<p>
                @{
                    if (Model.Count > 0)
                    {
                        @Model.ElementAt(0).LC_Location
                        <b>;</b>
                        @Model.ElementAt(0).LC_Name
                    }
                }

            </p>*@
    </div>
    <div id="chartdiv"></div>
    <script src="~/Scripts/core.js"></script>
    <script src="~/Scripts/charts.js"></script>
    <script src="~/Scripts/animated.js"></script>
    @section Scripts{
        <script>

        //debugger;
        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end
        @*@Model= sorted(Model);*@


        var chart = am4core.create("chartdiv", am4charts.XYChart);
        chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
        chart.paddingRight = 30;
        chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
        if ( @Model.Count==0) {
            var url = '@Url.Action("Lab_Report","LabCar")';
            window.location.href = url;
        }

        var title = chart.titles.create();
            title.text = "Lab Name: @Model.ElementAt(0).LC_Name; Location: @Model.ElementAt(0).LC_Location; LabID: @Model.ElementAt(0).ID_key";
            title.fontSize = 20;

        // Set cell size in pixels
        //var cellSize = 1;
        //chart.events.on("datavalidated", function(ev) {

        //    // Get objects of interest
        //    var chart = ev.target;
        //    var categoryAxis = chart.yAxes.getIndex(0);

        //    // Calculate how we need to adjust chart height
        //    var adjustHeight = chart.data.length * cellSize - categoryAxis.pixelHeight;

        //    // get current chart height
        //    var targetHeight = chart.pixelHeight + adjustHeight;

        //    // Set it on chart's container
        //    chart.svgContainer.htmlElement.style.height = targetHeight + "px";
        //});

        chart.svgContainer.htmlElement.style.height = "1800px";
        //yyyy-MM-dd
        //chart.colors.list = [
        //  am4core.color("#78BE20"), //Auto
        //  am4core.color("#008ECF"), //Man
        //  am4core.color("#23CF00"), //Oth
        //  am4core.color("#FF9671"),
        //  am4core.color("#FFC75F"),
        //  am4core.color("#0079CF")
        //];
        var colorSet = new am4core.ColorSet();
        colorSet.saturation = 0.4;
        var range = @Model.Count;
        var cnt = 0;
        var colourToUse;
        var dayChangeFlag = false;
        @{string inputDateFormat = "HH:mm:ss";
            uint count = 0;}
        @foreach (LC_Reports_V1.Models.LC_TSIU TSIUElement in Model)
        {
        <text>
        var strManual = "Manual";
        var strAuto = "Automated";
        if (strAuto.localeCompare("@TSIUElement.TypeofUsage.ToString()") == 0)
        {
            colourToUse = am4core.color("green").lighten(0.3);
        }
        else if (strAuto.localeCompare("@TSIUElement.TypeofUsage.ToString()") == -1)
        {
            colourToUse = am4core.color("orange");
        }
        if(strManual.localeCompare("@TSIUElement.TypeofUsage.ToString()") == 0)
        {
            colourToUse = am4core.color("red").lighten(0.3);
        }
        else if(strManual.localeCompare("@TSIUElement.TypeofUsage.ToString()") == -1)
        {
            colourToUse = am4core.color("blue").lighten(0.3);
        }

        var strEndDay = "@TSIUElement.endTime.Date.ToString("dd/MM/yyyy")";
        if(strEndDay.localeCompare("@TSIUElement.startTime.Date.ToString("dd/MM/yyyy")") == 0)
        {
            //debugger;
            dayChangeFlag=false;
        }
        else
        {
            //debugger;
            dayChangeFlag = true;
        }
        if(!dayChangeFlag)
        {
            chart.data[cnt]={
                "days": "@TSIUElement.startTime.DayOfWeek.ToString().Substring(0, 3), @TSIUElement.startTime.Date.ToString("dd/MM/yyyy")",
                "start": "@TSIUElement.startTime.ToString(inputDateFormat)",
                "end": "@TSIUElement.endTime.ToString(inputDateFormat)",
                "color": colourToUse,
                "task": "@String.Concat(TSIUElement.TypeofUsage.ToString(), count.ToString())"
            };
                    cnt = cnt+1;
        @{count = count + 1; }
        }
        else
        {
            @{double daydiff = Math.Ceiling(TSIUElement.endTime.Subtract(TSIUElement.startTime).TotalDays); }
            debugger;
        @do
            {
                <text>
            if (@daydiff == 0) {
                chart.data[cnt] = {
                    "days": "@TSIUElement.endTime.DayOfWeek.ToString().Substring(0,3), @TSIUElement.endTime.Date.ToString("dd/MM/yyyy")", //.Date.ToString("dd/MM/yyyy")
                    "start": "00:00:01",
                    "end": "@TSIUElement.endTime.ToString(inputDateFormat)",
                    "color": colourToUse,
                    "task": "@String.Concat(TSIUElement.TypeofUsage.ToString(), count.ToString())"
                };
            }
            else if (@daydiff == @Math.Ceiling(TSIUElement.endTime.Subtract(TSIUElement.startTime).TotalDays)) {
                chart.data[cnt] = {
                    "days": "@TSIUElement.startTime.DayOfWeek.ToString().Substring(0, 3), @TSIUElement.startTime.Date.ToString("dd/MM/yyyy")",
                    "start": "@TSIUElement.startTime.ToString(inputDateFormat)",
                    "end": "23:59:59",
                    "color": colourToUse,
                    "task": "@String.Concat(TSIUElement.TypeofUsage.ToString(), count.ToString())"
                };
            }
            else {
                chart.data[cnt] = {
                    "days": "@TSIUElement.endTime.AddDays(-daydiff).DayOfWeek.ToString().Substring(0, 3), @TSIUElement.endTime.AddDays(-daydiff).Date.ToString("dd/MM/yyyy")",
                    "start": "00:00:01",
                    "end": "23:59:59",
                    "color": colourToUse,
                    "task": "@String.Concat(TSIUElement.TypeofUsage.ToString(), count.ToString())"
                };
            }

                cnt = cnt+1;
                @{count = count + 1; }
                </text>
                daydiff--;
             }
             while (daydiff >= 0);

        }


        </text>


            }
        //for(var i = 0; i < range; i++){
        //    chart.data[i]={
        //        "category": "",
        //        "start": "2016-01-01",
        //        "end": "2016-01-14",
        //        "color": colorSet.getIndex(0).brighten(0),
        //        "task": "Gathering requirements"
        //    };
        //}

        chart.dateFormatter.dateFormat = "HH:mm:ss";
        chart.dateFormatter.inputDateFormat = "HH:mm:ss";

        var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "days";
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.inversed = false;
        categoryAxis.renderer.minGridDistance = 5;
        categoryAxis.renderer.maxGridDistance = 30;
        categoryAxis.title.text = "Days";

        var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
        dateAxis.renderer.minGridDistance = 70;
        dateAxis.baseInterval = { count: 1, timeUnit: "second" };
        dateAxis.dateFormats.setKey("second", "HH:mm:ss");
        //dateAxis.max = new Date(2018, 0, 1, 24, 0, 0, 0).getTime();
        //dateAxis.min = new Date(2018, 0, 1, 0, 0, 0, 0).getTime();
        //dateAxis.strictMinMax = true;
        dateAxis.renderer.tooltipLocation = 0;

        var series1 = chart.series.push(new am4charts.ColumnSeries());


        series1.dataFields.openDateX = "start";
        series1.dataFields.dateX = "end";
        series1.dataFields.categoryY = "days";

        series1.columns.template.width = am4core.percent(100);
        series1.columns.template.tooltipText = "{task}: [bold]{openDateX}[/] - [bold]{dateX}[/]";
        series1.columns.template.propertyFields.fill = "color"; // get color from data
        series1.columns.template.propertyFields.stroke = "color";
        series1.columns.template.strokeOpacity = 1;

        chart.scrollbarX = new am4core.Scrollbar();
        //chart.dragGrip.disabled = false;
                @{ double manhrs = 0;
                    double autohrs = 0;
                    double autocapl = 0;
                    double manualcapl = 0;
          }

            @foreach (LC_Reports_V1.Models.LC_TSIU hrs in Model)
            {
                manhrs += hrs.LC_TotalManualHours.TotalHours;
                autohrs+= hrs.LC_AutomatedTotalHours.TotalHours;
                manualcapl += hrs.LC_TotalManualCAPLHours.TotalHours;
                autocapl += hrs.LC_AutomatedCAPLTotalHours.TotalHours;
            }
            chart.legend = new am4charts.Legend();

            // Position legend
            chart.legend.position = "bottom";
            //chart.legend.contentAlign = "right";

            //    var legend = new am4charts.Legend();
            //    legend.parent = chart.chartContainer;
            //   // legend.background.fill = am4core.color("");
            //  //  legend.background.fillOpacity = 0.05;
            //legend.width = undefined;
            //legend.layout = "horizontal";

            chart.legend.contentAlign = "center";  
        //legend.align = "absolute";
        @*if ("@Model.ElementAt(0).LC_Lab_Type.Contains("DA ESD")".localeCompare("False") == 0)*@
                chart.legend.data = [{
                  "name": "Manual Hours -  @Math.Round(manhrs,1) hrs",
                  "fill": am4core.color("red").lighten(0.2)
                }, {
                  "name": "Automated Hours - @Math.Round(autohrs,1) hrs",
                  "fill": am4core.color("green")
                }, {
                  "name": "Manual CAPL Hours - @Math.Round(manualcapl, 1) hrs",
                  "fill": am4core.color("blue")
                }, {
                  "name": "Automated CAPL Hours - @Math.Round(autocapl, 1) hrs",
                  "fill": am4core.color("orange")
                }];
        @*else
            legend.data = [{
                  "name": "Manual Hours -  @Math.Round(manhrs,1) hrs",
                  "fill": am4core.color("red").lighten(0.2)
                }, {
                  "name": "Manual Test Hours - @Math.Round(autohrs,1) hrs",
                  "fill": am4core.color("green")
                }];*@




            chart.exporting.menu = new am4core.ExportMenu();
            //chart.exporting.menu.items[0].icon ="C:/Users/OIG1COB/Pictures/download.png";
            chart.exporting.menu.align = "right";
        chart.exporting.menu.verticalAlign = "top";

        chart.exporting.filePrefix = "TSIU_@Model.ElementAt(0).LC_Name _ @Model.ElementAt(0).LC_Location _ @Model.ElementAt(0).ID_key";
            //chart.exporting.export( 'pdf' );
            chart.exporting.menu.items = [
                  {
                    "label": "...",
                    "menu": [
                      {
                        "label": "Image",
                        "menu": [
                          { "type": "png", "label": "PNG" },
                          { "type": "jpg", "label": "JPG" },
                          { "type": "svg", "label": "SVG" },
                          { "type": "pdf", "label": "PDF" } //not working
                        ]
                      }, {
                        "label": "Data",
                        "menu": [
                          { "type": "json", "label": "JSON" },
                          { "type": "csv", "label": "CSV" },
                          { "type": "xlsx", "label": "XLSX" }, //not working
                          { "type": "html", "label": "HTML" }, //not working
                          { "type": "pdfdata", "label": "PDF" } //not working
                        ]
                      }, {
                        "label": "Print", "type": "print"
                      }
                    ]
                  }
        ];

        // Set cell size in pixels
        var cellSize = 50;
        chart.events.on("datavalidated", function (ev) {

            // Get objects of interest
            var chart = ev.target;
            var categoryAxis = chart.yAxes.getIndex(0);
            //categoryAxis.dataFields.count
            // Calculate how we need to adjust chart height
            var adjustHeight = categoryAxis._dataItems._values.length * cellSize - categoryAxis.pixelHeight;
            // get current chart height
            var targetHeight = chart.pixelHeight + adjustHeight + 100;

            // Set it on chart's container
            chart.svgContainer.htmlElement.style.height = targetHeight + "px";
            //chart.svgContainer.htmlElement.style.width = "900px";
        });

            $("#export").prop('disabled', false);
        </script>
    }
</body>
</html>
